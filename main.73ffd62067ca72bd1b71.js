/*! For license information please see main.73ffd62067ca72bd1b71.js.LICENSE.txt */
(()=>{var t={315:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"*{box-sizing:border-box;margin:0;padding:0}body{background-color:#333;display:flex;justify-content:center;align-items:center;height:100svh;overflow:hidden}#game-board{--cell-size: 80vmin;--cell-gap: 8vmin;--border-radius: 4vmin;--font-size: 30vmin;position:relative;display:grid;grid-template-columns:repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));grid-template-rows:repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));gap:calc(var(--cell-gap)/var(--cell-count));border-radius:1vmin}.cell{background-color:#444;border-radius:calc(4vmin/var(--cell-count));box-shadow:inset 2px 2px 2px rgba(255,255,255,.2),inset -2px -2px 2px rgba(2,3,19,.2)}.tile{position:absolute;top:calc(var(--y)*(var(--cell-size)/var(--cell-count) + var(--cell-gap)/var(--cell-count)));left:calc(var(--x)*(var(--cell-size)/var(--cell-count) + var(--cell-gap)/var(--cell-count)));display:flex;justify-content:center;align-items:center;width:calc(var(--cell-size)/var(--cell-count));height:calc(var(--cell-size)/var(--cell-count));border-radius:calc(var(--border-radius)/var(--cell-count));font-family:Arial,Helvetica,sans-serif;font-size:calc(var(--font-size)/var(--cell-count));font-weight:bold;background-color:hsl(25, 60%, var(--bg-lightness));color:hsl(20, 25%, var(--text-lightness));animation:show 300ms ease-in-out;transition:all 300ms ease-in-out;will-change:transform}@keyframes show{0%{opacity:0;transform:scale(0)}}","",{version:3,sources:["webpack://./src/styles/style.scss"],names:[],mappings:"AAAA,EACI,qBAAA,CACA,QAAA,CACA,SAAA,CAGJ,KACI,qBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,aAAA,CACA,eAAA,CAGJ,YACI,mBAAA,CACA,iBAAA,CACA,sBAAA,CACA,mBAAA,CACA,iBAAA,CACA,YAAA,CACA,2FAAA,CACA,wFAAA,CACA,2CAAA,CACA,mBAAA,CAGJ,MACI,qBAAA,CACA,2CAAA,CACA,qFAAA,CAGJ,MACI,iBAAA,CACA,2FAAA,CAIA,4FAAA,CAIA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,8CAAA,CACA,+CAAA,CACA,0DAAA,CACA,sCAAA,CACA,kDAAA,CACA,gBAAA,CACA,kDAAA,CACA,yCAAA,CACA,gCAAA,CACA,gCAAA,CACA,qBAAA,CAGJ,gBACI,GACI,SAAA,CACA,kBAAA,CAAA",sourcesContent:["* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: #333;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100svh;\n    overflow: hidden;\n}\n\n#game-board {\n    --cell-size: 80vmin;\n    --cell-gap: 8vmin;\n    --border-radius: 4vmin;\n    --font-size: 30vmin;\n    position: relative;\n    display: grid;\n    grid-template-columns: repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));\n    grid-template-rows: repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));\n    gap: calc(var(--cell-gap) / var(--cell-count));\n    border-radius: 1vmin;\n}\n\n.cell {\n    background-color: #444;\n    border-radius: calc(4vmin / var(--cell-count));\n    box-shadow: inset 2px 2px 2px rgba(255, 255, 255, 0.2), inset -2px -2px 2px rgba(2, 3, 19, 0.2);\n}\n\n.tile {\n    position: absolute;\n    top: calc(\n        var(--y) *\n            (calc(var(--cell-size) / var(--cell-count) + var(--cell-gap) / var(--cell-count)))\n    );\n    left: calc(\n        var(--x) *\n            (calc(var(--cell-size) / var(--cell-count) + var(--cell-gap) / var(--cell-count)))\n    );\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: calc(var(--cell-size) / var(--cell-count));\n    height: calc(var(--cell-size) / var(--cell-count));\n    border-radius: calc(var(--border-radius) / var(--cell-count));\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: calc(var(--font-size) / var(--cell-count));\n    font-weight: bold;\n    background-color: hsl(25, 60%, var(--bg-lightness));\n    color: hsl(20, 25%, var(--text-lightness));\n    animation: show 300ms ease-in-out;\n    transition: all 300ms ease-in-out;\n    will-change: transform;\n}\n\n@keyframes show {\n    0% {\n        opacity: 0;\n        transform: scale(0);\n    }\n}\n"],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);i&&s[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},840:(t,e,n)=>{var i;!function(r,o,s,a){"use strict";var c,l=["","webkit","Moz","MS","ms","o"],u=o.createElement("div"),h="function",p=Math.round,f=Math.abs,d=Date.now;function v(t,e,n){return setTimeout(E(t,n),e)}function m(t,e,n){return!!Array.isArray(t)&&(A(t,n[e],n),!0)}function A(t,e,n){var i;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==a)for(i=0;i<t.length;)e.call(n,t[i],i,t),i++;else for(i in t)t.hasOwnProperty(i)&&e.call(n,t[i],i,t)}function g(t,e,n){var i="DEPRECATED METHOD: "+e+"\n"+n+" AT \n";return function(){var e=new Error("get-stack-trace"),n=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=r.console&&(r.console.warn||r.console.log);return o&&o.call(r.console,i,n),t.apply(this,arguments)}}c="function"!=typeof Object.assign?function(t){if(t===a||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(i!==a&&null!==i)for(var r in i)i.hasOwnProperty(r)&&(e[r]=i[r])}return e}:Object.assign;var y=g((function(t,e,n){for(var i=Object.keys(e),r=0;r<i.length;)(!n||n&&t[i[r]]===a)&&(t[i[r]]=e[i[r]]),r++;return t}),"extend","Use `assign`."),T=g((function(t,e){return y(t,e,!0)}),"merge","Use `assign`.");function C(t,e,n){var i,r=e.prototype;(i=t.prototype=Object.create(r)).constructor=t,i._super=r,n&&c(i,n)}function E(t,e){return function(){return t.apply(e,arguments)}}function b(t,e){return typeof t==h?t.apply(e&&e[0]||a,e):t}function w(t,e){return t===a?e:t}function x(t,e,n){A(S(e),(function(e){t.addEventListener(e,n,!1)}))}function k(t,e,n){A(S(e),(function(e){t.removeEventListener(e,n,!1)}))}function I(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function M(t,e){return t.indexOf(e)>-1}function S(t){return t.trim().split(/\s+/g)}function R(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function P(t){return Array.prototype.slice.call(t,0)}function z(t,e,n){for(var i=[],r=[],o=0;o<t.length;){var s=e?t[o][e]:t[o];R(r,s)<0&&i.push(t[o]),r[o]=s,o++}return n&&(i=e?i.sort((function(t,n){return t[e]>n[e]})):i.sort()),i}function F(t,e){for(var n,i,r=e[0].toUpperCase()+e.slice(1),o=0;o<l.length;){if((i=(n=l[o])?n+r:e)in t)return i;o++}return a}var D=1;function _(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||r}var B="ontouchstart"in r,O=F(r,"PointerEvent")!==a,N=B&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),Y="touch",G="mouse",X=25,L=1,q=4,j=8,H=1,W=2,U=4,V=8,Z=16,J=W|U,K=V|Z,Q=J|K,$=["x","y"],tt=["clientX","clientY"];function et(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){b(t.options.enable,[t])&&n.handler(e)},this.init()}function nt(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,o=e&L&&i-r==0,s=e&(q|j)&&i-r==0;n.isFirst=!!o,n.isFinal=!!s,o&&(t.session={}),n.eventType=e,function(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=it(e)),r>1&&!n.firstMultiple?n.firstMultiple=it(e):1===r&&(n.firstMultiple=!1);var o=n.firstInput,s=n.firstMultiple,c=s?s.center:o.center,l=e.center=rt(i);e.timeStamp=d(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=ct(c,l),e.distance=at(c,l),function(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},o=t.prevInput||{};e.eventType!==L&&o.eventType!==q||(r=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}(n,e),e.offsetDirection=st(e.deltaX,e.deltaY);var u,h,p=ot(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=p.x,e.overallVelocityY=p.y,e.overallVelocity=f(p.x)>f(p.y)?p.x:p.y,e.scale=s?(u=s.pointers,at((h=i)[0],h[1],tt)/at(u[0],u[1],tt)):1,e.rotation=s?function(t,e){return ct(e[1],e[0],tt)+ct(t[1],t[0],tt)}(s.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,function(t,e){var n,i,r,o,s=t.lastInterval||e,c=e.timeStamp-s.timeStamp;if(e.eventType!=j&&(c>X||s.velocity===a)){var l=e.deltaX-s.deltaX,u=e.deltaY-s.deltaY,h=ot(c,l,u);i=h.x,r=h.y,n=f(h.x)>f(h.y)?h.x:h.y,o=st(l,u),t.lastInterval=e}else n=s.velocity,i=s.velocityX,r=s.velocityY,o=s.direction;e.velocity=n,e.velocityX=i,e.velocityY=r,e.direction=o}(n,e);var v=t.element;I(e.srcEvent.target,v)&&(v=e.srcEvent.target),e.target=v}(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function it(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:p(t.pointers[n].clientX),clientY:p(t.pointers[n].clientY)},n++;return{timeStamp:d(),pointers:e,center:rt(e),deltaX:t.deltaX,deltaY:t.deltaY}}function rt(t){var e=t.length;if(1===e)return{x:p(t[0].clientX),y:p(t[0].clientY)};for(var n=0,i=0,r=0;r<e;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:p(n/e),y:p(i/e)}}function ot(t,e,n){return{x:e/t||0,y:n/t||0}}function st(t,e){return t===e?H:f(t)>=f(e)?t<0?W:U:e<0?V:Z}function at(t,e,n){n||(n=$);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function ct(t,e,n){n||(n=$);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}et.prototype={handler:function(){},init:function(){this.evEl&&x(this.element,this.evEl,this.domHandler),this.evTarget&&x(this.target,this.evTarget,this.domHandler),this.evWin&&x(_(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&k(this.element,this.evEl,this.domHandler),this.evTarget&&k(this.target,this.evTarget,this.domHandler),this.evWin&&k(_(this.element),this.evWin,this.domHandler)}};var lt={mousedown:L,mousemove:2,mouseup:q},ut="mousedown",ht="mousemove mouseup";function pt(){this.evEl=ut,this.evWin=ht,this.pressed=!1,et.apply(this,arguments)}C(pt,et,{handler:function(t){var e=lt[t.type];e&L&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=q),this.pressed&&(e&q&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:G,srcEvent:t}))}});var ft={pointerdown:L,pointermove:2,pointerup:q,pointercancel:j,pointerout:j},dt={2:Y,3:"pen",4:G,5:"kinect"},vt="pointerdown",mt="pointermove pointerup pointercancel";function At(){this.evEl=vt,this.evWin=mt,et.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}r.MSPointerEvent&&!r.PointerEvent&&(vt="MSPointerDown",mt="MSPointerMove MSPointerUp MSPointerCancel"),C(At,et,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=ft[i],o=dt[t.pointerType]||t.pointerType,s=o==Y,a=R(e,t.pointerId,"pointerId");r&L&&(0===t.button||s)?a<0&&(e.push(t),a=e.length-1):r&(q|j)&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var gt={touchstart:L,touchmove:2,touchend:q,touchcancel:j};function yt(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,et.apply(this,arguments)}function Tt(t,e){var n=P(t.touches),i=P(t.changedTouches);return e&(q|j)&&(n=z(n.concat(i),"identifier",!0)),[n,i]}C(yt,et,{handler:function(t){var e=gt[t.type];if(e===L&&(this.started=!0),this.started){var n=Tt.call(this,t,e);e&(q|j)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Y,srcEvent:t})}}});var Ct={touchstart:L,touchmove:2,touchend:q,touchcancel:j},Et="touchstart touchmove touchend touchcancel";function bt(){this.evTarget=Et,this.targetIds={},et.apply(this,arguments)}function wt(t,e){var n=P(t.touches),i=this.targetIds;if(e&(2|L)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,s=P(t.changedTouches),a=[],c=this.target;if(o=n.filter((function(t){return I(t.target,c)})),e===L)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<s.length;)i[s[r].identifier]&&a.push(s[r]),e&(q|j)&&delete i[s[r].identifier],r++;return a.length?[z(o.concat(a),"identifier",!0),a]:void 0}C(bt,et,{handler:function(t){var e=Ct[t.type],n=wt.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Y,srcEvent:t})}});var xt=2500;function kt(){et.apply(this,arguments);var t=E(this.handler,this);this.touch=new bt(this.manager,t),this.mouse=new pt(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function It(t,e){t&L?(this.primaryTouch=e.changedPointers[0].identifier,Mt.call(this,e)):t&(q|j)&&Mt.call(this,e)}function Mt(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches;setTimeout((function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)}),xt)}}function St(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(e-r.x),s=Math.abs(n-r.y);if(o<=25&&s<=25)return!0}return!1}C(kt,et,{handler:function(t,e,n){var i=n.pointerType==Y,r=n.pointerType==G;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)It.call(this,e,n);else if(r&&St.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Rt=F(u.style,"touchAction"),Pt=Rt!==a,zt="compute",Ft="auto",Dt="manipulation",_t="none",Bt="pan-x",Ot="pan-y",Nt=function(){if(!Pt)return!1;var t={},e=r.CSS&&r.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){t[n]=!e||r.CSS.supports("touch-action",n)})),t}();function Yt(t,e){this.manager=t,this.set(e)}Yt.prototype={set:function(t){t==zt&&(t=this.compute()),Pt&&this.manager.element.style&&Nt[t]&&(this.manager.element.style[Rt]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return A(this.manager.recognizers,(function(e){b(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(M(t,_t))return _t;var e=M(t,Bt),n=M(t,Ot);return e&&n?_t:e||n?e?Bt:Ot:M(t,Dt)?Dt:Ft}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var i=this.actions,r=M(i,_t)&&!Nt[_t],o=M(i,Ot)&&!Nt[Ot],s=M(i,Bt)&&!Nt[Bt];if(r){var a=1===t.pointers.length,c=t.distance<2,l=t.deltaTime<250;if(a&&c&&l)return}if(!s||!o)return r||o&&n&J||s&&n&K?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var Gt=1,Xt=32;function Lt(t){this.options=c({},this.defaults,t||{}),this.id=D++,this.manager=null,this.options.enable=w(this.options.enable,!0),this.state=Gt,this.simultaneous={},this.requireFail=[]}function qt(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}function jt(t){return t==Z?"down":t==V?"up":t==W?"left":t==U?"right":""}function Ht(t,e){var n=e.manager;return n?n.get(t):t}function Wt(){Lt.apply(this,arguments)}function Ut(){Wt.apply(this,arguments),this.pX=null,this.pY=null}function Vt(){Wt.apply(this,arguments)}function Zt(){Lt.apply(this,arguments),this._timer=null,this._input=null}function Jt(){Wt.apply(this,arguments)}function Kt(){Wt.apply(this,arguments)}function Qt(){Lt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function $t(t,e){return(e=e||{}).recognizers=w(e.recognizers,$t.defaults.preset),new te(t,e)}function te(t,e){this.options=c({},$t.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new(this.options.inputClass||(O?At:N?bt:B?kt:pt))(this,nt),this.touchAction=new Yt(this,this.options.touchAction),ee(this,!0),A(this.options.recognizers,(function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}function ee(t,e){var n,i=t.element;i.style&&(A(t.options.cssProps,(function(r,o){n=F(i.style,o),e?(t.oldCssProps[n]=i.style[n],i.style[n]=r):i.style[n]=t.oldCssProps[n]||""})),e||(t.oldCssProps={}))}Lt.prototype={defaults:{},set:function(t){return c(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(m(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Ht(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return m(t,"dropRecognizeWith",this)||(t=Ht(t,this),delete this.simultaneous[t.id]),this},requireFailure:function(t){if(m(t,"requireFailure",this))return this;var e=this.requireFail;return-1===R(e,t=Ht(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(m(t,"dropRequireFailure",this))return this;t=Ht(t,this);var e=R(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,n=this.state;function i(n){e.manager.emit(n,t)}n<8&&i(e.options.event+qt(n)),i(e.options.event),t.additionalEvent&&i(t.additionalEvent),n>=8&&i(e.options.event+qt(n))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=Xt},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(Xt|Gt)))return!1;t++}return!0},recognize:function(t){var e=c({},t);if(!b(this.options.enable,[this,e]))return this.reset(),void(this.state=Xt);56&this.state&&(this.state=Gt),this.state=this.process(e),30&this.state&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},C(Wt,Lt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=6&e,r=this.attrTest(t);return i&&(n&j||!r)?16|e:i||r?n&q?8|e:2&e?4|e:2:Xt}}),C(Ut,Wt,{defaults:{event:"pan",threshold:10,pointers:1,direction:Q},getTouchAction:function(){var t=this.options.direction,e=[];return t&J&&e.push(Ot),t&K&&e.push(Bt),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,o=t.deltaX,s=t.deltaY;return r&e.direction||(e.direction&J?(r=0===o?H:o<0?W:U,n=o!=this.pX,i=Math.abs(t.deltaX)):(r=0===s?H:s<0?V:Z,n=s!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return Wt.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=jt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),C(Vt,Wt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[_t]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||2&this.state)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),C(Zt,Lt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Ft]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(q|j)&&!r)this.reset();else if(t.eventType&L)this.reset(),this._timer=v((function(){this.state=8,this.tryEmit()}),e.time,this);else if(t.eventType&q)return 8;return Xt},reset:function(){clearTimeout(this._timer)},emit:function(t){8===this.state&&(t&&t.eventType&q?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=d(),this.manager.emit(this.options.event,this._input)))}}),C(Jt,Wt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[_t]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||2&this.state)}}),C(Kt,Wt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:J|K,pointers:1},getTouchAction:function(){return Ut.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(J|K)?e=t.overallVelocity:n&J?e=t.overallVelocityX:n&K&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&f(e)>this.options.velocity&&t.eventType&q},emit:function(t){var e=jt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),C(Qt,Lt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Dt]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),t.eventType&L&&0===this.count)return this.failTimeout();if(i&&r&&n){if(t.eventType!=q)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,s=!this.pCenter||at(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,s&&o?this.count+=1:this.count=1,this._input=t,0==this.count%e.taps)return this.hasRequireFailures()?(this._timer=v((function(){this.state=8,this.tryEmit()}),e.interval,this),2):8}return Xt},failTimeout:function(){return this._timer=v((function(){this.state=Xt}),this.options.interval,this),Xt},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),$t.VERSION="2.0.7",$t.defaults={domEvents:!1,touchAction:zt,enable:!0,inputTarget:null,inputClass:null,preset:[[Jt,{enable:!1}],[Vt,{enable:!1},["rotate"]],[Kt,{direction:J}],[Ut,{direction:J},["swipe"]],[Qt],[Qt,{event:"doubletap",taps:2},["tap"]],[Zt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},te.prototype={set:function(t){return c(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var n;this.touchAction.preventDefaults(t);var i=this.recognizers,r=e.curRecognizer;(!r||r&&8&r.state)&&(r=e.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],2===e.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&14&n.state&&(r=e.curRecognizer=n),o++}},get:function(t){if(t instanceof Lt)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(m(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(m(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=R(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==a&&e!==a){var n=this.handlers;return A(S(t),(function(t){n[t]=n[t]||[],n[t].push(e)})),this}},off:function(t,e){if(t!==a){var n=this.handlers;return A(S(t),(function(t){e?n[t]&&n[t].splice(R(n[t],e),1):delete n[t]})),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var n=o.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ee(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},c($t,{INPUT_START:L,INPUT_MOVE:2,INPUT_END:q,INPUT_CANCEL:j,STATE_POSSIBLE:Gt,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:Xt,DIRECTION_NONE:H,DIRECTION_LEFT:W,DIRECTION_RIGHT:U,DIRECTION_UP:V,DIRECTION_DOWN:Z,DIRECTION_HORIZONTAL:J,DIRECTION_VERTICAL:K,DIRECTION_ALL:Q,Manager:te,Input:et,TouchAction:Yt,TouchInput:bt,MouseInput:pt,PointerEventInput:At,TouchMouseInput:kt,SingleTouchInput:yt,Recognizer:Lt,AttrRecognizer:Wt,Tap:Qt,Pan:Ut,Swipe:Kt,Pinch:Vt,Rotate:Jt,Press:Zt,on:x,off:k,each:A,merge:T,extend:y,assign:c,inherit:C,bindFn:E,prefixed:F}),(void 0!==r?r:"undefined"!=typeof self?self:{}).Hammer=$t,(i=function(){return $t}.call(e,n,e,t))===a||(t.exports=i)}(window,document)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],l=i.base?c[0]+i.base:c[0],u=o[l]||0,h="".concat(l," ").concat(u);o[l]=u+1;var p=n(h),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var d=r(f,i);i.byIndex=a,e.splice(a,0,{identifier:h,updater:d,references:1})}s.push(h)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=i(t,r),l=0;l<o.length;l++){var u=n(o[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{"use strict";var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),s=n.n(o),a=n(565),c=n.n(a),l=n(216),u=n.n(l),h=n(589),p=n.n(h),f=n(315),d={};d.styleTagTransform=p(),d.setAttributes=c(),d.insert=s().bind(null,"head"),d.domAPI=r(),d.insertStyleElement=u(),e()(f.Z,d),f.Z&&f.Z.locals&&f.Z.locals;var v=function(){function t(t,e,n){this.linkedTile=null,this.linkedTileForMerge=null;var i=document.createElement("div");i.classList.add("cell"),t.append(i),this.x=e,this.y=n}return t.prototype.linkTile=function(t){t.setXY(this.x,this.y),this.linkedTile=t},t.prototype.isEmpty=function(){return!this.linkedTile},t.prototype.unlinkTile=function(){this.linkedTile=null},t.prototype.unlinkTileForMerge=function(){this.linkedTileForMerge=null},t.prototype.linkTileForMerge=function(t){t.setXY(this.x,this.y),this.linkedTileForMerge=t},t.prototype.hasTileForMerge=function(){return!!this.linkedTileForMerge},t.prototype.canAccept=function(t){var e;return this.isEmpty()||!this.hasTileForMerge()&&(null===(e=this.linkedTile)||void 0===e?void 0:e.value)===t.value},t.prototype.mergeTiles=function(){var t,e,n;null===(t=this.linkedTile)||void 0===t||t.setValue(this.linkedTile.value+Number(null===(e=this.linkedTileForMerge)||void 0===e?void 0:e.value)),null===(n=this.linkedTileForMerge)||void 0===n||n.removeFromDom(),this.unlinkTileForMerge()},t}(),m=function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))},A=function(){function t(t,e){t.style.setProperty("--cell-count",e.toString()),this.cells=[];for(var n=0;n<Math.pow(e,2);n++)this.cells.push(new v(t,n%e,Math.floor(n/e)));this.cellsGroupedByColumn=this.cellsGroupeByColumn(),this.cellsGroupedByReversedColumn=this.cellsGroupedByColumn.map((function(t){return m([],t,!0).reverse()})),this.cellsGroupedByRow=this.cellsGroupeByRow(),this.cellsGroupedByReversedRow=this.cellsGroupedByRow.map((function(t){return m([],t,!0).reverse()}))}return t.prototype.getRandomEmptyCell=function(){var t=this.cells.filter((function(t){return t.isEmpty()}));return t[Math.floor(Math.random()*t.length)]},t.prototype.cellsGroupeByColumn=function(){return this.cells.reduce((function(t,e){return t[e.x]=t[e.x]||[],t[e.x][e.y]=e,t}),[])},t.prototype.cellsGroupeByRow=function(){return this.cells.reduce((function(t,e){return t[e.y]=t[e.y]||[],t[e.y][e.x]=e,t}),[])},t}(),g=function(){function t(t){this.value=0,this.x=0,this.y=0,this.tileElement=document.createElement("div"),this.tileElement.classList.add("tile"),this.setValue(Math.random()>.5?2:4),t.append(this.tileElement)}return t.prototype.setXY=function(t,e){this.x=t,this.y=e,this.tileElement.style.setProperty("--x",t.toString()),this.tileElement.style.setProperty("--y",e.toString())},t.prototype.setValue=function(t){this.value=t,this.tileElement.textContent=t.toString();var e=100-9*Math.log2(t);this.tileElement.style.setProperty("--bg-lightness","".concat(e,"%")),this.tileElement.style.setProperty("--text-lightness","".concat(e<50?90:10,"%"))},t.prototype.removeFromDom=function(){this.tileElement.remove()},t.prototype.waitForTransitionEnd=function(){var t=this;return new Promise((function(e){t.tileElement.addEventListener("transitionend",e,{once:!0})}))},t.prototype.waitForAnimationEnd=function(){var t=this;return new Promise((function(e){t.tileElement.addEventListener("animationend",e,{once:!0})}))},t}(),y=n(840),T=n.n(y),C=function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))},E=function(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},b=document.getElementById("game-board"),w=document.querySelector("body"),x=new(T())(w);function k(){window.addEventListener("keydown",S,{once:!0})}x.get("swipe").set({direction:T().DIRECTION_ALL,threshold:5}),x.on("swipe",S),k();var I=!1,M=new A(b,4);function S(t){return C(this,void 0,void 0,(function(){var e;return E(this,(function(n){switch(n.label){case 0:if(I)return[2];switch(I=!0,t instanceof KeyboardEvent?t.key:t.direction){case"ArrowUp":case 8:return[3,1];case"ArrowDown":case 16:return[3,3];case"ArrowLeft":case 2:return[3,5];case"ArrowRight":case 4:return[3,7]}return[3,9];case 1:return _()?[4,R()]:(k(),I=!1,[2]);case 2:case 4:case 6:case 8:return n.sent(),[3,10];case 3:return B()?[4,P()]:(k(),I=!1,[2]);case 5:return O()?[4,z()]:(k(),I=!1,[2]);case 7:return N()?[4,F()]:(k(),I=!1,[2]);case 9:case 13:return k(),I=!1,[2];case 10:return e=new g(b),M.getRandomEmptyCell().linkTile(e),[4,e.waitForAnimationEnd()];case 11:return n.sent(),_()||B()||O()||N()?[3,13]:[4,e.waitForAnimationEnd()];case 12:return n.sent(),alert("Try again!"),[2]}}))}))}function R(){return C(this,void 0,void 0,(function(){return E(this,(function(t){switch(t.label){case 0:return[4,D(M.cellsGroupedByColumn)];case 1:return t.sent(),[2]}}))}))}function P(){return C(this,void 0,void 0,(function(){return E(this,(function(t){switch(t.label){case 0:return[4,D(M.cellsGroupedByReversedColumn)];case 1:return t.sent(),[2]}}))}))}function z(){return C(this,void 0,void 0,(function(){return E(this,(function(t){switch(t.label){case 0:return[4,D(M.cellsGroupedByRow)];case 1:return t.sent(),[2]}}))}))}function F(){return C(this,void 0,void 0,(function(){return E(this,(function(t){switch(t.label){case 0:return[4,D(M.cellsGroupedByReversedRow)];case 1:return t.sent(),[2]}}))}))}function D(t){return C(this,void 0,void 0,(function(){var e;return E(this,(function(n){switch(n.label){case 0:return e=[],t.forEach((function(t){return function(t,e){for(var n=1;n<t.length;n++)if(!t[n].isEmpty()){var i=t[n],r=void 0,o=n-1;if(i.linkedTile)for(;o>=0&&t[o].canAccept(i.linkedTile);)r=t[o],o--;r&&(i.linkedTile&&e.push(i.linkedTile.waitForTransitionEnd()),i.linkedTile&&(r.isEmpty()?r.linkTile(i.linkedTile):r.linkTileForMerge(i.linkedTile)),i.unlinkTile())}}(t,e)})),[4,Promise.all(e)];case 1:return n.sent(),M.cells.forEach((function(t){t.hasTileForMerge()&&t.mergeTiles()})),[2]}}))}))}function _(){return Y(M.cellsGroupedByColumn)}function B(){return Y(M.cellsGroupedByReversedColumn)}function O(){return Y(M.cellsGroupedByRow)}function N(){return Y(M.cellsGroupedByReversedRow)}function Y(t){return t.some((function(t){return function(t){return t.some((function(e,n){if(0===n)return!1;if(e.isEmpty())return!1;var i=t[n-1];return e.linkedTile?i.canAccept(e.linkedTile):void 0}))}(t)}))}M.getRandomEmptyCell().linkTile(new g(b)),M.getRandomEmptyCell().linkTile(new g(b))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,