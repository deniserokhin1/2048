(()=>{"use strict";var e={315:(e,n,t)=>{t.d(n,{Z:()=>a});var r=t(537),i=t.n(r),o=t(645),l=t.n(o)()(i());l.push([e.id,"*{box-sizing:border-box;margin:0;padding:0}body{background-color:#333;display:flex;justify-content:center;align-items:center;height:100vh}#game-board{--cell-size: 80vmin;--cell-gap: 8vmin;--border-radius: 4vmin;--font-size: 30vmin;position:relative;display:grid;grid-template-columns:repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));grid-template-rows:repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));gap:calc(var(--cell-gap)/var(--cell-count));border-radius:1vmin}.cell{background-color:#444;border-radius:calc(4vmin/var(--cell-count));box-shadow:inset 2px 2px 2px rgba(255,255,255,.2),inset -2px -2px 2px rgba(2,3,19,.2)}.tile{position:absolute;top:calc(var(--y)*(var(--cell-size)/var(--cell-count) + var(--cell-gap)/var(--cell-count)));left:calc(var(--x)*(var(--cell-size)/var(--cell-count) + var(--cell-gap)/var(--cell-count)));display:flex;justify-content:center;align-items:center;width:calc(var(--cell-size)/var(--cell-count));height:calc(var(--cell-size)/var(--cell-count));border-radius:calc(var(--border-radius)/var(--cell-count));font-family:Arial,Helvetica,sans-serif;font-size:calc(var(--font-size)/var(--cell-count));font-weight:bold;background-color:hsl(25, 60%, var(--bg-lightness));color:hsl(20, 25%, var(--text-lightness));animation:show 300ms ease-in-out;transition:all 300ms ease-in-out;will-change:transform}@keyframes show{0%{opacity:.5;transform:scale(0)}}","",{version:3,sources:["webpack://./src/styles/style.scss"],names:[],mappings:"AAAA,EACI,qBAAA,CACA,QAAA,CACA,SAAA,CAGJ,KACI,qBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,YAAA,CAGJ,YACI,mBAAA,CACA,iBAAA,CACA,sBAAA,CACA,mBAAA,CACA,iBAAA,CACA,YAAA,CACA,2FAAA,CACA,wFAAA,CACA,2CAAA,CACA,mBAAA,CAGJ,MACI,qBAAA,CACA,2CAAA,CACA,qFAAA,CAGJ,MACI,iBAAA,CACA,2FAAA,CAIA,4FAAA,CAIA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,8CAAA,CACA,+CAAA,CACA,0DAAA,CACA,sCAAA,CACA,kDAAA,CACA,gBAAA,CACA,kDAAA,CACA,yCAAA,CACA,gCAAA,CACA,gCAAA,CACA,qBAAA,CAGJ,gBACI,GACI,UAAA,CACA,kBAAA,CAAA",sourcesContent:["* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: #333;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n}\n\n#game-board {\n    --cell-size: 80vmin;\n    --cell-gap: 8vmin;\n    --border-radius: 4vmin;\n    --font-size: 30vmin;\n    position: relative;\n    display: grid;\n    grid-template-columns: repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));\n    grid-template-rows: repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));\n    gap: calc(var(--cell-gap) / var(--cell-count));\n    border-radius: 1vmin;\n}\n\n.cell {\n    background-color: #444;\n    border-radius: calc(4vmin / var(--cell-count));\n    box-shadow: inset 2px 2px 2px rgba(255, 255, 255, 0.2), inset -2px -2px 2px rgba(2, 3, 19, 0.2);\n}\n\n.tile {\n    position: absolute;\n    top: calc(\n        var(--y) *\n            (calc(var(--cell-size) / var(--cell-count) + var(--cell-gap) / var(--cell-count)))\n    );\n    left: calc(\n        var(--x) *\n            (calc(var(--cell-size) / var(--cell-count) + var(--cell-gap) / var(--cell-count)))\n    );\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: calc(var(--cell-size) / var(--cell-count));\n    height: calc(var(--cell-size) / var(--cell-count));\n    border-radius: calc(var(--border-radius) / var(--cell-count));\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: calc(var(--font-size) / var(--cell-count));\n    font-weight: bold;\n    background-color: hsl(25, 60%, var(--bg-lightness));\n    color: hsl(20, 25%, var(--text-lightness));\n    animation: show 300ms ease-in-out;\n    transition: all 300ms ease-in-out;\n    will-change: transform;\n}\n\n@keyframes show {\n    0% {\n        opacity: 0.5;\n        transform: scale(0);\n    }\n}\n"],sourceRoot:""}]);const a=l},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(l[c]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&l[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),n.push(u))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},l=[],a=0;a<e.length;a++){var c=e[a],s=r.base?c[0]+r.base:c[0],u=o[s]||0,d="".concat(s," ").concat(u);o[s]=u+1;var A=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var f=i(p,r);r.byIndex=a,n.splice(a,0,{identifier:d,updater:f,references:1})}l.push(d)}return l}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var l=0;l<o.length;l++){var a=t(o[l]);n[a].references--}for(var c=r(e,i),s=0;s<o.length;s++){var u=t(o[s]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=function(){function e(e,n,t){this.linkedTile=null,this.linkedTileForMerge=null;var r=document.createElement("div");r.classList.add("cell"),e.append(r),this.x=n,this.y=t}return e.prototype.linkTile=function(e){e.setXY(this.x,this.y),this.linkedTile=e},e.prototype.isEmpty=function(){return!this.linkedTile},e.prototype.unlinkTile=function(){this.linkedTile=null},e.prototype.unlinkTileForMerge=function(){this.linkedTileForMerge=null},e.prototype.linkTileForMerge=function(e){e.setXY(this.x,this.y),this.linkedTileForMerge=e},e.prototype.hasTileForMerge=function(){return!!this.linkedTileForMerge},e.prototype.canAccept=function(e){var n;return this.isEmpty()||!this.hasTileForMerge()&&(null===(n=this.linkedTile)||void 0===n?void 0:n.value)===e.value},e.prototype.mergeTiles=function(){var e,n,t;null===(e=this.linkedTile)||void 0===e||e.setValue(this.linkedTile.value+Number(null===(n=this.linkedTileForMerge)||void 0===n?void 0:n.value)),null===(t=this.linkedTileForMerge)||void 0===t||t.removeFromDom(),this.unlinkTileForMerge()},e}(),n=function(e,n,t){if(t||2===arguments.length)for(var r,i=0,o=n.length;i<o;i++)!r&&i in n||(r||(r=Array.prototype.slice.call(n,0,i)),r[i]=n[i]);return e.concat(r||Array.prototype.slice.call(n))},r=function(){function t(t,r){t.style.setProperty("--cell-count",r.toString()),this.cells=[];for(var i=0;i<Math.pow(r,2);i++)this.cells.push(new e(t,i%r,Math.floor(i/r)));this.cellsGroupedByColumn=this.cellsGroupeByColumn(),this.cellsGroupedByReversedColumn=this.cellsGroupedByColumn.map((function(e){return n([],e,!0).reverse()})),this.cellsGroupedByRow=this.cellsGroupeByRow(),this.cellsGroupedByReversedRow=this.cellsGroupedByRow.map((function(e){return n([],e,!0).reverse()}))}return t.prototype.getRandomEmptyCell=function(){var e=this.cells.filter((function(e){return e.isEmpty()}));return e[Math.floor(Math.random()*e.length)]},t.prototype.cellsGroupeByColumn=function(){return this.cells.reduce((function(e,n){return e[n.x]=e[n.x]||[],e[n.x][n.y]=n,e}),[])},t.prototype.cellsGroupeByRow=function(){return this.cells.reduce((function(e,n){return e[n.y]=e[n.y]||[],e[n.y][n.x]=n,e}),[])},t}(),i=function(){function e(e){this.value=0,this.x=0,this.y=0,this.tileElement=document.createElement("div"),this.tileElement.classList.add("tile"),this.setValue(Math.random()>.5?2:4),e.append(this.tileElement)}return e.prototype.setXY=function(e,n){this.x=e,this.y=n,this.tileElement.style.setProperty("--x",e.toString()),this.tileElement.style.setProperty("--y",n.toString())},e.prototype.setValue=function(e){this.value=e,this.tileElement.textContent=e.toString();var n=100-9*Math.log2(e);this.tileElement.style.setProperty("--bg-lightness","".concat(n,"%")),this.tileElement.style.setProperty("--text-lightness","".concat(n<50?90:10,"%"))},e.prototype.removeFromDom=function(){this.tileElement.remove()},e.prototype.waitForTransitionEnd=function(){var e=this;return new Promise((function(n){e.tileElement.addEventListener("transitionend",n,{once:!0})}))},e.prototype.waitForAnimationEnd=function(){var e=this;return new Promise((function(n){e.tileElement.addEventListener("animationend",n,{once:!0})}))},e}(),o=t(379),l=t.n(o),a=t(795),c=t.n(a),s=t(569),u=t.n(s),d=t(565),A=t.n(d),p=t(216),f=t.n(p),v=t(589),h=t.n(v),m=t(315),y={};y.styleTagTransform=h(),y.setAttributes=A(),y.insert=u().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=f(),l()(m.Z,y),m.Z&&m.Z.locals&&m.Z.locals;var g=function(e,n,t,r){return new(t||(t=Promise))((function(i,o){function l(e){try{c(r.next(e))}catch(e){o(e)}}function a(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(l,a)}c((r=r.apply(e,n||[])).next())}))},C=function(e,n){var t,r,i,o,l={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(l=0)),l;)try{if(t=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return l.label++,{value:a[1],done:!1};case 5:l.label++,r=a[1],a=[0];continue;case 7:a=l.ops.pop(),l.trys.pop();continue;default:if(!((i=(i=l.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){l=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){l.label=a[1];break}if(6===a[0]&&l.label<i[1]){l.label=i[1],i=a;break}if(i&&l.label<i[2]){l.label=i[2],l.ops.push(a);break}i[2]&&l.ops.pop(),l.trys.pop();continue}a=n.call(e,l)}catch(e){a=[6,e],r=0}finally{t=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},b=document.getElementById("game-board"),w=new r(b,4);function x(){window.addEventListener("keydown",k,{once:!0})}function k(e){return g(this,void 0,void 0,(function(){var n;return C(this,(function(t){switch(t.label){case 0:switch(e.key){case"ArrowUp":return[3,1];case"ArrowDown":return[3,3];case"ArrowLeft":return[3,5];case"ArrowRight":return[3,7]}return[3,9];case 1:return G()?[4,T()]:(x(),[2]);case 2:case 4:case 6:case 8:return t.sent(),[3,10];case 3:return R()?[4,E()]:(x(),[2]);case 5:return z()?[4,B()]:(x(),[2]);case 7:return I()?[4,M()]:(x(),[2]);case 9:case 13:return x(),[2];case 10:return n=new i(b),w.getRandomEmptyCell().linkTile(n),[4,n.waitForAnimationEnd()];case 11:return t.sent(),G()||R()||z()||I()?[3,13]:[4,n.waitForAnimationEnd()];case 12:return t.sent(),alert("Try again!"),[2]}}))}))}function T(){return g(this,void 0,void 0,(function(){return C(this,(function(e){switch(e.label){case 0:return[4,F(w.cellsGroupedByColumn)];case 1:return e.sent(),[2]}}))}))}function E(){return g(this,void 0,void 0,(function(){return C(this,(function(e){switch(e.label){case 0:return[4,F(w.cellsGroupedByReversedColumn)];case 1:return e.sent(),[2]}}))}))}function B(){return g(this,void 0,void 0,(function(){return C(this,(function(e){switch(e.label){case 0:return[4,F(w.cellsGroupedByRow)];case 1:return e.sent(),[2]}}))}))}function M(){return g(this,void 0,void 0,(function(){return C(this,(function(e){switch(e.label){case 0:return[4,F(w.cellsGroupedByReversedRow)];case 1:return e.sent(),[2]}}))}))}function F(e){return g(this,void 0,void 0,(function(){var n;return C(this,(function(t){switch(t.label){case 0:return n=[],e.forEach((function(e){return function(e,n){for(var t=1;t<e.length;t++)if(!e[t].isEmpty()){var r=e[t],i=void 0,o=t-1;if(r.linkedTile)for(;o>=0&&e[o].canAccept(r.linkedTile);)i=e[o],o--;i&&(r.linkedTile&&n.push(r.linkedTile.waitForTransitionEnd()),r.linkedTile&&(i.isEmpty()?i.linkTile(r.linkedTile):i.linkTileForMerge(r.linkedTile)),r.unlinkTile())}}(e,n)})),[4,Promise.all(n)];case 1:return t.sent(),w.cells.forEach((function(e){e.hasTileForMerge()&&e.mergeTiles()})),[2]}}))}))}function G(){return S(w.cellsGroupedByColumn)}function R(){return S(w.cellsGroupedByReversedColumn)}function z(){return S(w.cellsGroupedByRow)}function I(){return S(w.cellsGroupedByReversedRow)}function S(e){return e.some((function(e){return function(e){return e.some((function(n,t){if(0===t)return!1;if(n.isEmpty())return!1;var r=e[t-1];return n.linkedTile?r.canAccept(n.linkedTile):void 0}))}(e)}))}w.getRandomEmptyCell().linkTile(new i(b)),w.getRandomEmptyCell().linkTile(new i(b)),x()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,