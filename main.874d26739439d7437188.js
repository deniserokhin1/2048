/*! For license information please see main.874d26739439d7437188.js.LICENSE.txt */
(()=>{var t={315:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(537),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"*{box-sizing:border-box;margin:0;padding:0}body{background-color:#333;display:flex;justify-content:center;align-items:center;height:100svh;overflow:hidden}#game-board{--cell-size: 80vmin;--cell-gap: 8vmin;--border-radius: 4vmin;--font-size: 30vmin;position:relative;display:grid;grid-template-columns:repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));grid-template-rows:repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));gap:calc(var(--cell-gap)/var(--cell-count));border-radius:1vmin}.cell{background-color:#444;border-radius:calc(4vmin/var(--cell-count))}.tile{position:absolute;top:calc(var(--y)*(var(--cell-size)/var(--cell-count) + var(--cell-gap)/var(--cell-count)));left:calc(var(--x)*(var(--cell-size)/var(--cell-count) + var(--cell-gap)/var(--cell-count)));display:flex;justify-content:center;align-items:center;width:calc(var(--cell-size)/var(--cell-count));height:calc(var(--cell-size)/var(--cell-count));border-radius:calc(var(--border-radius)/var(--cell-count));font-family:Arial,Helvetica,sans-serif;font-size:calc(var(--font-size)/var(--cell-count));font-weight:bold;background-color:hsl(25, 60%, var(--bg-lightness));color:hsl(20, 25%, var(--text-lightness));animation:show 300ms ease-in-out;transition:all 300ms ease-in-out;will-change:transform}@keyframes show{0%{opacity:0;transform:scale(0)}}","",{version:3,sources:["webpack://./src/styles/style.scss"],names:[],mappings:"AAAA,EACI,qBAAA,CACA,QAAA,CACA,SAAA,CAGJ,KACI,qBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,aAAA,CACA,eAAA,CAGJ,YACI,mBAAA,CACA,iBAAA,CACA,sBAAA,CACA,mBAAA,CACA,iBAAA,CACA,YAAA,CACA,2FAAA,CACA,wFAAA,CACA,2CAAA,CACA,mBAAA,CAGJ,MACI,qBAAA,CACA,2CAAA,CAGJ,MACI,iBAAA,CACA,2FAAA,CAIA,4FAAA,CAIA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,8CAAA,CACA,+CAAA,CACA,0DAAA,CACA,sCAAA,CACA,kDAAA,CACA,gBAAA,CACA,kDAAA,CACA,yCAAA,CACA,gCAAA,CACA,gCAAA,CACA,qBAAA,CAGJ,gBACI,GACI,SAAA,CACA,kBAAA,CAAA",sourcesContent:["* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: #333;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100svh;\n    overflow: hidden;\n}\n\n#game-board {\n    --cell-size: 80vmin;\n    --cell-gap: 8vmin;\n    --border-radius: 4vmin;\n    --font-size: 30vmin;\n    position: relative;\n    display: grid;\n    grid-template-columns: repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));\n    grid-template-rows: repeat(var(--cell-count), calc(var(--cell-size) / var(--cell-count)));\n    gap: calc(var(--cell-gap) / var(--cell-count));\n    border-radius: 1vmin;\n}\n\n.cell {\n    background-color: #444;\n    border-radius: calc(4vmin / var(--cell-count));\n}\n\n.tile {\n    position: absolute;\n    top: calc(\n        var(--y) *\n            (calc(var(--cell-size) / var(--cell-count) + var(--cell-gap) / var(--cell-count)))\n    );\n    left: calc(\n        var(--x) *\n            (calc(var(--cell-size) / var(--cell-count) + var(--cell-gap) / var(--cell-count)))\n    );\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: calc(var(--cell-size) / var(--cell-count));\n    height: calc(var(--cell-size) / var(--cell-count));\n    border-radius: calc(var(--border-radius) / var(--cell-count));\n    font-family: Arial, Helvetica, sans-serif;\n    font-size: calc(var(--font-size) / var(--cell-count));\n    font-weight: bold;\n    background-color: hsl(25, 60%, var(--bg-lightness));\n    color: hsl(20, 25%, var(--text-lightness));\n    animation: show 300ms ease-in-out;\n    transition: all 300ms ease-in-out;\n    will-change: transform;\n}\n\n@keyframes show {\n    0% {\n        opacity: 0;\n        transform: scale(0);\n    }\n}\n"],sourceRoot:""}]);const a=s},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);i&&s[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},840:(t,e,n)=>{var i;!function(r,o,s,a){"use strict";var c,l=["","webkit","Moz","MS","ms","o"],u=o.createElement("div"),h="function",p=Math.round,f=Math.abs,d=Date.now;function v(t,e,n){return setTimeout(E(t,n),e)}function m(t,e,n){return!!Array.isArray(t)&&(A(t,n[e],n),!0)}function A(t,e,n){var i;if(t)if(t.forEach)t.forEach(e,n);else if(t.length!==a)for(i=0;i<t.length;)e.call(n,t[i],i,t),i++;else for(i in t)t.hasOwnProperty(i)&&e.call(n,t[i],i,t)}function g(t,e,n){var i="DEPRECATED METHOD: "+e+"\n"+n+" AT \n";return function(){var e=new Error("get-stack-trace"),n=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=r.console&&(r.console.warn||r.console.log);return o&&o.call(r.console,i,n),t.apply(this,arguments)}}c="function"!=typeof Object.assign?function(t){if(t===a||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var i=arguments[n];if(i!==a&&null!==i)for(var r in i)i.hasOwnProperty(r)&&(e[r]=i[r])}return e}:Object.assign;var y=g((function(t,e,n){for(var i=Object.keys(e),r=0;r<i.length;)(!n||n&&t[i[r]]===a)&&(t[i[r]]=e[i[r]]),r++;return t}),"extend","Use `assign`."),T=g((function(t,e){return y(t,e,!0)}),"merge","Use `assign`.");function C(t,e,n){var i,r=e.prototype;(i=t.prototype=Object.create(r)).constructor=t,i._super=r,n&&c(i,n)}function E(t,e){return function(){return t.apply(e,arguments)}}function b(t,e){return typeof t==h?t.apply(e&&e[0]||a,e):t}function w(t,e){return t===a?e:t}function x(t,e,n){A(S(e),(function(e){t.addEventListener(e,n,!1)}))}function k(t,e,n){A(S(e),(function(e){t.removeEventListener(e,n,!1)}))}function I(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function M(t,e){return t.indexOf(e)>-1}function S(t){return t.trim().split(/\s+/g)}function R(t,e,n){if(t.indexOf&&!n)return t.indexOf(e);for(var i=0;i<t.length;){if(n&&t[i][n]==e||!n&&t[i]===e)return i;i++}return-1}function P(t){return Array.prototype.slice.call(t,0)}function z(t,e,n){for(var i=[],r=[],o=0;o<t.length;){var s=e?t[o][e]:t[o];R(r,s)<0&&i.push(t[o]),r[o]=s,o++}return n&&(i=e?i.sort((function(t,n){return t[e]>n[e]})):i.sort()),i}function F(t,e){for(var n,i,r=e[0].toUpperCase()+e.slice(1),o=0;o<l.length;){if((i=(n=l[o])?n+r:e)in t)return i;o++}return a}var D=1;function _(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||r}var B="ontouchstart"in r,O=F(r,"PointerEvent")!==a,N=B&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),Y="touch",G="mouse",X=25,L=1,q=4,j=8,H=1,W=2,U=4,V=8,Z=16,J=W|U,K=V|Z,Q=J|K,$=["x","y"],tt=["clientX","clientY"];function et(t,e){var n=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){b(t.options.enable,[t])&&n.handler(e)},this.init()}function nt(t,e,n){var i=n.pointers.length,r=n.changedPointers.length,o=e&L&&i-r==0,s=e&(q|j)&&i-r==0;n.isFirst=!!o,n.isFinal=!!s,o&&(t.session={}),n.eventType=e,function(t,e){var n=t.session,i=e.pointers,r=i.length;n.firstInput||(n.firstInput=it(e)),r>1&&!n.firstMultiple?n.firstMultiple=it(e):1===r&&(n.firstMultiple=!1);var o=n.firstInput,s=n.firstMultiple,c=s?s.center:o.center,l=e.center=rt(i);e.timeStamp=d(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=ct(c,l),e.distance=at(c,l),function(t,e){var n=e.center,i=t.offsetDelta||{},r=t.prevDelta||{},o=t.prevInput||{};e.eventType!==L&&o.eventType!==q||(r=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},i=t.offsetDelta={x:n.x,y:n.y}),e.deltaX=r.x+(n.x-i.x),e.deltaY=r.y+(n.y-i.y)}(n,e),e.offsetDirection=st(e.deltaX,e.deltaY);var u,h,p=ot(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=p.x,e.overallVelocityY=p.y,e.overallVelocity=f(p.x)>f(p.y)?p.x:p.y,e.scale=s?(u=s.pointers,at((h=i)[0],h[1],tt)/at(u[0],u[1],tt)):1,e.rotation=s?function(t,e){return ct(e[1],e[0],tt)+ct(t[1],t[0],tt)}(s.pointers,i):0,e.maxPointers=n.prevInput?e.pointers.length>n.prevInput.maxPointers?e.pointers.length:n.prevInput.maxPointers:e.pointers.length,function(t,e){var n,i,r,o,s=t.lastInterval||e,c=e.timeStamp-s.timeStamp;if(e.eventType!=j&&(c>X||s.velocity===a)){var l=e.deltaX-s.deltaX,u=e.deltaY-s.deltaY,h=ot(c,l,u);i=h.x,r=h.y,n=f(h.x)>f(h.y)?h.x:h.y,o=st(l,u),t.lastInterval=e}else n=s.velocity,i=s.velocityX,r=s.velocityY,o=s.direction;e.velocity=n,e.velocityX=i,e.velocityY=r,e.direction=o}(n,e);var v=t.element;I(e.srcEvent.target,v)&&(v=e.srcEvent.target),e.target=v}(t,n),t.emit("hammer.input",n),t.recognize(n),t.session.prevInput=n}function it(t){for(var e=[],n=0;n<t.pointers.length;)e[n]={clientX:p(t.pointers[n].clientX),clientY:p(t.pointers[n].clientY)},n++;return{timeStamp:d(),pointers:e,center:rt(e),deltaX:t.deltaX,deltaY:t.deltaY}}function rt(t){var e=t.length;if(1===e)return{x:p(t[0].clientX),y:p(t[0].clientY)};for(var n=0,i=0,r=0;r<e;)n+=t[r].clientX,i+=t[r].clientY,r++;return{x:p(n/e),y:p(i/e)}}function ot(t,e,n){return{x:e/t||0,y:n/t||0}}function st(t,e){return t===e?H:f(t)>=f(e)?t<0?W:U:e<0?V:Z}function at(t,e,n){n||(n=$);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return Math.sqrt(i*i+r*r)}function ct(t,e,n){n||(n=$);var i=e[n[0]]-t[n[0]],r=e[n[1]]-t[n[1]];return 180*Math.atan2(r,i)/Math.PI}et.prototype={handler:function(){},init:function(){this.evEl&&x(this.element,this.evEl,this.domHandler),this.evTarget&&x(this.target,this.evTarget,this.domHandler),this.evWin&&x(_(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&k(this.element,this.evEl,this.domHandler),this.evTarget&&k(this.target,this.evTarget,this.domHandler),this.evWin&&k(_(this.element),this.evWin,this.domHandler)}};var lt={mousedown:L,mousemove:2,mouseup:q},ut="mousedown",ht="mousemove mouseup";function pt(){this.evEl=ut,this.evWin=ht,this.pressed=!1,et.apply(this,arguments)}C(pt,et,{handler:function(t){var e=lt[t.type];e&L&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=q),this.pressed&&(e&q&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:G,srcEvent:t}))}});var ft={pointerdown:L,pointermove:2,pointerup:q,pointercancel:j,pointerout:j},dt={2:Y,3:"pen",4:G,5:"kinect"},vt="pointerdown",mt="pointermove pointerup pointercancel";function At(){this.evEl=vt,this.evWin=mt,et.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}r.MSPointerEvent&&!r.PointerEvent&&(vt="MSPointerDown",mt="MSPointerMove MSPointerUp MSPointerCancel"),C(At,et,{handler:function(t){var e=this.store,n=!1,i=t.type.toLowerCase().replace("ms",""),r=ft[i],o=dt[t.pointerType]||t.pointerType,s=o==Y,a=R(e,t.pointerId,"pointerId");r&L&&(0===t.button||s)?a<0&&(e.push(t),a=e.length-1):r&(q|j)&&(n=!0),a<0||(e[a]=t,this.callback(this.manager,r,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),n&&e.splice(a,1))}});var gt={touchstart:L,touchmove:2,touchend:q,touchcancel:j};function yt(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,et.apply(this,arguments)}function Tt(t,e){var n=P(t.touches),i=P(t.changedTouches);return e&(q|j)&&(n=z(n.concat(i),"identifier",!0)),[n,i]}C(yt,et,{handler:function(t){var e=gt[t.type];if(e===L&&(this.started=!0),this.started){var n=Tt.call(this,t,e);e&(q|j)&&n[0].length-n[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Y,srcEvent:t})}}});var Ct={touchstart:L,touchmove:2,touchend:q,touchcancel:j},Et="touchstart touchmove touchend touchcancel";function bt(){this.evTarget=Et,this.targetIds={},et.apply(this,arguments)}function wt(t,e){var n=P(t.touches),i=this.targetIds;if(e&(2|L)&&1===n.length)return i[n[0].identifier]=!0,[n,n];var r,o,s=P(t.changedTouches),a=[],c=this.target;if(o=n.filter((function(t){return I(t.target,c)})),e===L)for(r=0;r<o.length;)i[o[r].identifier]=!0,r++;for(r=0;r<s.length;)i[s[r].identifier]&&a.push(s[r]),e&(q|j)&&delete i[s[r].identifier],r++;return a.length?[z(o.concat(a),"identifier",!0),a]:void 0}C(bt,et,{handler:function(t){var e=Ct[t.type],n=wt.call(this,t,e);n&&this.callback(this.manager,e,{pointers:n[0],changedPointers:n[1],pointerType:Y,srcEvent:t})}});var xt=2500;function kt(){et.apply(this,arguments);var t=E(this.handler,this);this.touch=new bt(this.manager,t),this.mouse=new pt(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function It(t,e){t&L?(this.primaryTouch=e.changedPointers[0].identifier,Mt.call(this,e)):t&(q|j)&&Mt.call(this,e)}function Mt(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var n={x:e.clientX,y:e.clientY};this.lastTouches.push(n);var i=this.lastTouches;setTimeout((function(){var t=i.indexOf(n);t>-1&&i.splice(t,1)}),xt)}}function St(t){for(var e=t.srcEvent.clientX,n=t.srcEvent.clientY,i=0;i<this.lastTouches.length;i++){var r=this.lastTouches[i],o=Math.abs(e-r.x),s=Math.abs(n-r.y);if(o<=25&&s<=25)return!0}return!1}C(kt,et,{handler:function(t,e,n){var i=n.pointerType==Y,r=n.pointerType==G;if(!(r&&n.sourceCapabilities&&n.sourceCapabilities.firesTouchEvents)){if(i)It.call(this,e,n);else if(r&&St.call(this,n))return;this.callback(t,e,n)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Rt=F(u.style,"touchAction"),Pt=Rt!==a,zt="compute",Ft="auto",Dt="manipulation",_t="none",Bt="pan-x",Ot="pan-y",Nt=function(){if(!Pt)return!1;var t={},e=r.CSS&&r.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){t[n]=!e||r.CSS.supports("touch-action",n)})),t}();function Yt(t,e){this.manager=t,this.set(e)}Yt.prototype={set:function(t){t==zt&&(t=this.compute()),Pt&&this.manager.element.style&&Nt[t]&&(this.manager.element.style[Rt]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return A(this.manager.recognizers,(function(e){b(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(M(t,_t))return _t;var e=M(t,Bt),n=M(t,Ot);return e&&n?_t:e||n?e?Bt:Ot:M(t,Dt)?Dt:Ft}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,n=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var i=this.actions,r=M(i,_t)&&!Nt[_t],o=M(i,Ot)&&!Nt[Ot],s=M(i,Bt)&&!Nt[Bt];if(r){var a=1===t.pointers.length,c=t.distance<2,l=t.deltaTime<250;if(a&&c&&l)return}if(!s||!o)return r||o&&n&J||s&&n&K?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var Gt=1,Xt=32;function Lt(t){this.options=c({},this.defaults,t||{}),this.id=D++,this.manager=null,this.options.enable=w(this.options.enable,!0),this.state=Gt,this.simultaneous={},this.requireFail=[]}function qt(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}function jt(t){return t==Z?"down":t==V?"up":t==W?"left":t==U?"right":""}function Ht(t,e){var n=e.manager;return n?n.get(t):t}function Wt(){Lt.apply(this,arguments)}function Ut(){Wt.apply(this,arguments),this.pX=null,this.pY=null}function Vt(){Wt.apply(this,arguments)}function Zt(){Lt.apply(this,arguments),this._timer=null,this._input=null}function Jt(){Wt.apply(this,arguments)}function Kt(){Wt.apply(this,arguments)}function Qt(){Lt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function $t(t,e){return(e=e||{}).recognizers=w(e.recognizers,$t.defaults.preset),new te(t,e)}function te(t,e){this.options=c({},$t.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new(this.options.inputClass||(O?At:N?bt:B?kt:pt))(this,nt),this.touchAction=new Yt(this,this.options.touchAction),ee(this,!0),A(this.options.recognizers,(function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}function ee(t,e){var n,i=t.element;i.style&&(A(t.options.cssProps,(function(r,o){n=F(i.style,o),e?(t.oldCssProps[n]=i.style[n],i.style[n]=r):i.style[n]=t.oldCssProps[n]||""})),e||(t.oldCssProps={}))}Lt.prototype={defaults:{},set:function(t){return c(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(m(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Ht(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return m(t,"dropRecognizeWith",this)||(t=Ht(t,this),delete this.simultaneous[t.id]),this},requireFailure:function(t){if(m(t,"requireFailure",this))return this;var e=this.requireFail;return-1===R(e,t=Ht(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(m(t,"dropRequireFailure",this))return this;t=Ht(t,this);var e=R(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,n=this.state;function i(n){e.manager.emit(n,t)}n<8&&i(e.options.event+qt(n)),i(e.options.event),t.additionalEvent&&i(t.additionalEvent),n>=8&&i(e.options.event+qt(n))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=Xt},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(Xt|Gt)))return!1;t++}return!0},recognize:function(t){var e=c({},t);if(!b(this.options.enable,[this,e]))return this.reset(),void(this.state=Xt);56&this.state&&(this.state=Gt),this.state=this.process(e),30&this.state&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},C(Wt,Lt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,n=t.eventType,i=6&e,r=this.attrTest(t);return i&&(n&j||!r)?16|e:i||r?n&q?8|e:2&e?4|e:2:Xt}}),C(Ut,Wt,{defaults:{event:"pan",threshold:10,pointers:1,direction:Q},getTouchAction:function(){var t=this.options.direction,e=[];return t&J&&e.push(Ot),t&K&&e.push(Bt),e},directionTest:function(t){var e=this.options,n=!0,i=t.distance,r=t.direction,o=t.deltaX,s=t.deltaY;return r&e.direction||(e.direction&J?(r=0===o?H:o<0?W:U,n=o!=this.pX,i=Math.abs(t.deltaX)):(r=0===s?H:s<0?V:Z,n=s!=this.pY,i=Math.abs(t.deltaY))),t.direction=r,n&&i>e.threshold&&r&e.direction},attrTest:function(t){return Wt.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=jt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),C(Vt,Wt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[_t]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||2&this.state)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),C(Zt,Lt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Ft]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime>e.time;if(this._input=t,!i||!n||t.eventType&(q|j)&&!r)this.reset();else if(t.eventType&L)this.reset(),this._timer=v((function(){this.state=8,this.tryEmit()}),e.time,this);else if(t.eventType&q)return 8;return Xt},reset:function(){clearTimeout(this._timer)},emit:function(t){8===this.state&&(t&&t.eventType&q?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=d(),this.manager.emit(this.options.event,this._input)))}}),C(Jt,Wt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[_t]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||2&this.state)}}),C(Kt,Wt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:J|K,pointers:1},getTouchAction:function(){return Ut.prototype.getTouchAction.call(this)},attrTest:function(t){var e,n=this.options.direction;return n&(J|K)?e=t.overallVelocity:n&J?e=t.overallVelocityX:n&K&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&n&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&f(e)>this.options.velocity&&t.eventType&q},emit:function(t){var e=jt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),C(Qt,Lt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Dt]},process:function(t){var e=this.options,n=t.pointers.length===e.pointers,i=t.distance<e.threshold,r=t.deltaTime<e.time;if(this.reset(),t.eventType&L&&0===this.count)return this.failTimeout();if(i&&r&&n){if(t.eventType!=q)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,s=!this.pCenter||at(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,s&&o?this.count+=1:this.count=1,this._input=t,0==this.count%e.taps)return this.hasRequireFailures()?(this._timer=v((function(){this.state=8,this.tryEmit()}),e.interval,this),2):8}return Xt},failTimeout:function(){return this._timer=v((function(){this.state=Xt}),this.options.interval,this),Xt},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),$t.VERSION="2.0.7",$t.defaults={domEvents:!1,touchAction:zt,enable:!0,inputTarget:null,inputClass:null,preset:[[Jt,{enable:!1}],[Vt,{enable:!1},["rotate"]],[Kt,{direction:J}],[Ut,{direction:J},["swipe"]],[Qt],[Qt,{event:"doubletap",taps:2},["tap"]],[Zt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}},te.prototype={set:function(t){return c(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var n;this.touchAction.preventDefaults(t);var i=this.recognizers,r=e.curRecognizer;(!r||r&&8&r.state)&&(r=e.curRecognizer=null);for(var o=0;o<i.length;)n=i[o],2===e.stopped||r&&n!=r&&!n.canRecognizeWith(r)?n.reset():n.recognize(t),!r&&14&n.state&&(r=e.curRecognizer=n),o++}},get:function(t){if(t instanceof Lt)return t;for(var e=this.recognizers,n=0;n<e.length;n++)if(e[n].options.event==t)return e[n];return null},add:function(t){if(m(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(m(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,n=R(e,t);-1!==n&&(e.splice(n,1),this.touchAction.update())}return this},on:function(t,e){if(t!==a&&e!==a){var n=this.handlers;return A(S(t),(function(t){n[t]=n[t]||[],n[t].push(e)})),this}},off:function(t,e){if(t!==a){var n=this.handlers;return A(S(t),(function(t){e?n[t]&&n[t].splice(R(n[t],e),1):delete n[t]})),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var n=o.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var i=0;i<n.length;)n[i](e),i++}},destroy:function(){this.element&&ee(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},c($t,{INPUT_START:L,INPUT_MOVE:2,INPUT_END:q,INPUT_CANCEL:j,STATE_POSSIBLE:Gt,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:Xt,DIRECTION_NONE:H,DIRECTION_LEFT:W,DIRECTION_RIGHT:U,DIRECTION_UP:V,DIRECTION_DOWN:Z,DIRECTION_HORIZONTAL:J,DIRECTION_VERTICAL:K,DIRECTION_ALL:Q,Manager:te,Input:et,TouchAction:Yt,TouchInput:bt,MouseInput:pt,PointerEventInput:At,TouchMouseInput:kt,SingleTouchInput:yt,Recognizer:Lt,AttrRecognizer:Wt,Tap:Qt,Pan:Ut,Swipe:Kt,Pinch:Vt,Rotate:Jt,Press:Zt,on:x,off:k,each:A,merge:T,extend:y,assign:c,inherit:C,bindFn:E,prefixed:F}),(void 0!==r?r:"undefined"!=typeof self?self:{}).Hammer=$t,(i=function(){return $t}.call(e,n,e,t))===a||(t.exports=i)}(window,document)},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},s=[],a=0;a<t.length;a++){var c=t[a],l=i.base?c[0]+i.base:c[0],u=o[l]||0,h="".concat(l," ").concat(u);o[l]=u+1;var p=n(h),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var d=r(f,i);i.byIndex=a,e.splice(a,0,{identifier:h,updater:d,references:1})}s.push(h)}return s}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=n(o[s]);e[a].references--}for(var c=i(t,r),l=0;l<o.length;l++){var u=n(o[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=c}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{"use strict";var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),s=n.n(o),a=n(565),c=n.n(a),l=n(216),u=n.n(l),h=n(589),p=n.n(h),f=n(315),d={};d.styleTagTransform=p(),d.setAttributes=c(),d.insert=s().bind(null,"head"),d.domAPI=r(),d.insertStyleElement=u(),e()(f.Z,d),f.Z&&f.Z.locals&&f.Z.locals;var v=function(){function t(t,e,n){this.linkedTile=null,this.linkedTileForMerge=null;var i=document.createElement("div");i.classList.add("cell"),t.append(i),this.x=e,this.y=n}return t.prototype.linkTile=function(t){t.setXY(this.x,this.y),this.linkedTile=t},t.prototype.isEmpty=function(){return!this.linkedTile},t.prototype.unlinkTile=function(){this.linkedTile=null},t.prototype.unlinkTileForMerge=function(){this.linkedTileForMerge=null},t.prototype.linkTileForMerge=function(t){t.setXY(this.x,this.y),this.linkedTileForMerge=t},t.prototype.hasTileForMerge=function(){return!!this.linkedTileForMerge},t.prototype.canAccept=function(t){var e;return this.isEmpty()||!this.hasTileForMerge()&&(null===(e=this.linkedTile)||void 0===e?void 0:e.value)===t.value},t.prototype.mergeTiles=function(){var t,e,n;null===(t=this.linkedTile)||void 0===t||t.setValue(this.linkedTile.value+Number(null===(e=this.linkedTileForMerge)||void 0===e?void 0:e.value)),null===(n=this.linkedTileForMerge)||void 0===n||n.removeFromDom(),this.unlinkTileForMerge()},t}(),m=function(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||Array.prototype.slice.call(e))},A=function(){function t(t,e){t.style.setProperty("--cell-count",e.toString()),this.cells=[];for(var n=0;n<Math.pow(e,2);n++)this.cells.push(new v(t,n%e,Math.floor(n/e)));this.cellsGroupedByColumn=this.cellsGroupeByColumn(),console.log("this.cellsGroupedByColumn:",this.cellsGroupedByColumn),this.cellsGroupedByReversedColumn=this.cellsGroupedByColumn.map((function(t){return m([],t,!0).reverse()})),this.cellsGroupedByRow=this.cellsGroupeByRow(),this.cellsGroupedByReversedRow=this.cellsGroupedByRow.map((function(t){return m([],t,!0).reverse()}))}return t.prototype.getRandomEmptyCell=function(){var t=this.cells.filter((function(t){return t.isEmpty()}));return t[Math.floor(Math.random()*t.length)]},t.prototype.cellsGroupeByColumn=function(){return this.cells.reduce((function(t,e){return t[e.x]=t[e.x]||[],t[e.x][e.y]=e,t}),[])},t.prototype.cellsGroupeByRow=function(){return this.cells.reduce((function(t,e){return t[e.y]=t[e.y]||[],t[e.y][e.x]=e,t}),[])},t}(),g=function(){function t(t){this.value=0,this.x=0,this.y=0,this.tileElement=document.createElement("div"),this.tileElement.classList.add("tile"),this.setValue(Math.random()>.5?2:4),t.append(this.tileElement)}return t.prototype.setXY=function(t,e){this.x=t,this.y=e,this.tileElement.style.setProperty("--x",t.toString()),this.tileElement.style.setProperty("--y",e.toString())},t.prototype.setValue=function(t){this.value=t,this.tileElement.textContent=t.toString();var e=100-9*Math.log2(t);this.tileElement.style.setProperty("--bg-lightness","".concat(e,"%")),this.tileElement.style.setProperty("--text-lightness","".concat(e<50?90:10,"%"))},t.prototype.removeFromDom=function(){this.tileElement.remove()},t.prototype.waitForTransitionEnd=function(){var t=this;return new Promise((function(e){t.tileElement.addEventListener("transitionend",e,{once:!0})}))},t.prototype.waitForAnimationEnd=function(){var t=this;return new Promise((function(e){t.tileElement.addEventListener("animationend",e,{once:!0})}))},t}(),y=n(840),T=n.n(y),C=function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{c(i.next(t))}catch(t){o(t)}}function a(t){try{c(i.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((i=i.apply(t,e||[])).next())}))},E=function(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(n=1,i&&(r=2&a[0]?i.return:a[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,a[1])).done)return r;switch(i=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,i=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){s.label=a[1];break}if(6===a[0]&&s.label<r[1]){s.label=r[1],r=a;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(a);break}r[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],i=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},b=document.getElementById("game-board"),w=document.querySelector("body"),x=new(T())(w);function k(){window.addEventListener("keydown",S,{once:!0})}x.get("swipe").set({direction:T().DIRECTION_ALL,threshold:5}),x.on("swipe",S),k();var I=!1,M=new A(b,4);function S(t){return C(this,void 0,void 0,(function(){var e;return E(this,(function(n){switch(n.label){case 0:if(I)return[2];switch(I=!0,t instanceof KeyboardEvent?t.key:t.direction){case"ArrowUp":case 8:return[3,1];case"ArrowDown":case 16:return[3,3];case"ArrowLeft":case 2:return[3,5];case"ArrowRight":case 4:return[3,7]}return[3,9];case 1:return _()?[4,R()]:(k(),I=!1,[2]);case 2:case 4:case 6:case 8:return n.sent(),[3,10];case 3:return B()?[4,P()]:(k(),I=!1,[2]);case 5:return O()?[4,z()]:(k(),I=!1,[2]);case 7:return N()?[4,F()]:(k(),I=!1,[2]);case 9:case 13:return k(),I=!1,[2];case 10:return e=new g(b),M.getRandomEmptyCell().linkTile(e),[4,e.waitForAnimationEnd()];case 11:return n.sent(),_()||B()||O()||N()?[3,13]:[4,e.waitForAnimationEnd()];case 12:return n.sent(),alert("Try again!"),[2]}}))}))}function R(){return C(this,void 0,void 0,(function(){return E(this,(function(t){switch(t.label){case 0:return[4,D(M.cellsGroupedByColumn)];case 1:return t.sent(),[2]}}))}))}function P(){return C(this,void 0,void 0,(function(){return E(this,(function(t){switch(t.label){case 0:return[4,D(M.cellsGroupedByReversedColumn)];case 1:return t.sent(),[2]}}))}))}function z(){return C(this,void 0,void 0,(function(){return E(this,(function(t){switch(t.label){case 0:return[4,D(M.cellsGroupedByRow)];case 1:return t.sent(),[2]}}))}))}function F(){return C(this,void 0,void 0,(function(){return E(this,(function(t){switch(t.label){case 0:return[4,D(M.cellsGroupedByReversedRow)];case 1:return t.sent(),[2]}}))}))}function D(t){return C(this,void 0,void 0,(function(){var e;return E(this,(function(n){switch(n.label){case 0:return e=[],t.forEach((function(t){return function(t,e){for(var n=1;n<t.length;n++)if(!t[n].isEmpty()){var i=t[n],r=void 0,o=n-1;if(i.linkedTile)for(;o>=0&&t[o].canAccept(i.linkedTile);)r=t[o],o--;r&&(i.linkedTile&&e.push(i.linkedTile.waitForTransitionEnd()),i.linkedTile&&(r.isEmpty()?r.linkTile(i.linkedTile):r.linkTileForMerge(i.linkedTile)),i.unlinkTile())}}(t,e)})),[4,Promise.all(e)];case 1:return n.sent(),M.cells.forEach((function(t){t.hasTileForMerge()&&t.mergeTiles()})),[2]}}))}))}function _(){return Y(M.cellsGroupedByColumn)}function B(){return Y(M.cellsGroupedByReversedColumn)}function O(){return Y(M.cellsGroupedByRow)}function N(){return Y(M.cellsGroupedByReversedRow)}function Y(t){return t.some((function(t){return function(t){return t.some((function(e,n){if(0===n)return!1;if(e.isEmpty())return!1;var i=t[n-1];return e.linkedTile?i.canAccept(e.linkedTile):void 0}))}(t)}))}M.getRandomEmptyCell().linkTile(new g(b)),M.getRandomEmptyCell().linkTile(new g(b))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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a0JBQ3hCLENBQ0EsU0FBUzBELElBQ0wsT0FBT1UsRUFBUWxCLEVBQUtoRCwwQkFDeEIsQ0FDQSxTQUFTa0UsRUFBUTVELEdBQ2IsT0FBT0EsRUFBYTZELE1BQUssU0FBVU4sR0FBUyxPQUVoRCxTQUF3QkEsR0FDcEIsT0FBT0EsRUFBTU0sTUFBSyxTQUFVMUcsRUFBTXpiLEdBQzlCLEdBQWMsSUFBVkEsRUFDQSxPQUFPLEVBRVgsR0FBSXliLEVBQUtNLFVBQ0wsT0FBTyxFQUVYLElBQUlnRyxFQUFhRixFQUFNN2hCLEVBQVEsR0FDL0IsT0FBSXliLEVBQUtGLFdBQ0V3RyxFQUFXM0YsVUFBVVgsRUFBS0YsaUJBRHJDLENBRUosR0FDSixDQWR1RDZHLENBQWVQLEVBQVEsR0FDOUUsQ0FsTUFiLEVBQUs5QyxxQkFBcUJ0QyxTQUFTLElBQUkyQyxFQUFLb0MsSUFDNUNLLEVBQUs5QyxxQkFBcUJ0QyxTQUFTLElBQUkyQyxFQUFLb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8yMDQ4Ly4vc3JjL3N0eWxlcy9zdHlsZS5zY3NzIiwid2VicGFjazovLzIwNDgvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLzIwNDgvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly8yMDQ4Ly4vbm9kZV9tb2R1bGVzL2hhbW1lcmpzL2hhbW1lci5qcyIsIndlYnBhY2s6Ly8yMDQ4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLzIwNDgvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovLzIwNDgvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vMjA0OC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly8yMDQ4Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vMjA0OC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovLzIwNDgvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vMjA0OC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly8yMDQ4L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8yMDQ4L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vMjA0OC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vMjA0OC8uL3NyYy9zdHlsZXMvc3R5bGUuc2Nzcz9lNWQ4Iiwid2VicGFjazovLzIwNDgvLi9zcmMvY2VsbC50cyIsIndlYnBhY2s6Ly8yMDQ4Ly4vc3JjL2dyaWQudHMiLCJ3ZWJwYWNrOi8vMjA0OC8uL3NyYy90aWxlLnRzIiwid2VicGFjazovLzIwNDgvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCp7Ym94LXNpemluZzpib3JkZXItYm94O21hcmdpbjowO3BhZGRpbmc6MH1ib2R5e2JhY2tncm91bmQtY29sb3I6IzMzMztkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OjEwMHN2aDtvdmVyZmxvdzpoaWRkZW59I2dhbWUtYm9hcmR7LS1jZWxsLXNpemU6IDgwdm1pbjstLWNlbGwtZ2FwOiA4dm1pbjstLWJvcmRlci1yYWRpdXM6IDR2bWluOy0tZm9udC1zaXplOiAzMHZtaW47cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQodmFyKC0tY2VsbC1jb3VudCksIGNhbGModmFyKC0tY2VsbC1zaXplKSAvIHZhcigtLWNlbGwtY291bnQpKSk7Z3JpZC10ZW1wbGF0ZS1yb3dzOnJlcGVhdCh2YXIoLS1jZWxsLWNvdW50KSwgY2FsYyh2YXIoLS1jZWxsLXNpemUpIC8gdmFyKC0tY2VsbC1jb3VudCkpKTtnYXA6Y2FsYyh2YXIoLS1jZWxsLWdhcCkvdmFyKC0tY2VsbC1jb3VudCkpO2JvcmRlci1yYWRpdXM6MXZtaW59LmNlbGx7YmFja2dyb3VuZC1jb2xvcjojNDQ0O2JvcmRlci1yYWRpdXM6Y2FsYyg0dm1pbi92YXIoLS1jZWxsLWNvdW50KSl9LnRpbGV7cG9zaXRpb246YWJzb2x1dGU7dG9wOmNhbGModmFyKC0teSkqKHZhcigtLWNlbGwtc2l6ZSkvdmFyKC0tY2VsbC1jb3VudCkgKyB2YXIoLS1jZWxsLWdhcCkvdmFyKC0tY2VsbC1jb3VudCkpKTtsZWZ0OmNhbGModmFyKC0teCkqKHZhcigtLWNlbGwtc2l6ZSkvdmFyKC0tY2VsbC1jb3VudCkgKyB2YXIoLS1jZWxsLWdhcCkvdmFyKC0tY2VsbC1jb3VudCkpKTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7d2lkdGg6Y2FsYyh2YXIoLS1jZWxsLXNpemUpL3ZhcigtLWNlbGwtY291bnQpKTtoZWlnaHQ6Y2FsYyh2YXIoLS1jZWxsLXNpemUpL3ZhcigtLWNlbGwtY291bnQpKTtib3JkZXItcmFkaXVzOmNhbGModmFyKC0tYm9yZGVyLXJhZGl1cykvdmFyKC0tY2VsbC1jb3VudCkpO2ZvbnQtZmFtaWx5OkFyaWFsLEhlbHZldGljYSxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTpjYWxjKHZhcigtLWZvbnQtc2l6ZSkvdmFyKC0tY2VsbC1jb3VudCkpO2ZvbnQtd2VpZ2h0OmJvbGQ7YmFja2dyb3VuZC1jb2xvcjpoc2woMjUsIDYwJSwgdmFyKC0tYmctbGlnaHRuZXNzKSk7Y29sb3I6aHNsKDIwLCAyNSUsIHZhcigtLXRleHQtbGlnaHRuZXNzKSk7YW5pbWF0aW9uOnNob3cgMzAwbXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjphbGwgMzAwbXMgZWFzZS1pbi1vdXQ7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfUBrZXlmcmFtZXMgc2hvd3swJXtvcGFjaXR5OjA7dHJhbnNmb3JtOnNjYWxlKDApfX1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvc3R5bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxFQUNJLHFCQUFBLENBQ0EsUUFBQSxDQUNBLFNBQUEsQ0FHSixLQUNJLHFCQUFBLENBQ0EsWUFBQSxDQUNBLHNCQUFBLENBQ0Esa0JBQUEsQ0FDQSxhQUFBLENBQ0EsZUFBQSxDQUdKLFlBQ0ksbUJBQUEsQ0FDQSxpQkFBQSxDQUNBLHNCQUFBLENBQ0EsbUJBQUEsQ0FDQSxpQkFBQSxDQUNBLFlBQUEsQ0FDQSwyRkFBQSxDQUNBLHdGQUFBLENBQ0EsMkNBQUEsQ0FDQSxtQkFBQSxDQUdKLE1BQ0kscUJBQUEsQ0FDQSwyQ0FBQSxDQUdKLE1BQ0ksaUJBQUEsQ0FDQSwyRkFBQSxDQUlBLDRGQUFBLENBSUEsWUFBQSxDQUNBLHNCQUFBLENBQ0Esa0JBQUEsQ0FDQSw4Q0FBQSxDQUNBLCtDQUFBLENBQ0EsMERBQUEsQ0FDQSxzQ0FBQSxDQUNBLGtEQUFBLENBQ0EsZ0JBQUEsQ0FDQSxrREFBQSxDQUNBLHlDQUFBLENBQ0EsZ0NBQUEsQ0FDQSxnQ0FBQSxDQUNBLHFCQUFBLENBR0osZ0JBQ0ksR0FDSSxTQUFBLENBQ0Esa0JBQUEsQ0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGhlaWdodDogMTAwc3ZoO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4jZ2FtZS1ib2FyZCB7XFxuICAgIC0tY2VsbC1zaXplOiA4MHZtaW47XFxuICAgIC0tY2VsbC1nYXA6IDh2bWluO1xcbiAgICAtLWJvcmRlci1yYWRpdXM6IDR2bWluO1xcbiAgICAtLWZvbnQtc2l6ZTogMzB2bWluO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KHZhcigtLWNlbGwtY291bnQpLCBjYWxjKHZhcigtLWNlbGwtc2l6ZSkgLyB2YXIoLS1jZWxsLWNvdW50KSkpO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCh2YXIoLS1jZWxsLWNvdW50KSwgY2FsYyh2YXIoLS1jZWxsLXNpemUpIC8gdmFyKC0tY2VsbC1jb3VudCkpKTtcXG4gICAgZ2FwOiBjYWxjKHZhcigtLWNlbGwtZ2FwKSAvIHZhcigtLWNlbGwtY291bnQpKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMXZtaW47XFxufVxcblxcbi5jZWxsIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzQ0NDtcXG4gICAgYm9yZGVyLXJhZGl1czogY2FsYyg0dm1pbiAvIHZhcigtLWNlbGwtY291bnQpKTtcXG59XFxuXFxuLnRpbGUge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogY2FsYyhcXG4gICAgICAgIHZhcigtLXkpICpcXG4gICAgICAgICAgICAoY2FsYyh2YXIoLS1jZWxsLXNpemUpIC8gdmFyKC0tY2VsbC1jb3VudCkgKyB2YXIoLS1jZWxsLWdhcCkgLyB2YXIoLS1jZWxsLWNvdW50KSkpXFxuICAgICk7XFxuICAgIGxlZnQ6IGNhbGMoXFxuICAgICAgICB2YXIoLS14KSAqXFxuICAgICAgICAgICAgKGNhbGModmFyKC0tY2VsbC1zaXplKSAvIHZhcigtLWNlbGwtY291bnQpICsgdmFyKC0tY2VsbC1nYXApIC8gdmFyKC0tY2VsbC1jb3VudCkpKVxcbiAgICApO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgd2lkdGg6IGNhbGModmFyKC0tY2VsbC1zaXplKSAvIHZhcigtLWNlbGwtY291bnQpKTtcXG4gICAgaGVpZ2h0OiBjYWxjKHZhcigtLWNlbGwtc2l6ZSkgLyB2YXIoLS1jZWxsLWNvdW50KSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IGNhbGModmFyKC0tYm9yZGVyLXJhZGl1cykgLyB2YXIoLS1jZWxsLWNvdW50KSk7XFxuICAgIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgICBmb250LXNpemU6IGNhbGModmFyKC0tZm9udC1zaXplKSAvIHZhcigtLWNlbGwtY291bnQpKTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgyNSwgNjAlLCB2YXIoLS1iZy1saWdodG5lc3MpKTtcXG4gICAgY29sb3I6IGhzbCgyMCwgMjUlLCB2YXIoLS10ZXh0LWxpZ2h0bmVzcykpO1xcbiAgICBhbmltYXRpb246IHNob3cgMzAwbXMgZWFzZS1pbi1vdXQ7XFxuICAgIHRyYW5zaXRpb246IGFsbCAzMDBtcyBlYXNlLWluLW91dDtcXG4gICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcXG59XFxuXFxuQGtleWZyYW1lcyBzaG93IHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKiEgSGFtbWVyLkpTIC0gdjIuMC43IC0gMjAxNi0wNC0yMlxuICogaHR0cDovL2hhbW1lcmpzLmdpdGh1Yi5pby9cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgSm9yaWsgVGFuZ2VsZGVyO1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlICovXG4oZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgZXhwb3J0TmFtZSwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxudmFyIFZFTkRPUl9QUkVGSVhFUyA9IFsnJywgJ3dlYmtpdCcsICdNb3onLCAnTVMnLCAnbXMnLCAnbyddO1xudmFyIFRFU1RfRUxFTUVOVCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG52YXIgVFlQRV9GVU5DVElPTiA9ICdmdW5jdGlvbic7XG5cbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgbm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogc2V0IGEgdGltZW91dCB3aXRoIGEgZ2l2ZW4gc2NvcGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZW91dFxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHNldFRpbWVvdXRDb250ZXh0KGZuLCB0aW1lb3V0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoYmluZEZuKGZuLCBjb250ZXh0KSwgdGltZW91dCk7XG59XG5cbi8qKlxuICogaWYgdGhlIGFyZ3VtZW50IGlzIGFuIGFycmF5LCB3ZSB3YW50IHRvIGV4ZWN1dGUgdGhlIGZuIG9uIGVhY2ggZW50cnlcbiAqIGlmIGl0IGFpbnQgYW4gYXJyYXkgd2UgZG9uJ3Qgd2FudCB0byBkbyBhIHRoaW5nLlxuICogdGhpcyBpcyB1c2VkIGJ5IGFsbCB0aGUgbWV0aG9kcyB0aGF0IGFjY2VwdCBhIHNpbmdsZSBhbmQgYXJyYXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp8QXJyYXl9IGFyZ1xuICogQHBhcmFtIHtTdHJpbmd9IGZuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaW52b2tlQXJyYXlBcmcoYXJnLCBmbiwgY29udGV4dCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgZWFjaChhcmcsIGNvbnRleHRbZm5dLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiB3YWxrIG9iamVjdHMgYW5kIGFycmF5c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciBpO1xuXG4gICAgaWYgKCFvYmopIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvYmouZm9yRWFjaCkge1xuICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgb2JqLmxlbmd0aCkge1xuICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICBvYmouaGFzT3duUHJvcGVydHkoaSkgJiYgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogd3JhcCBhIG1ldGhvZCB3aXRoIGEgZGVwcmVjYXRpb24gd2FybmluZyBhbmQgc3RhY2sgdHJhY2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgbmV3IGZ1bmN0aW9uIHdyYXBwaW5nIHRoZSBzdXBwbGllZCBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIGRlcHJlY2F0ZShtZXRob2QsIG5hbWUsIG1lc3NhZ2UpIHtcbiAgICB2YXIgZGVwcmVjYXRpb25NZXNzYWdlID0gJ0RFUFJFQ0FURUQgTUVUSE9EOiAnICsgbmFtZSArICdcXG4nICsgbWVzc2FnZSArICcgQVQgXFxuJztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdnZXQtc3RhY2stdHJhY2UnKTtcbiAgICAgICAgdmFyIHN0YWNrID0gZSAmJiBlLnN0YWNrID8gZS5zdGFjay5yZXBsYWNlKC9eW15cXChdKz9bXFxuJF0vZ20sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL15cXHMrYXRcXHMrL2dtLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eT2JqZWN0Ljxhbm9ueW1vdXM+XFxzKlxcKC9nbSwgJ3thbm9ueW1vdXN9KClAJykgOiAnVW5rbm93biBTdGFjayBUcmFjZSc7XG5cbiAgICAgICAgdmFyIGxvZyA9IHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS53YXJuIHx8IHdpbmRvdy5jb25zb2xlLmxvZyk7XG4gICAgICAgIGlmIChsb2cpIHtcbiAgICAgICAgICAgIGxvZy5jYWxsKHdpbmRvdy5jb25zb2xlLCBkZXByZWNhdGlvbk1lc3NhZ2UsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBleHRlbmQgb2JqZWN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIGluIGRlc3Qgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aGUgb25lcyBpbiBzcmMuXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0gey4uLk9iamVjdH0gb2JqZWN0c190b19hc3NpZ25cbiAqIEByZXR1cm5zIHtPYmplY3R9IHRhcmdldFxuICovXG52YXIgYXNzaWduO1xuaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtuZXh0S2V5XSA9IHNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59IGVsc2Uge1xuICAgIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG59XG5cbi8qKlxuICogZXh0ZW5kIG9iamVjdC5cbiAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyBpbiBkZXN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIG9uZXMgaW4gc3JjLlxuICogQHBhcmFtIHtPYmplY3R9IGRlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcmNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW21lcmdlPWZhbHNlXVxuICogQHJldHVybnMge09iamVjdH0gZGVzdFxuICovXG52YXIgZXh0ZW5kID0gZGVwcmVjYXRlKGZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMsIG1lcmdlKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICghbWVyZ2UgfHwgKG1lcmdlICYmIGRlc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGRlc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdDtcbn0sICdleHRlbmQnLCAnVXNlIGBhc3NpZ25gLicpO1xuXG4vKipcbiAqIG1lcmdlIHRoZSB2YWx1ZXMgZnJvbSBzcmMgaW4gdGhlIGRlc3QuXG4gKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgdGhhdCBleGlzdCBpbiBkZXN0IHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuIGJ5IHNyY1xuICogQHBhcmFtIHtPYmplY3R9IGRlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcmNcbiAqIEByZXR1cm5zIHtPYmplY3R9IGRlc3RcbiAqL1xudmFyIG1lcmdlID0gZGVwcmVjYXRlKGZ1bmN0aW9uIG1lcmdlKGRlc3QsIHNyYykge1xuICAgIHJldHVybiBleHRlbmQoZGVzdCwgc3JjLCB0cnVlKTtcbn0sICdtZXJnZScsICdVc2UgYGFzc2lnbmAuJyk7XG5cbi8qKlxuICogc2ltcGxlIGNsYXNzIGluaGVyaXRhbmNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGlsZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gYmFzZVxuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXVxuICovXG5mdW5jdGlvbiBpbmhlcml0KGNoaWxkLCBiYXNlLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIGJhc2VQID0gYmFzZS5wcm90b3R5cGUsXG4gICAgICAgIGNoaWxkUDtcblxuICAgIGNoaWxkUCA9IGNoaWxkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYmFzZVApO1xuICAgIGNoaWxkUC5jb25zdHJ1Y3RvciA9IGNoaWxkO1xuICAgIGNoaWxkUC5fc3VwZXIgPSBiYXNlUDtcblxuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGFzc2lnbihjaGlsZFAsIHByb3BlcnRpZXMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBzaW1wbGUgZnVuY3Rpb24gYmluZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGJpbmRGbihmbiwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBib3VuZEZuKCkge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIGxldCBhIGJvb2xlYW4gdmFsdWUgYWxzbyBiZSBhIGZ1bmN0aW9uIHRoYXQgbXVzdCByZXR1cm4gYSBib29sZWFuXG4gKiB0aGlzIGZpcnN0IGl0ZW0gaW4gYXJncyB3aWxsIGJlIHVzZWQgYXMgdGhlIGNvbnRleHRcbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gdmFsXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJnc11cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBib29sT3JGbih2YWwsIGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIHZhbCA9PSBUWVBFX0ZVTkNUSU9OKSB7XG4gICAgICAgIHJldHVybiB2YWwuYXBwbHkoYXJncyA/IGFyZ3NbMF0gfHwgdW5kZWZpbmVkIDogdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbn1cblxuLyoqXG4gKiB1c2UgdGhlIHZhbDIgd2hlbiB2YWwxIGlzIHVuZGVmaW5lZFxuICogQHBhcmFtIHsqfSB2YWwxXG4gKiBAcGFyYW0geyp9IHZhbDJcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBpZlVuZGVmaW5lZCh2YWwxLCB2YWwyKSB7XG4gICAgcmV0dXJuICh2YWwxID09PSB1bmRlZmluZWQpID8gdmFsMiA6IHZhbDE7XG59XG5cbi8qKlxuICogYWRkRXZlbnRMaXN0ZW5lciB3aXRoIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICovXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyh0YXJnZXQsIHR5cGVzLCBoYW5kbGVyKSB7XG4gICAgZWFjaChzcGxpdFN0cih0eXBlcyksIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIHJlbW92ZUV2ZW50TGlzdGVuZXIgd2l0aCBtdWx0aXBsZSBldmVudHMgYXQgb25jZVxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBmaW5kIGlmIGEgbm9kZSBpcyBpbiB0aGUgZ2l2ZW4gcGFyZW50XG4gKiBAbWV0aG9kIGhhc1BhcmVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufSBmb3VuZFxuICovXG5mdW5jdGlvbiBoYXNQYXJlbnQobm9kZSwgcGFyZW50KSB7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgPT0gcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogc21hbGwgaW5kZXhPZiB3cmFwcGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gZmluZFxuICogQHJldHVybnMge0Jvb2xlYW59IGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGluU3RyKHN0ciwgZmluZCkge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihmaW5kKSA+IC0xO1xufVxuXG4vKipcbiAqIHNwbGl0IHN0cmluZyBvbiB3aGl0ZXNwYWNlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7QXJyYXl9IHdvcmRzXG4gKi9cbmZ1bmN0aW9uIHNwbGl0U3RyKHN0cikge1xuICAgIHJldHVybiBzdHIudHJpbSgpLnNwbGl0KC9cXHMrL2cpO1xufVxuXG4vKipcbiAqIGZpbmQgaWYgYSBhcnJheSBjb250YWlucyB0aGUgb2JqZWN0IHVzaW5nIGluZGV4T2Ygb3IgYSBzaW1wbGUgcG9seUZpbGxcbiAqIEBwYXJhbSB7QXJyYXl9IHNyY1xuICogQHBhcmFtIHtTdHJpbmd9IGZpbmRcbiAqIEBwYXJhbSB7U3RyaW5nfSBbZmluZEJ5S2V5XVxuICogQHJldHVybiB7Qm9vbGVhbnxOdW1iZXJ9IGZhbHNlIHdoZW4gbm90IGZvdW5kLCBvciB0aGUgaW5kZXhcbiAqL1xuZnVuY3Rpb24gaW5BcnJheShzcmMsIGZpbmQsIGZpbmRCeUtleSkge1xuICAgIGlmIChzcmMuaW5kZXhPZiAmJiAhZmluZEJ5S2V5KSB7XG4gICAgICAgIHJldHVybiBzcmMuaW5kZXhPZihmaW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKChmaW5kQnlLZXkgJiYgc3JjW2ldW2ZpbmRCeUtleV0gPT0gZmluZCkgfHwgKCFmaW5kQnlLZXkgJiYgc3JjW2ldID09PSBmaW5kKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG59XG5cbi8qKlxuICogY29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gcmVhbCBhcnJheXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqLCAwKTtcbn1cblxuLyoqXG4gKiB1bmlxdWUgYXJyYXkgd2l0aCBvYmplY3RzIGJhc2VkIG9uIGEga2V5IChsaWtlICdpZCcpIG9yIGp1c3QgYnkgdGhlIGFycmF5J3MgdmFsdWVcbiAqIEBwYXJhbSB7QXJyYXl9IHNyYyBbe2lkOjF9LHtpZDoyfSx7aWQ6MX1dXG4gKiBAcGFyYW0ge1N0cmluZ30gW2tleV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NvcnQ9RmFsc2VdXG4gKiBAcmV0dXJucyB7QXJyYXl9IFt7aWQ6MX0se2lkOjJ9XVxuICovXG5mdW5jdGlvbiB1bmlxdWVBcnJheShzcmMsIGtleSwgc29ydCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsID0ga2V5ID8gc3JjW2ldW2tleV0gOiBzcmNbaV07XG4gICAgICAgIGlmIChpbkFycmF5KHZhbHVlcywgdmFsKSA8IDApIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChzcmNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlc1tpXSA9IHZhbDtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIGlmIChzb3J0KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zb3J0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zb3J0KGZ1bmN0aW9uIHNvcnRVbmlxdWVBcnJheShhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFba2V5XSA+IGJba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogZ2V0IHRoZSBwcmVmaXhlZCBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJucyB7U3RyaW5nfFVuZGVmaW5lZH0gcHJlZml4ZWRcbiAqL1xuZnVuY3Rpb24gcHJlZml4ZWQob2JqLCBwcm9wZXJ0eSkge1xuICAgIHZhciBwcmVmaXgsIHByb3A7XG4gICAgdmFyIGNhbWVsUHJvcCA9IHByb3BlcnR5WzBdLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IFZFTkRPUl9QUkVGSVhFUy5sZW5ndGgpIHtcbiAgICAgICAgcHJlZml4ID0gVkVORE9SX1BSRUZJWEVTW2ldO1xuICAgICAgICBwcm9wID0gKHByZWZpeCkgPyBwcmVmaXggKyBjYW1lbFByb3AgOiBwcm9wZXJ0eTtcblxuICAgICAgICBpZiAocHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBnZXQgYSB1bmlxdWUgaWRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHVuaXF1ZUlkXG4gKi9cbnZhciBfdW5pcXVlSWQgPSAxO1xuZnVuY3Rpb24gdW5pcXVlSWQoKSB7XG4gICAgcmV0dXJuIF91bmlxdWVJZCsrO1xufVxuXG4vKipcbiAqIGdldCB0aGUgd2luZG93IG9iamVjdCBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RG9jdW1lbnRWaWV3fFdpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93Rm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgdmFyIGRvYyA9IGVsZW1lbnQub3duZXJEb2N1bWVudCB8fCBlbGVtZW50O1xuICAgIHJldHVybiAoZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3cgfHwgd2luZG93KTtcbn1cblxudmFyIE1PQklMRV9SRUdFWCA9IC9tb2JpbGV8dGFibGV0fGlwKGFkfGhvbmV8b2QpfGFuZHJvaWQvaTtcblxudmFyIFNVUFBPUlRfVE9VQ0ggPSAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KTtcbnZhciBTVVBQT1JUX1BPSU5URVJfRVZFTlRTID0gcHJlZml4ZWQod2luZG93LCAnUG9pbnRlckV2ZW50JykgIT09IHVuZGVmaW5lZDtcbnZhciBTVVBQT1JUX09OTFlfVE9VQ0ggPSBTVVBQT1JUX1RPVUNIICYmIE1PQklMRV9SRUdFWC50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG52YXIgSU5QVVRfVFlQRV9UT1VDSCA9ICd0b3VjaCc7XG52YXIgSU5QVVRfVFlQRV9QRU4gPSAncGVuJztcbnZhciBJTlBVVF9UWVBFX01PVVNFID0gJ21vdXNlJztcbnZhciBJTlBVVF9UWVBFX0tJTkVDVCA9ICdraW5lY3QnO1xuXG52YXIgQ09NUFVURV9JTlRFUlZBTCA9IDI1O1xuXG52YXIgSU5QVVRfU1RBUlQgPSAxO1xudmFyIElOUFVUX01PVkUgPSAyO1xudmFyIElOUFVUX0VORCA9IDQ7XG52YXIgSU5QVVRfQ0FOQ0VMID0gODtcblxudmFyIERJUkVDVElPTl9OT05FID0gMTtcbnZhciBESVJFQ1RJT05fTEVGVCA9IDI7XG52YXIgRElSRUNUSU9OX1JJR0hUID0gNDtcbnZhciBESVJFQ1RJT05fVVAgPSA4O1xudmFyIERJUkVDVElPTl9ET1dOID0gMTY7XG5cbnZhciBESVJFQ1RJT05fSE9SSVpPTlRBTCA9IERJUkVDVElPTl9MRUZUIHwgRElSRUNUSU9OX1JJR0hUO1xudmFyIERJUkVDVElPTl9WRVJUSUNBTCA9IERJUkVDVElPTl9VUCB8IERJUkVDVElPTl9ET1dOO1xudmFyIERJUkVDVElPTl9BTEwgPSBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTDtcblxudmFyIFBST1BTX1hZID0gWyd4JywgJ3knXTtcbnZhciBQUk9QU19DTElFTlRfWFkgPSBbJ2NsaWVudFgnLCAnY2xpZW50WSddO1xuXG4vKipcbiAqIGNyZWF0ZSBuZXcgaW5wdXQgdHlwZSBtYW5hZ2VyXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7SW5wdXR9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSW5wdXQobWFuYWdlciwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5lbGVtZW50ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIHRoaXMudGFyZ2V0ID0gbWFuYWdlci5vcHRpb25zLmlucHV0VGFyZ2V0O1xuXG4gICAgLy8gc21hbGxlciB3cmFwcGVyIGFyb3VuZCB0aGUgaGFuZGxlciwgZm9yIHRoZSBzY29wZSBhbmQgdGhlIGVuYWJsZWQgc3RhdGUgb2YgdGhlIG1hbmFnZXIsXG4gICAgLy8gc28gd2hlbiBkaXNhYmxlZCB0aGUgaW5wdXQgZXZlbnRzIGFyZSBjb21wbGV0ZWx5IGJ5cGFzc2VkLlxuICAgIHRoaXMuZG9tSGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlmIChib29sT3JGbihtYW5hZ2VyLm9wdGlvbnMuZW5hYmxlLCBbbWFuYWdlcl0pKSB7XG4gICAgICAgICAgICBzZWxmLmhhbmRsZXIoZXYpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuaW5pdCgpO1xuXG59XG5cbklucHV0LnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzaG91bGQgaGFuZGxlIHRoZSBpbnB1dEV2ZW50IGRhdGEgYW5kIHRyaWdnZXIgdGhlIGNhbGxiYWNrXG4gICAgICogQHZpcnR1YWxcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHsgfSxcblxuICAgIC8qKlxuICAgICAqIGJpbmQgdGhlIGV2ZW50c1xuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmV2RWwgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZUYXJnZXQgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy50YXJnZXQsIHRoaXMuZXZUYXJnZXQsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZXaW4gJiYgYWRkRXZlbnRMaXN0ZW5lcnMoZ2V0V2luZG93Rm9yRWxlbWVudCh0aGlzLmVsZW1lbnQpLCB0aGlzLmV2V2luLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1bmJpbmQgdGhlIGV2ZW50c1xuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmV2RWwgJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZUYXJnZXQgJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy50YXJnZXQsIHRoaXMuZXZUYXJnZXQsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZXaW4gJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoZ2V0V2luZG93Rm9yRWxlbWVudCh0aGlzLmVsZW1lbnQpLCB0aGlzLmV2V2luLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgIH1cbn07XG5cbi8qKlxuICogY3JlYXRlIG5ldyBpbnB1dCB0eXBlIG1hbmFnZXJcbiAqIGNhbGxlZCBieSB0aGUgTWFuYWdlciBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtIYW1tZXJ9IG1hbmFnZXJcbiAqIEByZXR1cm5zIHtJbnB1dH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRJbnN0YW5jZShtYW5hZ2VyKSB7XG4gICAgdmFyIFR5cGU7XG4gICAgdmFyIGlucHV0Q2xhc3MgPSBtYW5hZ2VyLm9wdGlvbnMuaW5wdXRDbGFzcztcblxuICAgIGlmIChpbnB1dENsYXNzKSB7XG4gICAgICAgIFR5cGUgPSBpbnB1dENsYXNzO1xuICAgIH0gZWxzZSBpZiAoU1VQUE9SVF9QT0lOVEVSX0VWRU5UUykge1xuICAgICAgICBUeXBlID0gUG9pbnRlckV2ZW50SW5wdXQ7XG4gICAgfSBlbHNlIGlmIChTVVBQT1JUX09OTFlfVE9VQ0gpIHtcbiAgICAgICAgVHlwZSA9IFRvdWNoSW5wdXQ7XG4gICAgfSBlbHNlIGlmICghU1VQUE9SVF9UT1VDSCkge1xuICAgICAgICBUeXBlID0gTW91c2VJbnB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBUeXBlID0gVG91Y2hNb3VzZUlucHV0O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IChUeXBlKShtYW5hZ2VyLCBpbnB1dEhhbmRsZXIpO1xufVxuXG4vKipcbiAqIGhhbmRsZSBpbnB1dCBldmVudHNcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZVxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGlucHV0SGFuZGxlcihtYW5hZ2VyLCBldmVudFR5cGUsIGlucHV0KSB7XG4gICAgdmFyIHBvaW50ZXJzTGVuID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoO1xuICAgIHZhciBjaGFuZ2VkUG9pbnRlcnNMZW4gPSBpbnB1dC5jaGFuZ2VkUG9pbnRlcnMubGVuZ3RoO1xuICAgIHZhciBpc0ZpcnN0ID0gKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIChwb2ludGVyc0xlbiAtIGNoYW5nZWRQb2ludGVyc0xlbiA9PT0gMCkpO1xuICAgIHZhciBpc0ZpbmFsID0gKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmIChwb2ludGVyc0xlbiAtIGNoYW5nZWRQb2ludGVyc0xlbiA9PT0gMCkpO1xuXG4gICAgaW5wdXQuaXNGaXJzdCA9ICEhaXNGaXJzdDtcbiAgICBpbnB1dC5pc0ZpbmFsID0gISFpc0ZpbmFsO1xuXG4gICAgaWYgKGlzRmlyc3QpIHtcbiAgICAgICAgbWFuYWdlci5zZXNzaW9uID0ge307XG4gICAgfVxuXG4gICAgLy8gc291cmNlIGV2ZW50IGlzIHRoZSBub3JtYWxpemVkIHZhbHVlIG9mIHRoZSBkb21FdmVudHNcbiAgICAvLyBsaWtlICd0b3VjaHN0YXJ0LCBtb3VzZXVwLCBwb2ludGVyZG93bidcbiAgICBpbnB1dC5ldmVudFR5cGUgPSBldmVudFR5cGU7XG5cbiAgICAvLyBjb21wdXRlIHNjYWxlLCByb3RhdGlvbiBldGNcbiAgICBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KTtcblxuICAgIC8vIGVtaXQgc2VjcmV0IGV2ZW50XG4gICAgbWFuYWdlci5lbWl0KCdoYW1tZXIuaW5wdXQnLCBpbnB1dCk7XG5cbiAgICBtYW5hZ2VyLnJlY29nbml6ZShpbnB1dCk7XG4gICAgbWFuYWdlci5zZXNzaW9uLnByZXZJbnB1dCA9IGlucHV0O1xufVxuXG4vKipcbiAqIGV4dGVuZCB0aGUgZGF0YSB3aXRoIHNvbWUgdXNhYmxlIHByb3BlcnRpZXMgbGlrZSBzY2FsZSwgcm90YXRlLCB2ZWxvY2l0eSBldGNcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYW5hZ2VyXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUlucHV0RGF0YShtYW5hZ2VyLCBpbnB1dCkge1xuICAgIHZhciBzZXNzaW9uID0gbWFuYWdlci5zZXNzaW9uO1xuICAgIHZhciBwb2ludGVycyA9IGlucHV0LnBvaW50ZXJzO1xuICAgIHZhciBwb2ludGVyc0xlbmd0aCA9IHBvaW50ZXJzLmxlbmd0aDtcblxuICAgIC8vIHN0b3JlIHRoZSBmaXJzdCBpbnB1dCB0byBjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGFuZCBkaXJlY3Rpb25cbiAgICBpZiAoIXNlc3Npb24uZmlyc3RJbnB1dCkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0SW5wdXQgPSBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCk7XG4gICAgfVxuXG4gICAgLy8gdG8gY29tcHV0ZSBzY2FsZSBhbmQgcm90YXRpb24gd2UgbmVlZCB0byBzdG9yZSB0aGUgbXVsdGlwbGUgdG91Y2hlc1xuICAgIGlmIChwb2ludGVyc0xlbmd0aCA+IDEgJiYgIXNlc3Npb24uZmlyc3RNdWx0aXBsZSkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0TXVsdGlwbGUgPSBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCk7XG4gICAgfSBlbHNlIGlmIChwb2ludGVyc0xlbmd0aCA9PT0gMSkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0TXVsdGlwbGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RJbnB1dCA9IHNlc3Npb24uZmlyc3RJbnB1dDtcbiAgICB2YXIgZmlyc3RNdWx0aXBsZSA9IHNlc3Npb24uZmlyc3RNdWx0aXBsZTtcbiAgICB2YXIgb2Zmc2V0Q2VudGVyID0gZmlyc3RNdWx0aXBsZSA/IGZpcnN0TXVsdGlwbGUuY2VudGVyIDogZmlyc3RJbnB1dC5jZW50ZXI7XG5cbiAgICB2YXIgY2VudGVyID0gaW5wdXQuY2VudGVyID0gZ2V0Q2VudGVyKHBvaW50ZXJzKTtcbiAgICBpbnB1dC50aW1lU3RhbXAgPSBub3coKTtcbiAgICBpbnB1dC5kZWx0YVRpbWUgPSBpbnB1dC50aW1lU3RhbXAgLSBmaXJzdElucHV0LnRpbWVTdGFtcDtcblxuICAgIGlucHV0LmFuZ2xlID0gZ2V0QW5nbGUob2Zmc2V0Q2VudGVyLCBjZW50ZXIpO1xuICAgIGlucHV0LmRpc3RhbmNlID0gZ2V0RGlzdGFuY2Uob2Zmc2V0Q2VudGVyLCBjZW50ZXIpO1xuXG4gICAgY29tcHV0ZURlbHRhWFkoc2Vzc2lvbiwgaW5wdXQpO1xuICAgIGlucHV0Lm9mZnNldERpcmVjdGlvbiA9IGdldERpcmVjdGlvbihpbnB1dC5kZWx0YVgsIGlucHV0LmRlbHRhWSk7XG5cbiAgICB2YXIgb3ZlcmFsbFZlbG9jaXR5ID0gZ2V0VmVsb2NpdHkoaW5wdXQuZGVsdGFUaW1lLCBpbnB1dC5kZWx0YVgsIGlucHV0LmRlbHRhWSk7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5WCA9IG92ZXJhbGxWZWxvY2l0eS54O1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eVkgPSBvdmVyYWxsVmVsb2NpdHkueTtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHkgPSAoYWJzKG92ZXJhbGxWZWxvY2l0eS54KSA+IGFicyhvdmVyYWxsVmVsb2NpdHkueSkpID8gb3ZlcmFsbFZlbG9jaXR5LnggOiBvdmVyYWxsVmVsb2NpdHkueTtcblxuICAgIGlucHV0LnNjYWxlID0gZmlyc3RNdWx0aXBsZSA/IGdldFNjYWxlKGZpcnN0TXVsdGlwbGUucG9pbnRlcnMsIHBvaW50ZXJzKSA6IDE7XG4gICAgaW5wdXQucm90YXRpb24gPSBmaXJzdE11bHRpcGxlID8gZ2V0Um90YXRpb24oZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMDtcblxuICAgIGlucHV0Lm1heFBvaW50ZXJzID0gIXNlc3Npb24ucHJldklucHV0ID8gaW5wdXQucG9pbnRlcnMubGVuZ3RoIDogKChpbnB1dC5wb2ludGVycy5sZW5ndGggPlxuICAgICAgICBzZXNzaW9uLnByZXZJbnB1dC5tYXhQb2ludGVycykgPyBpbnB1dC5wb2ludGVycy5sZW5ndGggOiBzZXNzaW9uLnByZXZJbnB1dC5tYXhQb2ludGVycyk7XG5cbiAgICBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpO1xuXG4gICAgLy8gZmluZCB0aGUgY29ycmVjdCB0YXJnZXRcbiAgICB2YXIgdGFyZ2V0ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIGlmIChoYXNQYXJlbnQoaW5wdXQuc3JjRXZlbnQudGFyZ2V0LCB0YXJnZXQpKSB7XG4gICAgICAgIHRhcmdldCA9IGlucHV0LnNyY0V2ZW50LnRhcmdldDtcbiAgICB9XG4gICAgaW5wdXQudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBjb21wdXRlRGVsdGFYWShzZXNzaW9uLCBpbnB1dCkge1xuICAgIHZhciBjZW50ZXIgPSBpbnB1dC5jZW50ZXI7XG4gICAgdmFyIG9mZnNldCA9IHNlc3Npb24ub2Zmc2V0RGVsdGEgfHwge307XG4gICAgdmFyIHByZXZEZWx0YSA9IHNlc3Npb24ucHJldkRlbHRhIHx8IHt9O1xuICAgIHZhciBwcmV2SW5wdXQgPSBzZXNzaW9uLnByZXZJbnB1dCB8fCB7fTtcblxuICAgIGlmIChpbnB1dC5ldmVudFR5cGUgPT09IElOUFVUX1NUQVJUIHx8IHByZXZJbnB1dC5ldmVudFR5cGUgPT09IElOUFVUX0VORCkge1xuICAgICAgICBwcmV2RGVsdGEgPSBzZXNzaW9uLnByZXZEZWx0YSA9IHtcbiAgICAgICAgICAgIHg6IHByZXZJbnB1dC5kZWx0YVggfHwgMCxcbiAgICAgICAgICAgIHk6IHByZXZJbnB1dC5kZWx0YVkgfHwgMFxuICAgICAgICB9O1xuXG4gICAgICAgIG9mZnNldCA9IHNlc3Npb24ub2Zmc2V0RGVsdGEgPSB7XG4gICAgICAgICAgICB4OiBjZW50ZXIueCxcbiAgICAgICAgICAgIHk6IGNlbnRlci55XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaW5wdXQuZGVsdGFYID0gcHJldkRlbHRhLnggKyAoY2VudGVyLnggLSBvZmZzZXQueCk7XG4gICAgaW5wdXQuZGVsdGFZID0gcHJldkRlbHRhLnkgKyAoY2VudGVyLnkgLSBvZmZzZXQueSk7XG59XG5cbi8qKlxuICogdmVsb2NpdHkgaXMgY2FsY3VsYXRlZCBldmVyeSB4IG1zXG4gKiBAcGFyYW0ge09iamVjdH0gc2Vzc2lvblxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVJbnRlcnZhbElucHV0RGF0YShzZXNzaW9uLCBpbnB1dCkge1xuICAgIHZhciBsYXN0ID0gc2Vzc2lvbi5sYXN0SW50ZXJ2YWwgfHwgaW5wdXQsXG4gICAgICAgIGRlbHRhVGltZSA9IGlucHV0LnRpbWVTdGFtcCAtIGxhc3QudGltZVN0YW1wLFxuICAgICAgICB2ZWxvY2l0eSwgdmVsb2NpdHlYLCB2ZWxvY2l0eVksIGRpcmVjdGlvbjtcblxuICAgIGlmIChpbnB1dC5ldmVudFR5cGUgIT0gSU5QVVRfQ0FOQ0VMICYmIChkZWx0YVRpbWUgPiBDT01QVVRFX0lOVEVSVkFMIHx8IGxhc3QudmVsb2NpdHkgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgdmFyIGRlbHRhWCA9IGlucHV0LmRlbHRhWCAtIGxhc3QuZGVsdGFYO1xuICAgICAgICB2YXIgZGVsdGFZID0gaW5wdXQuZGVsdGFZIC0gbGFzdC5kZWx0YVk7XG5cbiAgICAgICAgdmFyIHYgPSBnZXRWZWxvY2l0eShkZWx0YVRpbWUsIGRlbHRhWCwgZGVsdGFZKTtcbiAgICAgICAgdmVsb2NpdHlYID0gdi54O1xuICAgICAgICB2ZWxvY2l0eVkgPSB2Lnk7XG4gICAgICAgIHZlbG9jaXR5ID0gKGFicyh2LngpID4gYWJzKHYueSkpID8gdi54IDogdi55O1xuICAgICAgICBkaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24oZGVsdGFYLCBkZWx0YVkpO1xuXG4gICAgICAgIHNlc3Npb24ubGFzdEludGVydmFsID0gaW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXNlIGxhdGVzdCB2ZWxvY2l0eSBpbmZvIGlmIGl0IGRvZXNuJ3Qgb3ZlcnRha2UgYSBtaW5pbXVtIHBlcmlvZFxuICAgICAgICB2ZWxvY2l0eSA9IGxhc3QudmVsb2NpdHk7XG4gICAgICAgIHZlbG9jaXR5WCA9IGxhc3QudmVsb2NpdHlYO1xuICAgICAgICB2ZWxvY2l0eVkgPSBsYXN0LnZlbG9jaXR5WTtcbiAgICAgICAgZGlyZWN0aW9uID0gbGFzdC5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgaW5wdXQudmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICBpbnB1dC52ZWxvY2l0eVggPSB2ZWxvY2l0eVg7XG4gICAgaW5wdXQudmVsb2NpdHlZID0gdmVsb2NpdHlZO1xuICAgIGlucHV0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbn1cblxuLyoqXG4gKiBjcmVhdGUgYSBzaW1wbGUgY2xvbmUgZnJvbSB0aGUgaW5wdXQgdXNlZCBmb3Igc3RvcmFnZSBvZiBmaXJzdElucHV0IGFuZCBmaXJzdE11bHRpcGxlXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqIEByZXR1cm5zIHtPYmplY3R9IGNsb25lZElucHV0RGF0YVxuICovXG5mdW5jdGlvbiBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCkge1xuICAgIC8vIG1ha2UgYSBzaW1wbGUgY29weSBvZiB0aGUgcG9pbnRlcnMgYmVjYXVzZSB3ZSB3aWxsIGdldCBhIHJlZmVyZW5jZSBpZiB3ZSBkb24ndFxuICAgIC8vIHdlIG9ubHkgbmVlZCBjbGllbnRYWSBmb3IgdGhlIGNhbGN1bGF0aW9uc1xuICAgIHZhciBwb2ludGVycyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGlucHV0LnBvaW50ZXJzLmxlbmd0aCkge1xuICAgICAgICBwb2ludGVyc1tpXSA9IHtcbiAgICAgICAgICAgIGNsaWVudFg6IHJvdW5kKGlucHV0LnBvaW50ZXJzW2ldLmNsaWVudFgpLFxuICAgICAgICAgICAgY2xpZW50WTogcm91bmQoaW5wdXQucG9pbnRlcnNbaV0uY2xpZW50WSlcbiAgICAgICAgfTtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRpbWVTdGFtcDogbm93KCksXG4gICAgICAgIHBvaW50ZXJzOiBwb2ludGVycyxcbiAgICAgICAgY2VudGVyOiBnZXRDZW50ZXIocG9pbnRlcnMpLFxuICAgICAgICBkZWx0YVg6IGlucHV0LmRlbHRhWCxcbiAgICAgICAgZGVsdGFZOiBpbnB1dC5kZWx0YVlcbiAgICB9O1xufVxuXG4vKipcbiAqIGdldCB0aGUgY2VudGVyIG9mIGFsbCB0aGUgcG9pbnRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IHBvaW50ZXJzXG4gKiBAcmV0dXJuIHtPYmplY3R9IGNlbnRlciBjb250YWlucyBgeGAgYW5kIGB5YCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldENlbnRlcihwb2ludGVycykge1xuICAgIHZhciBwb2ludGVyc0xlbmd0aCA9IHBvaW50ZXJzLmxlbmd0aDtcblxuICAgIC8vIG5vIG5lZWQgdG8gbG9vcCB3aGVuIG9ubHkgb25lIHRvdWNoXG4gICAgaWYgKHBvaW50ZXJzTGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiByb3VuZChwb2ludGVyc1swXS5jbGllbnRYKSxcbiAgICAgICAgICAgIHk6IHJvdW5kKHBvaW50ZXJzWzBdLmNsaWVudFkpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHggPSAwLCB5ID0gMCwgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBwb2ludGVyc0xlbmd0aCkge1xuICAgICAgICB4ICs9IHBvaW50ZXJzW2ldLmNsaWVudFg7XG4gICAgICAgIHkgKz0gcG9pbnRlcnNbaV0uY2xpZW50WTtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHJvdW5kKHggLyBwb2ludGVyc0xlbmd0aCksXG4gICAgICAgIHk6IHJvdW5kKHkgLyBwb2ludGVyc0xlbmd0aClcbiAgICB9O1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgdmVsb2NpdHkgYmV0d2VlbiB0d28gcG9pbnRzLiB1bml0IGlzIGluIHB4IHBlciBtcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVRpbWVcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogQHJldHVybiB7T2JqZWN0fSB2ZWxvY2l0eSBgeGAgYW5kIGB5YFxuICovXG5mdW5jdGlvbiBnZXRWZWxvY2l0eShkZWx0YVRpbWUsIHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4IC8gZGVsdGFUaW1lIHx8IDAsXG4gICAgICAgIHk6IHkgLyBkZWx0YVRpbWUgfHwgMFxuICAgIH07XG59XG5cbi8qKlxuICogZ2V0IHRoZSBkaXJlY3Rpb24gYmV0d2VlbiB0d28gcG9pbnRzXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqIEByZXR1cm4ge051bWJlcn0gZGlyZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldERpcmVjdGlvbih4LCB5KSB7XG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgICAgcmV0dXJuIERJUkVDVElPTl9OT05FO1xuICAgIH1cblxuICAgIGlmIChhYnMoeCkgPj0gYWJzKHkpKSB7XG4gICAgICAgIHJldHVybiB4IDwgMCA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgIH1cbiAgICByZXR1cm4geSA8IDAgPyBESVJFQ1RJT05fVVAgOiBESVJFQ1RJT05fRE9XTjtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIGFic29sdXRlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50c1xuICogQHBhcmFtIHtPYmplY3R9IHAxIHt4LCB5fVxuICogQHBhcmFtIHtPYmplY3R9IHAyIHt4LCB5fVxuICogQHBhcmFtIHtBcnJheX0gW3Byb3BzXSBjb250YWluaW5nIHggYW5kIHkga2V5c1xuICogQHJldHVybiB7TnVtYmVyfSBkaXN0YW5jZVxuICovXG5mdW5jdGlvbiBnZXREaXN0YW5jZShwMSwgcDIsIHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcykge1xuICAgICAgICBwcm9wcyA9IFBST1BTX1hZO1xuICAgIH1cbiAgICB2YXIgeCA9IHAyW3Byb3BzWzBdXSAtIHAxW3Byb3BzWzBdXSxcbiAgICAgICAgeSA9IHAyW3Byb3BzWzFdXSAtIHAxW3Byb3BzWzFdXTtcblxuICAgIHJldHVybiBNYXRoLnNxcnQoKHggKiB4KSArICh5ICogeSkpO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgYW5nbGUgYmV0d2VlbiB0d28gY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwMVxuICogQHBhcmFtIHtPYmplY3R9IHAyXG4gKiBAcGFyYW0ge0FycmF5fSBbcHJvcHNdIGNvbnRhaW5pbmcgeCBhbmQgeSBrZXlzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGFuZ2xlXG4gKi9cbmZ1bmN0aW9uIGdldEFuZ2xlKHAxLCBwMiwgcHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIHByb3BzID0gUFJPUFNfWFk7XG4gICAgfVxuICAgIHZhciB4ID0gcDJbcHJvcHNbMF1dIC0gcDFbcHJvcHNbMF1dLFxuICAgICAgICB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHksIHgpICogMTgwIC8gTWF0aC5QSTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIHJvdGF0aW9uIGRlZ3JlZXMgYmV0d2VlbiB0d28gcG9pbnRlcnNldHNcbiAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0IGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBlbmQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEByZXR1cm4ge051bWJlcn0gcm90YXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0Um90YXRpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBnZXRBbmdsZShlbmRbMV0sIGVuZFswXSwgUFJPUFNfQ0xJRU5UX1hZKSArIGdldEFuZ2xlKHN0YXJ0WzFdLCBzdGFydFswXSwgUFJPUFNfQ0xJRU5UX1hZKTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIHNjYWxlIGZhY3RvciBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xuICogbm8gc2NhbGUgaXMgMSwgYW5kIGdvZXMgZG93biB0byAwIHdoZW4gcGluY2hlZCB0b2dldGhlciwgYW5kIGJpZ2dlciB3aGVuIHBpbmNoZWQgb3V0XG4gKiBAcGFyYW0ge0FycmF5fSBzdGFydCBhcnJheSBvZiBwb2ludGVyc1xuICogQHBhcmFtIHtBcnJheX0gZW5kIGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHNjYWxlXG4gKi9cbmZ1bmN0aW9uIGdldFNjYWxlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZ2V0RGlzdGFuY2UoZW5kWzBdLCBlbmRbMV0sIFBST1BTX0NMSUVOVF9YWSkgLyBnZXREaXN0YW5jZShzdGFydFswXSwgc3RhcnRbMV0sIFBST1BTX0NMSUVOVF9YWSk7XG59XG5cbnZhciBNT1VTRV9JTlBVVF9NQVAgPSB7XG4gICAgbW91c2Vkb3duOiBJTlBVVF9TVEFSVCxcbiAgICBtb3VzZW1vdmU6IElOUFVUX01PVkUsXG4gICAgbW91c2V1cDogSU5QVVRfRU5EXG59O1xuXG52YXIgTU9VU0VfRUxFTUVOVF9FVkVOVFMgPSAnbW91c2Vkb3duJztcbnZhciBNT1VTRV9XSU5ET1dfRVZFTlRTID0gJ21vdXNlbW92ZSBtb3VzZXVwJztcblxuLyoqXG4gKiBNb3VzZSBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gTW91c2VJbnB1dCgpIHtcbiAgICB0aGlzLmV2RWwgPSBNT1VTRV9FTEVNRU5UX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gTU9VU0VfV0lORE9XX0VWRU5UUztcblxuICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlOyAvLyBtb3VzZWRvd24gc3RhdGVcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoTW91c2VJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gTUVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBNT1VTRV9JTlBVVF9NQVBbZXYudHlwZV07XG5cbiAgICAgICAgLy8gb24gc3RhcnQgd2Ugd2FudCB0byBoYXZlIHRoZSBsZWZ0IG1vdXNlIGJ1dHRvbiBkb3duXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiBldi5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJlc3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfTU9WRSAmJiBldi53aGljaCAhPT0gMSkge1xuICAgICAgICAgICAgZXZlbnRUeXBlID0gSU5QVVRfRU5EO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW91c2UgbXVzdCBiZSBkb3duXG4gICAgICAgIGlmICghdGhpcy5wcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfTU9VU0UsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbnZhciBQT0lOVEVSX0lOUFVUX01BUCA9IHtcbiAgICBwb2ludGVyZG93bjogSU5QVVRfU1RBUlQsXG4gICAgcG9pbnRlcm1vdmU6IElOUFVUX01PVkUsXG4gICAgcG9pbnRlcnVwOiBJTlBVVF9FTkQsXG4gICAgcG9pbnRlcmNhbmNlbDogSU5QVVRfQ0FOQ0VMLFxuICAgIHBvaW50ZXJvdXQ6IElOUFVUX0NBTkNFTFxufTtcblxuLy8gaW4gSUUxMCB0aGUgcG9pbnRlciB0eXBlcyBpcyBkZWZpbmVkIGFzIGFuIGVudW1cbnZhciBJRTEwX1BPSU5URVJfVFlQRV9FTlVNID0ge1xuICAgIDI6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgMzogSU5QVVRfVFlQRV9QRU4sXG4gICAgNDogSU5QVVRfVFlQRV9NT1VTRSxcbiAgICA1OiBJTlBVVF9UWVBFX0tJTkVDVCAvLyBzZWUgaHR0cHM6Ly90d2l0dGVyLmNvbS9qYWNvYnJvc3NpL3N0YXR1cy80ODA1OTY0Mzg0ODk4OTA4MTZcbn07XG5cbnZhciBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ3BvaW50ZXJkb3duJztcbnZhciBQT0lOVEVSX1dJTkRPV19FVkVOVFMgPSAncG9pbnRlcm1vdmUgcG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwnO1xuXG4vLyBJRTEwIGhhcyBwcmVmaXhlZCBzdXBwb3J0LCBhbmQgY2FzZS1zZW5zaXRpdmVcbmlmICh3aW5kb3cuTVNQb2ludGVyRXZlbnQgJiYgIXdpbmRvdy5Qb2ludGVyRXZlbnQpIHtcbiAgICBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ01TUG9pbnRlckRvd24nO1xuICAgIFBPSU5URVJfV0lORE9XX0VWRU5UUyA9ICdNU1BvaW50ZXJNb3ZlIE1TUG9pbnRlclVwIE1TUG9pbnRlckNhbmNlbCc7XG59XG5cbi8qKlxuICogUG9pbnRlciBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gUG9pbnRlckV2ZW50SW5wdXQoKSB7XG4gICAgdGhpcy5ldkVsID0gUE9JTlRFUl9FTEVNRU5UX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gUE9JTlRFUl9XSU5ET1dfRVZFTlRTO1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuc3RvcmUgPSAodGhpcy5tYW5hZ2VyLnNlc3Npb24ucG9pbnRlckV2ZW50cyA9IFtdKTtcbn1cblxuaW5oZXJpdChQb2ludGVyRXZlbnRJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gUEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciBzdG9yZSA9IHRoaXMuc3RvcmU7XG4gICAgICAgIHZhciByZW1vdmVQb2ludGVyID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGV2ZW50VHlwZU5vcm1hbGl6ZWQgPSBldi50eXBlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnbXMnLCAnJyk7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBQT0lOVEVSX0lOUFVUX01BUFtldmVudFR5cGVOb3JtYWxpemVkXTtcbiAgICAgICAgdmFyIHBvaW50ZXJUeXBlID0gSUUxMF9QT0lOVEVSX1RZUEVfRU5VTVtldi5wb2ludGVyVHlwZV0gfHwgZXYucG9pbnRlclR5cGU7XG5cbiAgICAgICAgdmFyIGlzVG91Y2ggPSAocG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9UT1VDSCk7XG5cbiAgICAgICAgLy8gZ2V0IGluZGV4IG9mIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcbiAgICAgICAgdmFyIHN0b3JlSW5kZXggPSBpbkFycmF5KHN0b3JlLCBldi5wb2ludGVySWQsICdwb2ludGVySWQnKTtcblxuICAgICAgICAvLyBzdGFydCBhbmQgbW91c2UgbXVzdCBiZSBkb3duXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiAoZXYuYnV0dG9uID09PSAwIHx8IGlzVG91Y2gpKSB7XG4gICAgICAgICAgICBpZiAoc3RvcmVJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5wdXNoKGV2KTtcbiAgICAgICAgICAgICAgICBzdG9yZUluZGV4ID0gc3RvcmUubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICAgICAgcmVtb3ZlUG9pbnRlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpdCBub3QgZm91bmQsIHNvIHRoZSBwb2ludGVyIGhhc24ndCBiZWVuIGRvd24gKHNvIGl0J3MgcHJvYmFibHkgYSBob3ZlcilcbiAgICAgICAgaWYgKHN0b3JlSW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGV2ZW50IGluIHRoZSBzdG9yZVxuICAgICAgICBzdG9yZVtzdG9yZUluZGV4XSA9IGV2O1xuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBzdG9yZSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogW2V2XSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBwb2ludGVyVHlwZSxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVtb3ZlUG9pbnRlcikge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGZyb20gdGhlIHN0b3JlXG4gICAgICAgICAgICBzdG9yZS5zcGxpY2Uoc3RvcmVJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxudmFyIFNJTkdMRV9UT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxufTtcblxudmFyIFNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQnO1xudmFyIFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcblxuLyoqXG4gKiBUb3VjaCBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gU2luZ2xlVG91Y2hJbnB1dCgpIHtcbiAgICB0aGlzLmV2VGFyZ2V0ID0gU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTO1xuICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChTaW5nbGVUb3VjaElucHV0LCBJbnB1dCwge1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFRFaGFuZGxlcihldikge1xuICAgICAgICB2YXIgdHlwZSA9IFNJTkdMRV9UT1VDSF9JTlBVVF9NQVBbZXYudHlwZV07XG5cbiAgICAgICAgLy8gc2hvdWxkIHdlIGhhbmRsZSB0aGUgdG91Y2ggZXZlbnRzP1xuICAgICAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdWNoZXMgPSBub3JtYWxpemVTaW5nbGVUb3VjaGVzLmNhbGwodGhpcywgZXYsIHR5cGUpO1xuXG4gICAgICAgIC8vIHdoZW4gZG9uZSwgcmVzZXQgdGhlIHN0YXJ0ZWQgc3RhdGVcbiAgICAgICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiB0b3VjaGVzWzBdLmxlbmd0aCAtIHRvdWNoZXNbMV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCB0eXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogdG91Y2hlc1swXSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEB0aGlzIHtUb3VjaElucHV0fVxuICogQHBhcmFtIHtPYmplY3R9IGV2XG4gKiBAcGFyYW0ge051bWJlcn0gdHlwZSBmbGFnXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVTaW5nbGVUb3VjaGVzKGV2LCB0eXBlKSB7XG4gICAgdmFyIGFsbCA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIGNoYW5nZWQgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKTtcblxuICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgYWxsID0gdW5pcXVlQXJyYXkoYWxsLmNvbmNhdChjaGFuZ2VkKSwgJ2lkZW50aWZpZXInLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2FsbCwgY2hhbmdlZF07XG59XG5cbnZhciBUT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxufTtcblxudmFyIFRPVUNIX1RBUkdFVF9FVkVOVFMgPSAndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnO1xuXG4vKipcbiAqIE11bHRpLXVzZXIgdG91Y2ggZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIFRvdWNoSW5wdXQoKSB7XG4gICAgdGhpcy5ldlRhcmdldCA9IFRPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy50YXJnZXRJZHMgPSB7fTtcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoVG91Y2hJbnB1dCwgSW5wdXQsIHtcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBNVEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciB0eXBlID0gVE9VQ0hfSU5QVVRfTUFQW2V2LnR5cGVdO1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGdldFRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7XG4gICAgICAgIGlmICghdG91Y2hlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiB0b3VjaGVzWzBdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiB0b3VjaGVzWzFdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQHRoaXMge1RvdWNoSW5wdXR9XG4gKiBAcGFyYW0ge09iamVjdH0gZXZcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eXBlIGZsYWdcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR8QXJyYXl9IFthbGwsIGNoYW5nZWRdXG4gKi9cbmZ1bmN0aW9uIGdldFRvdWNoZXMoZXYsIHR5cGUpIHtcbiAgICB2YXIgYWxsVG91Y2hlcyA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIHRhcmdldElkcyA9IHRoaXMudGFyZ2V0SWRzO1xuXG4gICAgLy8gd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSB0b3VjaCwgdGhlIHByb2Nlc3MgY2FuIGJlIHNpbXBsaWZpZWRcbiAgICBpZiAodHlwZSAmIChJTlBVVF9TVEFSVCB8IElOUFVUX01PVkUpICYmIGFsbFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRhcmdldElkc1thbGxUb3VjaGVzWzBdLmlkZW50aWZpZXJdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFthbGxUb3VjaGVzLCBhbGxUb3VjaGVzXTtcbiAgICB9XG5cbiAgICB2YXIgaSxcbiAgICAgICAgdGFyZ2V0VG91Y2hlcyxcbiAgICAgICAgY2hhbmdlZFRvdWNoZXMgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKSxcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXMgPSBbXSxcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG5cbiAgICAvLyBnZXQgdGFyZ2V0IHRvdWNoZXMgZnJvbSB0b3VjaGVzXG4gICAgdGFyZ2V0VG91Y2hlcyA9IGFsbFRvdWNoZXMuZmlsdGVyKGZ1bmN0aW9uKHRvdWNoKSB7XG4gICAgICAgIHJldHVybiBoYXNQYXJlbnQodG91Y2gudGFyZ2V0LCB0YXJnZXQpO1xuICAgIH0pO1xuXG4gICAgLy8gY29sbGVjdCB0b3VjaGVzXG4gICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0YXJnZXRJZHNbdGFyZ2V0VG91Y2hlc1tpXS5pZGVudGlmaWVyXSA9IHRydWU7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgY2hhbmdlZCB0b3VjaGVzIHRvIG9ubHkgY29udGFpbiB0b3VjaGVzIHRoYXQgZXhpc3QgaW4gdGhlIGNvbGxlY3RlZCB0YXJnZXQgaWRzXG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBjaGFuZ2VkVG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXMucHVzaChjaGFuZ2VkVG91Y2hlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhbnVwIHJlbW92ZWQgdG91Y2hlc1xuICAgICAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0SWRzW2NoYW5nZWRUb3VjaGVzW2ldLmlkZW50aWZpZXJdO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoIWNoYW5nZWRUYXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgLy8gbWVyZ2UgdGFyZ2V0VG91Y2hlcyB3aXRoIGNoYW5nZWRUYXJnZXRUb3VjaGVzIHNvIGl0IGNvbnRhaW5zIEFMTCB0b3VjaGVzLCBpbmNsdWRpbmcgJ2VuZCcgYW5kICdjYW5jZWwnXG4gICAgICAgIHVuaXF1ZUFycmF5KHRhcmdldFRvdWNoZXMuY29uY2F0KGNoYW5nZWRUYXJnZXRUb3VjaGVzKSwgJ2lkZW50aWZpZXInLCB0cnVlKSxcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXNcbiAgICBdO1xufVxuXG4vKipcbiAqIENvbWJpbmVkIHRvdWNoIGFuZCBtb3VzZSBpbnB1dFxuICpcbiAqIFRvdWNoIGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGVuIG1vdXNlLCBhbmQgd2hpbGUgdG91Y2hpbmcgbm8gbW91c2UgZXZlbnRzIGFyZSBhbGxvd2VkLlxuICogVGhpcyBiZWNhdXNlIHRvdWNoIGRldmljZXMgYWxzbyBlbWl0IG1vdXNlIGV2ZW50cyB3aGlsZSBkb2luZyBhIHRvdWNoLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuXG52YXIgREVEVVBfVElNRU9VVCA9IDI1MDA7XG52YXIgREVEVVBfRElTVEFOQ0UgPSAyNTtcblxuZnVuY3Rpb24gVG91Y2hNb3VzZUlucHV0KCkge1xuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB2YXIgaGFuZGxlciA9IGJpbmRGbih0aGlzLmhhbmRsZXIsIHRoaXMpO1xuICAgIHRoaXMudG91Y2ggPSBuZXcgVG91Y2hJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xuICAgIHRoaXMubW91c2UgPSBuZXcgTW91c2VJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xuXG4gICAgdGhpcy5wcmltYXJ5VG91Y2ggPSBudWxsO1xuICAgIHRoaXMubGFzdFRvdWNoZXMgPSBbXTtcbn1cblxuaW5oZXJpdChUb3VjaE1vdXNlSW5wdXQsIElucHV0LCB7XG4gICAgLyoqXG4gICAgICogaGFuZGxlIG1vdXNlIGFuZCB0b3VjaCBldmVudHNcbiAgICAgKiBAcGFyYW0ge0hhbW1lcn0gbWFuYWdlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dEV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFRNRWhhbmRsZXIobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKSB7XG4gICAgICAgIHZhciBpc1RvdWNoID0gKGlucHV0RGF0YS5wb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX1RPVUNIKSxcbiAgICAgICAgICAgIGlzTW91c2UgPSAoaW5wdXREYXRhLnBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfTU9VU0UpO1xuXG4gICAgICAgIGlmIChpc01vdXNlICYmIGlucHV0RGF0YS5zb3VyY2VDYXBhYmlsaXRpZXMgJiYgaW5wdXREYXRhLnNvdXJjZUNhcGFiaWxpdGllcy5maXJlc1RvdWNoRXZlbnRzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aGVuIHdlJ3JlIGluIGEgdG91Y2ggZXZlbnQsIHJlY29yZCB0b3VjaGVzIHRvICBkZS1kdXBlIHN5bnRoZXRpYyBtb3VzZSBldmVudFxuICAgICAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgICAgICAgcmVjb3JkVG91Y2hlcy5jYWxsKHRoaXMsIGlucHV0RXZlbnQsIGlucHV0RGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VzZSAmJiBpc1N5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgaW5wdXREYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayhtYW5hZ2VyLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudG91Y2guZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm1vdXNlLmRlc3Ryb3koKTtcbiAgICB9XG59KTtcblxuZnVuY3Rpb24gcmVjb3JkVG91Y2hlcyhldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkge1xuICAgICAgICB0aGlzLnByaW1hcnlUb3VjaCA9IGV2ZW50RGF0YS5jaGFuZ2VkUG9pbnRlcnNbMF0uaWRlbnRpZmllcjtcbiAgICAgICAgc2V0TGFzdFRvdWNoLmNhbGwodGhpcywgZXZlbnREYXRhKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgIHNldExhc3RUb3VjaC5jYWxsKHRoaXMsIGV2ZW50RGF0YSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRMYXN0VG91Y2goZXZlbnREYXRhKSB7XG4gICAgdmFyIHRvdWNoID0gZXZlbnREYXRhLmNoYW5nZWRQb2ludGVyc1swXTtcblxuICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLnByaW1hcnlUb3VjaCkge1xuICAgICAgICB2YXIgbGFzdFRvdWNoID0ge3g6IHRvdWNoLmNsaWVudFgsIHk6IHRvdWNoLmNsaWVudFl9O1xuICAgICAgICB0aGlzLmxhc3RUb3VjaGVzLnB1c2gobGFzdFRvdWNoKTtcbiAgICAgICAgdmFyIGx0cyA9IHRoaXMubGFzdFRvdWNoZXM7XG4gICAgICAgIHZhciByZW1vdmVMYXN0VG91Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpID0gbHRzLmluZGV4T2YobGFzdFRvdWNoKTtcbiAgICAgICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBsdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzZXRUaW1lb3V0KHJlbW92ZUxhc3RUb3VjaCwgREVEVVBfVElNRU9VVCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1N5bnRoZXRpY0V2ZW50KGV2ZW50RGF0YSkge1xuICAgIHZhciB4ID0gZXZlbnREYXRhLnNyY0V2ZW50LmNsaWVudFgsIHkgPSBldmVudERhdGEuc3JjRXZlbnQuY2xpZW50WTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGFzdFRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLmxhc3RUb3VjaGVzW2ldO1xuICAgICAgICB2YXIgZHggPSBNYXRoLmFicyh4IC0gdC54KSwgZHkgPSBNYXRoLmFicyh5IC0gdC55KTtcbiAgICAgICAgaWYgKGR4IDw9IERFRFVQX0RJU1RBTkNFICYmIGR5IDw9IERFRFVQX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gPSBwcmVmaXhlZChURVNUX0VMRU1FTlQuc3R5bGUsICd0b3VjaEFjdGlvbicpO1xudmFyIE5BVElWRV9UT1VDSF9BQ1RJT04gPSBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gIT09IHVuZGVmaW5lZDtcblxuLy8gbWFnaWNhbCB0b3VjaEFjdGlvbiB2YWx1ZVxudmFyIFRPVUNIX0FDVElPTl9DT01QVVRFID0gJ2NvbXB1dGUnO1xudmFyIFRPVUNIX0FDVElPTl9BVVRPID0gJ2F1dG8nO1xudmFyIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04gPSAnbWFuaXB1bGF0aW9uJzsgLy8gbm90IGltcGxlbWVudGVkXG52YXIgVE9VQ0hfQUNUSU9OX05PTkUgPSAnbm9uZSc7XG52YXIgVE9VQ0hfQUNUSU9OX1BBTl9YID0gJ3Bhbi14JztcbnZhciBUT1VDSF9BQ1RJT05fUEFOX1kgPSAncGFuLXknO1xudmFyIFRPVUNIX0FDVElPTl9NQVAgPSBnZXRUb3VjaEFjdGlvblByb3BzKCk7XG5cbi8qKlxuICogVG91Y2ggQWN0aW9uXG4gKiBzZXRzIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eSBvciB1c2VzIHRoZSBqcyBhbHRlcm5hdGl2ZVxuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBUb3VjaEFjdGlvbihtYW5hZ2VyLCB2YWx1ZSkge1xuICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdGhpcy5zZXQodmFsdWUpO1xufVxuXG5Ub3VjaEFjdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogc2V0IHRoZSB0b3VjaEFjdGlvbiB2YWx1ZSBvbiB0aGUgZWxlbWVudCBvciBlbmFibGUgdGhlIHBvbHlmaWxsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBmaW5kIG91dCB0aGUgdG91Y2gtYWN0aW9uIGJ5IHRoZSBldmVudCBoYW5kbGVyc1xuICAgICAgICBpZiAodmFsdWUgPT0gVE9VQ0hfQUNUSU9OX0NPTVBVVEUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb21wdXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTkFUSVZFX1RPVUNIX0FDVElPTiAmJiB0aGlzLm1hbmFnZXIuZWxlbWVudC5zdHlsZSAmJiBUT1VDSF9BQ1RJT05fTUFQW3ZhbHVlXSkge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVsZW1lbnQuc3R5bGVbUFJFRklYRURfVE9VQ0hfQUNUSU9OXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBqdXN0IHJlLXNldCB0aGUgdG91Y2hBY3Rpb24gdmFsdWVcbiAgICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldCh0aGlzLm1hbmFnZXIub3B0aW9ucy50b3VjaEFjdGlvbik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvbXB1dGUgdGhlIHZhbHVlIGZvciB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkgYmFzZWQgb24gdGhlIHJlY29nbml6ZXIncyBzZXR0aW5nc1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgY29tcHV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICAgIGVhY2godGhpcy5tYW5hZ2VyLnJlY29nbml6ZXJzLCBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgICAgICBpZiAoYm9vbE9yRm4ocmVjb2duaXplci5vcHRpb25zLmVuYWJsZSwgW3JlY29nbml6ZXJdKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zLmNvbmNhdChyZWNvZ25pemVyLmdldFRvdWNoQWN0aW9uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMuam9pbignICcpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uIGVhY2ggaW5wdXQgY3ljbGUgYW5kIHByb3ZpZGVzIHRoZSBwcmV2ZW50aW5nIG9mIHRoZSBicm93c2VyIGJlaGF2aW9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG4gICAgcHJldmVudERlZmF1bHRzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgc3JjRXZlbnQgPSBpbnB1dC5zcmNFdmVudDtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlucHV0Lm9mZnNldERpcmVjdGlvbjtcblxuICAgICAgICAvLyBpZiB0aGUgdG91Y2ggYWN0aW9uIGRpZCBwcmV2ZW50ZWQgb25jZSB0aGlzIHNlc3Npb25cbiAgICAgICAgaWYgKHRoaXMubWFuYWdlci5zZXNzaW9uLnByZXZlbnRlZCkge1xuICAgICAgICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgaGFzTm9uZSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fUEFOX1ldO1xuICAgICAgICB2YXIgaGFzUGFuWCA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWCkgJiYgIVRPVUNIX0FDVElPTl9NQVBbVE9VQ0hfQUNUSU9OX1BBTl9YXTtcblxuICAgICAgICBpZiAoaGFzTm9uZSkge1xuICAgICAgICAgICAgLy9kbyBub3QgcHJldmVudCBkZWZhdWx0cyBpZiB0aGlzIGlzIGEgdGFwIGdlc3R1cmVcblxuICAgICAgICAgICAgdmFyIGlzVGFwUG9pbnRlciA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gMTtcbiAgICAgICAgICAgIHZhciBpc1RhcE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCAyO1xuICAgICAgICAgICAgdmFyIGlzVGFwVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgMjUwO1xuXG4gICAgICAgICAgICBpZiAoaXNUYXBQb2ludGVyICYmIGlzVGFwTW92ZW1lbnQgJiYgaXNUYXBUb3VjaFRpbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICAgICAgICAvLyBgcGFuLXggcGFuLXlgIG1lYW5zIGJyb3dzZXIgaGFuZGxlcyBhbGwgc2Nyb2xsaW5nL3Bhbm5pbmcsIGRvIG5vdCBwcmV2ZW50XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzTm9uZSB8fFxuICAgICAgICAgICAgKGhhc1BhblkgJiYgZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHx8XG4gICAgICAgICAgICAoaGFzUGFuWCAmJiBkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2ZW50U3JjKHNyY0V2ZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxsIHByZXZlbnREZWZhdWx0IHRvIHByZXZlbnQgdGhlIGJyb3dzZXIncyBkZWZhdWx0IGJlaGF2aW9yIChzY3JvbGxpbmcgaW4gbW9zdCBjYXNlcylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3JjRXZlbnRcbiAgICAgKi9cbiAgICBwcmV2ZW50U3JjOiBmdW5jdGlvbihzcmNFdmVudCkge1xuICAgICAgICB0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICBzcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogd2hlbiB0aGUgdG91Y2hBY3Rpb25zIGFyZSBjb2xsZWN0ZWQgdGhleSBhcmUgbm90IGEgdmFsaWQgdmFsdWUsIHNvIHdlIG5lZWQgdG8gY2xlYW4gdGhpbmdzIHVwLiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWN0aW9uc1xuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMpIHtcbiAgICAvLyBub25lXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgdmFyIGhhc1BhblggPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1gpO1xuICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcblxuICAgIC8vIGlmIGJvdGggcGFuLXggYW5kIHBhbi15IGFyZSBzZXQgKGRpZmZlcmVudCByZWNvZ25pemVyc1xuICAgIC8vIGZvciBkaWZmZXJlbnQgZGlyZWN0aW9ucywgZS5nLiBob3Jpem9udGFsIHBhbiBidXQgdmVydGljYWwgc3dpcGU/KVxuICAgIC8vIHdlIG5lZWQgbm9uZSAoYXMgb3RoZXJ3aXNlIHdpdGggcGFuLXggcGFuLXkgY29tYmluZWQgbm9uZSBvZiB0aGVzZVxuICAgIC8vIHJlY29nbml6ZXJzIHdpbGwgd29yaywgc2luY2UgdGhlIGJyb3dzZXIgd291bGQgaGFuZGxlIGFsbCBwYW5uaW5nXG4gICAgaWYgKGhhc1BhblggJiYgaGFzUGFuWSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgLy8gcGFuLXggT1IgcGFuLXlcbiAgICBpZiAoaGFzUGFuWCB8fCBoYXNQYW5ZKSB7XG4gICAgICAgIHJldHVybiBoYXNQYW5YID8gVE9VQ0hfQUNUSU9OX1BBTl9YIDogVE9VQ0hfQUNUSU9OX1BBTl9ZO1xuICAgIH1cblxuICAgIC8vIG1hbmlwdWxhdGlvblxuICAgIGlmIChpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OKSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTjtcbiAgICB9XG5cbiAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX0FVVE87XG59XG5cbmZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uUHJvcHMoKSB7XG4gICAgaWYgKCFOQVRJVkVfVE9VQ0hfQUNUSU9OKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRvdWNoTWFwID0ge307XG4gICAgdmFyIGNzc1N1cHBvcnRzID0gd2luZG93LkNTUyAmJiB3aW5kb3cuQ1NTLnN1cHBvcnRzO1xuICAgIFsnYXV0bycsICdtYW5pcHVsYXRpb24nLCAncGFuLXknLCAncGFuLXgnLCAncGFuLXggcGFuLXknLCAnbm9uZSddLmZvckVhY2goZnVuY3Rpb24odmFsKSB7XG5cbiAgICAgICAgLy8gSWYgY3NzLnN1cHBvcnRzIGlzIG5vdCBzdXBwb3J0ZWQgYnV0IHRoZXJlIGlzIG5hdGl2ZSB0b3VjaC1hY3Rpb24gYXNzdW1lIGl0IHN1cHBvcnRzXG4gICAgICAgIC8vIGFsbCB2YWx1ZXMuIFRoaXMgaXMgdGhlIGNhc2UgZm9yIElFIDEwIGFuZCAxMS5cbiAgICAgICAgdG91Y2hNYXBbdmFsXSA9IGNzc1N1cHBvcnRzID8gd2luZG93LkNTUy5zdXBwb3J0cygndG91Y2gtYWN0aW9uJywgdmFsKSA6IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvdWNoTWFwO1xufVxuXG4vKipcbiAqIFJlY29nbml6ZXIgZmxvdyBleHBsYWluZWQ7ICpcbiAqIEFsbCByZWNvZ25pemVycyBoYXZlIHRoZSBpbml0aWFsIHN0YXRlIG9mIFBPU1NJQkxFIHdoZW4gYSBpbnB1dCBzZXNzaW9uIHN0YXJ0cy5cbiAqIFRoZSBkZWZpbml0aW9uIG9mIGEgaW5wdXQgc2Vzc2lvbiBpcyBmcm9tIHRoZSBmaXJzdCBpbnB1dCB1bnRpbCB0aGUgbGFzdCBpbnB1dCwgd2l0aCBhbGwgaXQncyBtb3ZlbWVudCBpbiBpdC4gKlxuICogRXhhbXBsZSBzZXNzaW9uIGZvciBtb3VzZS1pbnB1dDogbW91c2Vkb3duIC0+IG1vdXNlbW92ZSAtPiBtb3VzZXVwXG4gKlxuICogT24gZWFjaCByZWNvZ25pemluZyBjeWNsZSAoc2VlIE1hbmFnZXIucmVjb2duaXplKSB0aGUgLnJlY29nbml6ZSgpIG1ldGhvZCBpcyBleGVjdXRlZFxuICogd2hpY2ggZGV0ZXJtaW5lcyB3aXRoIHN0YXRlIGl0IHNob3VsZCBiZS5cbiAqXG4gKiBJZiB0aGUgcmVjb2duaXplciBoYXMgdGhlIHN0YXRlIEZBSUxFRCwgQ0FOQ0VMTEVEIG9yIFJFQ09HTklaRUQgKGVxdWFscyBFTkRFRCksIGl0IGlzIHJlc2V0IHRvXG4gKiBQT1NTSUJMRSB0byBnaXZlIGl0IGFub3RoZXIgY2hhbmdlIG9uIHRoZSBuZXh0IGN5Y2xlLlxuICpcbiAqICAgICAgICAgICAgICAgUG9zc2libGVcbiAqICAgICAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICArLS0tLS0rLS0tLS0tLS0tLS0tLS0tK1xuICogICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgICArLS0tLS0rLS0tLS0rICAgICAgICAgICAgICAgfFxuICogICAgICB8ICAgICAgICAgICB8ICAgICAgICAgICAgICAgfFxuICogICBGYWlsZWQgICAgICBDYW5jZWxsZWQgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tKy0tLS0tLStcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICBSZWNvZ25pemVkICAgICAgIEJlZ2FuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5nZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbmRlZC9SZWNvZ25pemVkXG4gKi9cbnZhciBTVEFURV9QT1NTSUJMRSA9IDE7XG52YXIgU1RBVEVfQkVHQU4gPSAyO1xudmFyIFNUQVRFX0NIQU5HRUQgPSA0O1xudmFyIFNUQVRFX0VOREVEID0gODtcbnZhciBTVEFURV9SRUNPR05JWkVEID0gU1RBVEVfRU5ERUQ7XG52YXIgU1RBVEVfQ0FOQ0VMTEVEID0gMTY7XG52YXIgU1RBVEVfRkFJTEVEID0gMzI7XG5cbi8qKlxuICogUmVjb2duaXplclxuICogRXZlcnkgcmVjb2duaXplciBuZWVkcyB0byBleHRlbmQgZnJvbSB0aGlzIGNsYXNzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBSZWNvZ25pemVyKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBhc3NpZ24oe30sIHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuXG4gICAgdGhpcy5pZCA9IHVuaXF1ZUlkKCk7XG5cbiAgICB0aGlzLm1hbmFnZXIgPSBudWxsO1xuXG4gICAgLy8gZGVmYXVsdCBpcyBlbmFibGUgdHJ1ZVxuICAgIHRoaXMub3B0aW9ucy5lbmFibGUgPSBpZlVuZGVmaW5lZCh0aGlzLm9wdGlvbnMuZW5hYmxlLCB0cnVlKTtcblxuICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcblxuICAgIHRoaXMuc2ltdWx0YW5lb3VzID0ge307XG4gICAgdGhpcy5yZXF1aXJlRmFpbCA9IFtdO1xufVxuXG5SZWNvZ25pemVyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgZGVmYXVsdHM6IHt9LFxuXG4gICAgLyoqXG4gICAgICogc2V0IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1JlY29nbml6ZXJ9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIGFsc28gdXBkYXRlIHRoZSB0b3VjaEFjdGlvbiwgaW4gY2FzZSBzb21ldGhpbmcgY2hhbmdlZCBhYm91dCB0aGUgZGlyZWN0aW9ucy9lbmFibGVkIHN0YXRlXG4gICAgICAgIHRoaXMubWFuYWdlciAmJiB0aGlzLm1hbmFnZXIudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgcmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdyZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNpbXVsdGFuZW91cyA9IHRoaXMuc2ltdWx0YW5lb3VzO1xuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGlmICghc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF0pIHtcbiAgICAgICAgICAgIHNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdID0gb3RoZXJSZWNvZ25pemVyO1xuICAgICAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlY29nbml6ZVdpdGgodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRyb3AgdGhlIHNpbXVsdGFuZW91cyBsaW5rLiBpdCBkb2VzbnQgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBkcm9wUmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVjb2duaXplV2l0aCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZWNvZ25pemVyIGNhbiBvbmx5IHJ1biB3aGVuIGFuIG90aGVyIGlzIGZhaWxpbmdcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgcmVxdWlyZUZhaWx1cmU6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVxdWlyZUZhaWwgPSB0aGlzLnJlcXVpcmVGYWlsO1xuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGlmIChpbkFycmF5KHJlcXVpcmVGYWlsLCBvdGhlclJlY29nbml6ZXIpID09PSAtMSkge1xuICAgICAgICAgICAgcmVxdWlyZUZhaWwucHVzaChvdGhlclJlY29nbml6ZXIpO1xuICAgICAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkcm9wIHRoZSByZXF1aXJlRmFpbHVyZSBsaW5rLiBpdCBkb2VzIG5vdCByZW1vdmUgdGhlIGxpbmsgb24gdGhlIG90aGVyIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIGRyb3BSZXF1aXJlRmFpbHVyZTogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIHZhciBpbmRleCA9IGluQXJyYXkodGhpcy5yZXF1aXJlRmFpbCwgb3RoZXJSZWNvZ25pemVyKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZUZhaWwuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaGFzIHJlcXVpcmUgZmFpbHVyZXMgYm9vbGVhblxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGhhc1JlcXVpcmVGYWlsdXJlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aCA+IDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGlmIHRoZSByZWNvZ25pemVyIGNhbiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgY2FuUmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFlvdSBzaG91bGQgdXNlIGB0cnlFbWl0YCBpbnN0ZWFkIG9mIGBlbWl0YCBkaXJlY3RseSB0byBjaGVja1xuICAgICAqIHRoYXQgYWxsIHRoZSBuZWVkZWQgcmVjb2duaXplcnMgaGFzIGZhaWxlZCBiZWZvcmUgZW1pdHRpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICAgICAgICAgIHNlbGYubWFuYWdlci5lbWl0KGV2ZW50LCBpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAncGFuc3RhcnQnIGFuZCAncGFubW92ZSdcbiAgICAgICAgaWYgKHN0YXRlIDwgU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50ICsgc3RhdGVTdHIoc3RhdGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50KTsgLy8gc2ltcGxlICdldmVudE5hbWUnIGV2ZW50c1xuXG4gICAgICAgIGlmIChpbnB1dC5hZGRpdGlvbmFsRXZlbnQpIHsgLy8gYWRkaXRpb25hbCBldmVudChwYW5sZWZ0LCBwYW5yaWdodCwgcGluY2hpbiwgcGluY2hvdXQuLi4pXG4gICAgICAgICAgICBlbWl0KGlucHV0LmFkZGl0aW9uYWxFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwYW5lbmQgYW5kIHBhbmNhbmNlbFxuICAgICAgICBpZiAoc3RhdGUgPj0gU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50ICsgc3RhdGVTdHIoc3RhdGUpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGF0IGFsbCB0aGUgcmVxdWlyZSBmYWlsdXJlIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQsXG4gICAgICogaWYgdHJ1ZSwgaXQgZW1pdHMgYSBnZXN0dXJlIGV2ZW50LFxuICAgICAqIG90aGVyd2lzZSwgc2V0dXAgdGhlIHN0YXRlIHRvIEZBSUxFRC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKi9cbiAgICB0cnlFbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5jYW5FbWl0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGl0J3MgZmFpbGluZyBhbnl3YXlcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FuIHdlIGVtaXQ/XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgY2FuRW1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5yZXF1aXJlRmFpbFtpXS5zdGF0ZSAmIChTVEFURV9GQUlMRUQgfCBTVEFURV9QT1NTSUJMRSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1cGRhdGUgdGhlIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgcmVjb2duaXplOiBmdW5jdGlvbihpbnB1dERhdGEpIHtcbiAgICAgICAgLy8gbWFrZSBhIG5ldyBjb3B5IG9mIHRoZSBpbnB1dERhdGFcbiAgICAgICAgLy8gc28gd2UgY2FuIGNoYW5nZSB0aGUgaW5wdXREYXRhIHdpdGhvdXQgbWVzc2luZyB1cCB0aGUgb3RoZXIgcmVjb2duaXplcnNcbiAgICAgICAgdmFyIGlucHV0RGF0YUNsb25lID0gYXNzaWduKHt9LCBpbnB1dERhdGEpO1xuXG4gICAgICAgIC8vIGlzIGlzIGVuYWJsZWQgYW5kIGFsbG93IHJlY29nbml6aW5nP1xuICAgICAgICBpZiAoIWJvb2xPckZuKHRoaXMub3B0aW9ucy5lbmFibGUsIFt0aGlzLCBpbnB1dERhdGFDbG9uZV0pKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVzZXQgd2hlbiB3ZSd2ZSByZWFjaGVkIHRoZSBlbmRcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiAoU1RBVEVfUkVDT0dOSVpFRCB8IFNUQVRFX0NBTkNFTExFRCB8IFNUQVRFX0ZBSUxFRCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByb2Nlc3MoaW5wdXREYXRhQ2xvbmUpO1xuXG4gICAgICAgIC8vIHRoZSByZWNvZ25pemVyIGhhcyByZWNvZ25pemVkIGEgZ2VzdHVyZVxuICAgICAgICAvLyBzbyB0cmlnZ2VyIGFuIGV2ZW50XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCB8IFNUQVRFX0VOREVEIHwgU1RBVEVfQ0FOQ0VMTEVEKSkge1xuICAgICAgICAgICAgdGhpcy50cnlFbWl0KGlucHV0RGF0YUNsb25lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIHN0YXRlIG9mIHRoZSByZWNvZ25pemVyXG4gICAgICogdGhlIGFjdHVhbCByZWNvZ25pemluZyBoYXBwZW5zIGluIHRoaXMgbWV0aG9kXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICogQHJldHVybnMge0NvbnN0fSBTVEFURVxuICAgICAqL1xuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0RGF0YSkgeyB9LCAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgcHJlZmVycmVkIHRvdWNoLWFjdGlvblxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqL1xuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHsgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbGxlZCB3aGVuIHRoZSBnZXN0dXJlIGlzbid0IGFsbG93ZWQgdG8gcmVjb2duaXplXG4gICAgICogbGlrZSB3aGVuIGFub3RoZXIgaXMgYmVpbmcgcmVjb2duaXplZCBvciBpdCBpcyBkaXNhYmxlZFxuICAgICAqIEB2aXJ0dWFsXG4gICAgICovXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkgeyB9XG59O1xuXG4vKipcbiAqIGdldCBhIHVzYWJsZSBzdHJpbmcsIHVzZWQgYXMgZXZlbnQgcG9zdGZpeFxuICogQHBhcmFtIHtDb25zdH0gc3RhdGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0YXRlXG4gKi9cbmZ1bmN0aW9uIHN0YXRlU3RyKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlICYgU1RBVEVfQ0FOQ0VMTEVEKSB7XG4gICAgICAgIHJldHVybiAnY2FuY2VsJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgcmV0dXJuICdlbmQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9DSEFOR0VEKSB7XG4gICAgICAgIHJldHVybiAnbW92ZSc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0JFR0FOKSB7XG4gICAgICAgIHJldHVybiAnc3RhcnQnO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogZGlyZWN0aW9uIGNvbnMgdG8gc3RyaW5nXG4gKiBAcGFyYW0ge0NvbnN0fSBkaXJlY3Rpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGRpcmVjdGlvblN0cihkaXJlY3Rpb24pIHtcbiAgICBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9ET1dOKSB7XG4gICAgICAgIHJldHVybiAnZG93bic7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX1VQKSB7XG4gICAgICAgIHJldHVybiAndXAnO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9MRUZUKSB7XG4gICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX1JJR0hUKSB7XG4gICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogZ2V0IGEgcmVjb2duaXplciBieSBuYW1lIGlmIGl0IGlzIGJvdW5kIHRvIGEgbWFuYWdlclxuICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gb3RoZXJSZWNvZ25pemVyXG4gKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcbiAqIEByZXR1cm5zIHtSZWNvZ25pemVyfVxuICovXG5mdW5jdGlvbiBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgcmVjb2duaXplcikge1xuICAgIHZhciBtYW5hZ2VyID0gcmVjb2duaXplci5tYW5hZ2VyO1xuICAgIGlmIChtYW5hZ2VyKSB7XG4gICAgICAgIHJldHVybiBtYW5hZ2VyLmdldChvdGhlclJlY29nbml6ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gb3RoZXJSZWNvZ25pemVyO1xufVxuXG4vKipcbiAqIFRoaXMgcmVjb2duaXplciBpcyBqdXN0IHVzZWQgYXMgYSBiYXNlIGZvciB0aGUgc2ltcGxlIGF0dHJpYnV0ZSByZWNvZ25pemVycy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBBdHRyUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoQXR0clJlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAgICovXG4gICAgICAgIHBvaW50ZXJzOiAxXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gY2hlY2sgaWYgaXQgdGhlIHJlY29nbml6ZXIgcmVjZWl2ZXMgdmFsaWQgaW5wdXQsIGxpa2UgaW5wdXQuZGlzdGFuY2UgPiAxMC5cbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gcmVjb2duaXplZFxuICAgICAqL1xuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9uUG9pbnRlcnMgPSB0aGlzLm9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHJldHVybiBvcHRpb25Qb2ludGVycyA9PT0gMCB8fCBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvblBvaW50ZXJzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBpbnB1dCBhbmQgcmV0dXJuIHRoZSBzdGF0ZSBmb3IgdGhlIHJlY29nbml6ZXJcbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Kn0gU3RhdGVcbiAgICAgKi9cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICB2YXIgZXZlbnRUeXBlID0gaW5wdXQuZXZlbnRUeXBlO1xuXG4gICAgICAgIHZhciBpc1JlY29nbml6ZWQgPSBzdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQpO1xuICAgICAgICB2YXIgaXNWYWxpZCA9IHRoaXMuYXR0clRlc3QoaW5wdXQpO1xuXG4gICAgICAgIC8vIG9uIGNhbmNlbCBpbnB1dCBhbmQgd2UndmUgcmVjb2duaXplZCBiZWZvcmUsIHJldHVybiBTVEFURV9DQU5DRUxMRURcbiAgICAgICAgaWYgKGlzUmVjb2duaXplZCAmJiAoZXZlbnRUeXBlICYgSU5QVVRfQ0FOQ0VMIHx8ICFpc1ZhbGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0FOQ0VMTEVEO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUmVjb2duaXplZCB8fCBpc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfRU5ERUQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEoc3RhdGUgJiBTVEFURV9CRUdBTikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DSEFOR0VEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfVxufSk7XG5cbi8qKlxuICogUGFuXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBhbmQgbW92ZWQgaW4gdGhlIGFsbG93ZWQgZGlyZWN0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQYW5SZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnBYID0gbnVsbDtcbiAgICB0aGlzLnBZID0gbnVsbDtcbn1cblxuaW5oZXJpdChQYW5SZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUGFuUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncGFuJyxcbiAgICAgICAgdGhyZXNob2xkOiAxMCxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0FMTFxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgICBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChUT1VDSF9BQ1RJT05fUEFOX1kpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChUT1VDSF9BQ1RJT05fUEFOX1gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgIH0sXG5cbiAgICBkaXJlY3Rpb25UZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdmFyIGhhc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gaW5wdXQuZGlzdGFuY2U7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBpbnB1dC5kaXJlY3Rpb247XG4gICAgICAgIHZhciB4ID0gaW5wdXQuZGVsdGFYO1xuICAgICAgICB2YXIgeSA9IGlucHV0LmRlbHRhWTtcblxuICAgICAgICAvLyBsb2NrIHRvIGF4aXM/XG4gICAgICAgIGlmICghKGRpcmVjdGlvbiAmIG9wdGlvbnMuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAoeCA9PT0gMCkgPyBESVJFQ1RJT05fTk9ORSA6ICh4IDwgMCkgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcbiAgICAgICAgICAgICAgICBoYXNNb3ZlZCA9IHggIT0gdGhpcy5wWDtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKGlucHV0LmRlbHRhWCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICh5ID09PSAwKSA/IERJUkVDVElPTl9OT05FIDogKHkgPCAwKSA/IERJUkVDVElPTl9VUCA6IERJUkVDVElPTl9ET1dOO1xuICAgICAgICAgICAgICAgIGhhc01vdmVkID0geSAhPSB0aGlzLnBZO1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnB1dC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHJldHVybiBoYXNNb3ZlZCAmJiBkaXN0YW5jZSA+IG9wdGlvbnMudGhyZXNob2xkICYmIGRpcmVjdGlvbiAmIG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIEF0dHJSZWNvZ25pemVyLnByb3RvdHlwZS5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgKHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTiB8fCAoISh0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pICYmIHRoaXMuZGlyZWN0aW9uVGVzdChpbnB1dCkpKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcblxuICAgICAgICB0aGlzLnBYID0gaW5wdXQuZGVsdGFYO1xuICAgICAgICB0aGlzLnBZID0gaW5wdXQuZGVsdGFZO1xuXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQuZGlyZWN0aW9uKTtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBpbnB1dC5hZGRpdGlvbmFsRXZlbnQgPSB0aGlzLm9wdGlvbnMuZXZlbnQgKyBkaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsIGlucHV0KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBQaW5jaFxuICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXJzIGFyZSBtb3ZpbmcgdG93YXJkICh6b29tLWluKSBvciBhd2F5IGZyb20gZWFjaCBvdGhlciAoem9vbS1vdXQpLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQaW5jaFJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChQaW5jaFJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQaW5jaFJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3BpbmNoJyxcbiAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICBwb2ludGVyczogMlxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAoTWF0aC5hYnMoaW5wdXQuc2NhbGUgLSAxKSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgfHwgdGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0LnNjYWxlICE9PSAxKSB7XG4gICAgICAgICAgICB2YXIgaW5PdXQgPSBpbnB1dC5zY2FsZSA8IDEgPyAnaW4nIDogJ291dCc7XG4gICAgICAgICAgICBpbnB1dC5hZGRpdGlvbmFsRXZlbnQgPSB0aGlzLm9wdGlvbnMuZXZlbnQgKyBpbk91dDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdXBlci5lbWl0LmNhbGwodGhpcywgaW5wdXQpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFByZXNzXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBmb3IgeCBtcyB3aXRob3V0IGFueSBtb3ZlbWVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQcmVzc1JlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbn1cblxuaW5oZXJpdChQcmVzc1JlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFByZXNzUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncHJlc3MnLFxuICAgICAgICBwb2ludGVyczogMSxcbiAgICAgICAgdGltZTogMjUxLCAvLyBtaW5pbWFsIHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgcHJlc3NlZFxuICAgICAgICB0aHJlc2hvbGQ6IDkgLy8gYSBtaW5pbWFsIG1vdmVtZW50IGlzIG9rLCBidXQga2VlcCBpdCBsb3dcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9BVVRPXTtcbiAgICB9LFxuXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHZhciB2YWxpZFBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25zLnBvaW50ZXJzO1xuICAgICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICAgIHZhciB2YWxpZFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPiBvcHRpb25zLnRpbWU7XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcblxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG4gICAgICAgIGlmICghdmFsaWRNb3ZlbWVudCB8fCAhdmFsaWRQb2ludGVycyB8fCAoaW5wdXQuZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgIXZhbGlkVGltZSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICB0aGlzLnRyeUVtaXQoKTtcbiAgICAgICAgICAgIH0sIG9wdGlvbnMudGltZSwgdGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQgJiYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkpIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArICd1cCcsIGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0LnRpbWVTdGFtcCA9IG5vdygpO1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB0aGlzLl9pbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBSb3RhdGVcbiAqIFJlY29nbml6ZWQgd2hlbiB0d28gb3IgbW9yZSBwb2ludGVyIGFyZSBtb3ZpbmcgaW4gYSBjaXJjdWxhciBtb3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFJvdGF0ZVJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChSb3RhdGVSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUm90YXRlUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncm90YXRlJyxcbiAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICBwb2ludGVyczogMlxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAoTWF0aC5hYnMoaW5wdXQucm90YXRpb24pID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCB8fCB0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFN3aXBlXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgbW92aW5nIGZhc3QgKHZlbG9jaXR5KSwgd2l0aCBlbm91Z2ggZGlzdGFuY2UgaW4gdGhlIGFsbG93ZWQgZGlyZWN0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBTd2lwZVJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChTd2lwZVJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBTd2lwZVJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3N3aXBlJyxcbiAgICAgICAgdGhyZXNob2xkOiAxMCxcbiAgICAgICAgdmVsb2NpdHk6IDAuMyxcbiAgICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTCxcbiAgICAgICAgcG9pbnRlcnM6IDFcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGFuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0VG91Y2hBY3Rpb24uY2FsbCh0aGlzKTtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgdmVsb2NpdHk7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIChESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTCkpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5O1xuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eVg7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eVk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgIGRpcmVjdGlvbiAmIGlucHV0Lm9mZnNldERpcmVjdGlvbiAmJlxuICAgICAgICAgICAgaW5wdXQuZGlzdGFuY2UgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkICYmXG4gICAgICAgICAgICBpbnB1dC5tYXhQb2ludGVycyA9PSB0aGlzLm9wdGlvbnMucG9pbnRlcnMgJiZcbiAgICAgICAgICAgIGFicyh2ZWxvY2l0eSkgPiB0aGlzLm9wdGlvbnMudmVsb2NpdHkgJiYgaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uU3RyKGlucHV0Lm9mZnNldERpcmVjdGlvbik7XG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbiwgaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCBpbnB1dCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQSB0YXAgaXMgZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG9pbmcgYSBzbWFsbCB0YXAvY2xpY2suIE11bHRpcGxlIHRhcHMgYXJlIHJlY29nbml6ZWQgaWYgdGhleSBvY2N1clxuICogYmV0d2VlbiB0aGUgZ2l2ZW4gaW50ZXJ2YWwgYW5kIHBvc2l0aW9uLiBUaGUgZGVsYXkgb3B0aW9uIGNhbiBiZSB1c2VkIHRvIHJlY29nbml6ZSBtdWx0aS10YXBzIHdpdGhvdXQgZmlyaW5nXG4gKiBhIHNpbmdsZSB0YXAuXG4gKlxuICogVGhlIGV2ZW50RGF0YSBmcm9tIHRoZSBlbWl0dGVkIGV2ZW50IGNvbnRhaW5zIHRoZSBwcm9wZXJ0eSBgdGFwQ291bnRgLCB3aGljaCBjb250YWlucyB0aGUgYW1vdW50IG9mXG4gKiBtdWx0aS10YXBzIGJlaW5nIHJlY29nbml6ZWQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gVGFwUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyBwcmV2aW91cyB0aW1lIGFuZCBjZW50ZXIsXG4gICAgLy8gdXNlZCBmb3IgdGFwIGNvdW50aW5nXG4gICAgdGhpcy5wVGltZSA9IGZhbHNlO1xuICAgIHRoaXMucENlbnRlciA9IGZhbHNlO1xuXG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbn1cblxuaW5oZXJpdChUYXBSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQaW5jaFJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3RhcCcsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICB0YXBzOiAxLFxuICAgICAgICBpbnRlcnZhbDogMzAwLCAvLyBtYXggdGltZSBiZXR3ZWVuIHRoZSBtdWx0aS10YXAgdGFwc1xuICAgICAgICB0aW1lOiAyNTAsIC8vIG1heCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIGRvd24gKGxpa2UgZmluZ2VyIG9uIHRoZSBzY3JlZW4pXG4gICAgICAgIHRocmVzaG9sZDogOSwgLy8gYSBtaW5pbWFsIG1vdmVtZW50IGlzIG9rLCBidXQga2VlcCBpdCBsb3dcbiAgICAgICAgcG9zVGhyZXNob2xkOiAxMCAvLyBhIG11bHRpLXRhcCBjYW4gYmUgYSBiaXQgb2ZmIHRoZSBpbml0aWFsIHBvc2l0aW9uXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OXTtcbiAgICB9LFxuXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHZhciB2YWxpZE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCBvcHRpb25zLnRocmVzaG9sZDtcbiAgICAgICAgdmFyIHZhbGlkVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgb3B0aW9ucy50aW1lO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgICBpZiAoKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSAmJiAodGhpcy5jb3VudCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG4gICAgICAgIGlmICh2YWxpZE1vdmVtZW50ICYmIHZhbGlkVG91Y2hUaW1lICYmIHZhbGlkUG9pbnRlcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5ldmVudFR5cGUgIT0gSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHZhbGlkSW50ZXJ2YWwgPSB0aGlzLnBUaW1lID8gKGlucHV0LnRpbWVTdGFtcCAtIHRoaXMucFRpbWUgPCBvcHRpb25zLmludGVydmFsKSA6IHRydWU7XG4gICAgICAgICAgICB2YXIgdmFsaWRNdWx0aVRhcCA9ICF0aGlzLnBDZW50ZXIgfHwgZ2V0RGlzdGFuY2UodGhpcy5wQ2VudGVyLCBpbnB1dC5jZW50ZXIpIDwgb3B0aW9ucy5wb3NUaHJlc2hvbGQ7XG5cbiAgICAgICAgICAgIHRoaXMucFRpbWUgPSBpbnB1dC50aW1lU3RhbXA7XG4gICAgICAgICAgICB0aGlzLnBDZW50ZXIgPSBpbnB1dC5jZW50ZXI7XG5cbiAgICAgICAgICAgIGlmICghdmFsaWRNdWx0aVRhcCB8fCAhdmFsaWRJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ICs9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgICAgIC8vIGlmIHRhcCBjb3VudCBtYXRjaGVzIHdlIGhhdmUgcmVjb2duaXplZCBpdCxcbiAgICAgICAgICAgIC8vIGVsc2UgaXQgaGFzIGJlZ2FuIHJlY29nbml6aW5nLi4uXG4gICAgICAgICAgICB2YXIgdGFwQ291bnQgPSB0aGlzLmNvdW50ICUgb3B0aW9ucy50YXBzO1xuICAgICAgICAgICAgaWYgKHRhcENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gZmFpbGluZyByZXF1aXJlbWVudHMsIGltbWVkaWF0ZWx5IHRyaWdnZXIgdGhlIHRhcCBldmVudFxuICAgICAgICAgICAgICAgIC8vIG9yIHdhaXQgYXMgbG9uZyBhcyB0aGUgbXVsdGl0YXAgaW50ZXJ2YWwgdG8gdHJpZ2dlclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5oYXNSZXF1aXJlRmFpbHVyZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeUVtaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucy5pbnRlcnZhbCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgZmFpbFRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLmludGVydmFsLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT0gU1RBVEVfUkVDT0dOSVpFRCkge1xuICAgICAgICAgICAgdGhpcy5faW5wdXQudGFwQ291bnQgPSB0aGlzLmNvdW50O1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB0aGlzLl9pbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBTaW1wbGUgd2F5IHRvIGNyZWF0ZSBhIG1hbmFnZXIgd2l0aCBhIGRlZmF1bHQgc2V0IG9mIHJlY29nbml6ZXJzLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEhhbW1lcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5yZWNvZ25pemVycyA9IGlmVW5kZWZpbmVkKG9wdGlvbnMucmVjb2duaXplcnMsIEhhbW1lci5kZWZhdWx0cy5wcmVzZXQpO1xuICAgIHJldHVybiBuZXcgTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuSGFtbWVyLlZFUlNJT04gPSAnMi4wLjcnO1xuXG4vKipcbiAqIGRlZmF1bHQgc2V0dGluZ3NcbiAqIEBuYW1lc3BhY2VcbiAqL1xuSGFtbWVyLmRlZmF1bHRzID0ge1xuICAgIC8qKlxuICAgICAqIHNldCBpZiBET00gZXZlbnRzIGFyZSBiZWluZyB0cmlnZ2VyZWQuXG4gICAgICogQnV0IHRoaXMgaXMgc2xvd2VyIGFuZCB1bnVzZWQgYnkgc2ltcGxlIGltcGxlbWVudGF0aW9ucywgc28gZGlzYWJsZWQgYnkgZGVmYXVsdC5cbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGRvbUV2ZW50czogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgZm9yIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eS9mYWxsYmFjay5cbiAgICAgKiBXaGVuIHNldCB0byBgY29tcHV0ZWAgaXQgd2lsbCBtYWdpY2FsbHkgc2V0IHRoZSBjb3JyZWN0IHZhbHVlIGJhc2VkIG9uIHRoZSBhZGRlZCByZWNvZ25pemVycy5cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBkZWZhdWx0IGNvbXB1dGVcbiAgICAgKi9cbiAgICB0b3VjaEFjdGlvbjogVE9VQ0hfQUNUSU9OX0NPTVBVVEUsXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZW5hYmxlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRVhQRVJJTUVOVEFMIEZFQVRVUkUgLS0gY2FuIGJlIHJlbW92ZWQvY2hhbmdlZFxuICAgICAqIENoYW5nZSB0aGUgcGFyZW50IGlucHV0IHRhcmdldCBlbGVtZW50LlxuICAgICAqIElmIE51bGwsIHRoZW4gaXQgaXMgYmVpbmcgc2V0IHRoZSB0byBtYWluIGVsZW1lbnQuXG4gICAgICogQHR5cGUge051bGx8RXZlbnRUYXJnZXR9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGlucHV0VGFyZ2V0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogZm9yY2UgYW4gaW5wdXQgY2xhc3NcbiAgICAgKiBAdHlwZSB7TnVsbHxGdW5jdGlvbn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaW5wdXRDbGFzczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgcmVjb2duaXplciBzZXR1cCB3aGVuIGNhbGxpbmcgYEhhbW1lcigpYFxuICAgICAqIFdoZW4gY3JlYXRpbmcgYSBuZXcgTWFuYWdlciB0aGVzZSB3aWxsIGJlIHNraXBwZWQuXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHByZXNldDogW1xuICAgICAgICAvLyBSZWNvZ25pemVyQ2xhc3MsIG9wdGlvbnMsIFtyZWNvZ25pemVXaXRoLCAuLi5dLCBbcmVxdWlyZUZhaWx1cmUsIC4uLl1cbiAgICAgICAgW1JvdGF0ZVJlY29nbml6ZXIsIHtlbmFibGU6IGZhbHNlfV0sXG4gICAgICAgIFtQaW5jaFJlY29nbml6ZXIsIHtlbmFibGU6IGZhbHNlfSwgWydyb3RhdGUnXV0sXG4gICAgICAgIFtTd2lwZVJlY29nbml6ZXIsIHtkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMfV0sXG4gICAgICAgIFtQYW5SZWNvZ25pemVyLCB7ZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTH0sIFsnc3dpcGUnXV0sXG4gICAgICAgIFtUYXBSZWNvZ25pemVyXSxcbiAgICAgICAgW1RhcFJlY29nbml6ZXIsIHtldmVudDogJ2RvdWJsZXRhcCcsIHRhcHM6IDJ9LCBbJ3RhcCddXSxcbiAgICAgICAgW1ByZXNzUmVjb2duaXplcl1cbiAgICBdLFxuXG4gICAgLyoqXG4gICAgICogU29tZSBDU1MgcHJvcGVydGllcyBjYW4gYmUgdXNlZCB0byBpbXByb3ZlIHRoZSB3b3JraW5nIG9mIEhhbW1lci5cbiAgICAgKiBBZGQgdGhlbSB0byB0aGlzIG1ldGhvZCBhbmQgdGhleSB3aWxsIGJlIHNldCB3aGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIuXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuICAgIGNzc1Byb3BzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlcyB0ZXh0IHNlbGVjdGlvbiB0byBpbXByb3ZlIHRoZSBkcmFnZ2luZyBnZXN0dXJlLiBNYWlubHkgZm9yIGRlc2t0b3AgYnJvd3NlcnMuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlIHRoZSBXaW5kb3dzIFBob25lIGdyaXBwZXJzIHdoZW4gcHJlc3NpbmcgYW4gZWxlbWVudC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB0b3VjaFNlbGVjdDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlcyB0aGUgZGVmYXVsdCBjYWxsb3V0IHNob3duIHdoZW4geW91IHRvdWNoIGFuZCBob2xkIGEgdG91Y2ggdGFyZ2V0LlxuICAgICAgICAgKiBPbiBpT1MsIHdoZW4geW91IHRvdWNoIGFuZCBob2xkIGEgdG91Y2ggdGFyZ2V0IHN1Y2ggYXMgYSBsaW5rLCBTYWZhcmkgZGlzcGxheXNcbiAgICAgICAgICogYSBjYWxsb3V0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxpbmsuIFRoaXMgcHJvcGVydHkgYWxsb3dzIHlvdSB0byBkaXNhYmxlIHRoYXQgY2FsbG91dC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB0b3VjaENhbGxvdXQ6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHdoZXRoZXIgem9vbWluZyBpcyBlbmFibGVkLiBVc2VkIGJ5IElFMTA+XG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgY29udGVudFpvb21pbmc6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHRoYXQgYW4gZW50aXJlIGVsZW1lbnQgc2hvdWxkIGJlIGRyYWdnYWJsZSBpbnN0ZWFkIG9mIGl0cyBjb250ZW50cy4gTWFpbmx5IGZvciBkZXNrdG9wIGJyb3dzZXJzLlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHVzZXJEcmFnOiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE92ZXJyaWRlcyB0aGUgaGlnaGxpZ2h0IGNvbG9yIHNob3duIHdoZW4gdGhlIHVzZXIgdGFwcyBhIGxpbmsgb3IgYSBKYXZhU2NyaXB0XG4gICAgICAgICAqIGNsaWNrYWJsZSBlbGVtZW50IGluIGlPUy4gVGhpcyBwcm9wZXJ0eSBvYmV5cyB0aGUgYWxwaGEgdmFsdWUsIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ3JnYmEoMCwwLDAsMCknXG4gICAgICAgICAqL1xuICAgICAgICB0YXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknXG4gICAgfVxufTtcblxudmFyIFNUT1AgPSAxO1xudmFyIEZPUkNFRF9TVE9QID0gMjtcblxuLyoqXG4gKiBNYW5hZ2VyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gYXNzaWduKHt9LCBIYW1tZXIuZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuXG4gICAgdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0ID0gdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0IHx8IGVsZW1lbnQ7XG5cbiAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgdGhpcy5yZWNvZ25pemVycyA9IFtdO1xuICAgIHRoaXMub2xkQ3NzUHJvcHMgPSB7fTtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pbnB1dCA9IGNyZWF0ZUlucHV0SW5zdGFuY2UodGhpcyk7XG4gICAgdGhpcy50b3VjaEFjdGlvbiA9IG5ldyBUb3VjaEFjdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xuXG4gICAgdG9nZ2xlQ3NzUHJvcHModGhpcywgdHJ1ZSk7XG5cbiAgICBlYWNoKHRoaXMub3B0aW9ucy5yZWNvZ25pemVycywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgcmVjb2duaXplciA9IHRoaXMuYWRkKG5ldyAoaXRlbVswXSkoaXRlbVsxXSkpO1xuICAgICAgICBpdGVtWzJdICYmIHJlY29nbml6ZXIucmVjb2duaXplV2l0aChpdGVtWzJdKTtcbiAgICAgICAgaXRlbVszXSAmJiByZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKGl0ZW1bM10pO1xuICAgIH0sIHRoaXMpO1xufVxuXG5NYW5hZ2VyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzZXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybnMge01hbmFnZXJ9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIE9wdGlvbnMgdGhhdCBuZWVkIGEgbGl0dGxlIG1vcmUgc2V0dXBcbiAgICAgICAgaWYgKG9wdGlvbnMudG91Y2hBY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5wdXRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIGV4aXN0aW5nIGV2ZW50IGxpc3RlbmVycyBhbmQgcmVpbml0aWFsaXplXG4gICAgICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQudGFyZ2V0ID0gb3B0aW9ucy5pbnB1dFRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuaW5pdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBzdG9wIHJlY29nbml6aW5nIGZvciB0aGlzIHNlc3Npb24uXG4gICAgICogVGhpcyBzZXNzaW9uIHdpbGwgYmUgZGlzY2FyZGVkLCB3aGVuIGEgbmV3IFtpbnB1dF1zdGFydCBldmVudCBpcyBmaXJlZC5cbiAgICAgKiBXaGVuIGZvcmNlZCwgdGhlIHJlY29nbml6ZXIgY3ljbGUgaXMgc3RvcHBlZCBpbW1lZGlhdGVseS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmb3JjZV1cbiAgICAgKi9cbiAgICBzdG9wOiBmdW5jdGlvbihmb3JjZSkge1xuICAgICAgICB0aGlzLnNlc3Npb24uc3RvcHBlZCA9IGZvcmNlID8gRk9SQ0VEX1NUT1AgOiBTVE9QO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBydW4gdGhlIHJlY29nbml6ZXJzIVxuICAgICAqIGNhbGxlZCBieSB0aGUgaW5wdXRIYW5kbGVyIGZ1bmN0aW9uIG9uIGV2ZXJ5IG1vdmVtZW50IG9mIHRoZSBwb2ludGVycyAodG91Y2hlcylcbiAgICAgKiBpdCB3YWxrcyB0aHJvdWdoIGFsbCB0aGUgcmVjb2duaXplcnMgYW5kIHRyaWVzIHRvIGRldGVjdCB0aGUgZ2VzdHVyZSB0aGF0IGlzIGJlaW5nIG1hZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgcmVjb2duaXplOiBmdW5jdGlvbihpbnB1dERhdGEpIHtcbiAgICAgICAgdmFyIHNlc3Npb24gPSB0aGlzLnNlc3Npb247XG4gICAgICAgIGlmIChzZXNzaW9uLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJ1biB0aGUgdG91Y2gtYWN0aW9uIHBvbHlmaWxsXG4gICAgICAgIHRoaXMudG91Y2hBY3Rpb24ucHJldmVudERlZmF1bHRzKGlucHV0RGF0YSk7XG5cbiAgICAgICAgdmFyIHJlY29nbml6ZXI7XG4gICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG5cbiAgICAgICAgLy8gdGhpcyBob2xkcyB0aGUgcmVjb2duaXplciB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICAgIC8vIHNvIHRoZSByZWNvZ25pemVyJ3Mgc3RhdGUgbmVlZHMgdG8gYmUgQkVHQU4sIENIQU5HRUQsIEVOREVEIG9yIFJFQ09HTklaRURcbiAgICAgICAgLy8gaWYgbm8gcmVjb2duaXplciBpcyBkZXRlY3RpbmcgYSB0aGluZywgaXQgaXMgc2V0IHRvIGBudWxsYFxuICAgICAgICB2YXIgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplcjtcblxuICAgICAgICAvLyByZXNldCB3aGVuIHRoZSBsYXN0IHJlY29nbml6ZXIgaXMgcmVjb2duaXplZFxuICAgICAgICAvLyBvciB3aGVuIHdlJ3JlIGluIGEgbmV3IHNlc3Npb25cbiAgICAgICAgaWYgKCFjdXJSZWNvZ25pemVyIHx8IChjdXJSZWNvZ25pemVyICYmIGN1clJlY29nbml6ZXIuc3RhdGUgJiBTVEFURV9SRUNPR05JWkVEKSkge1xuICAgICAgICAgICAgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgcmVjb2duaXplcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZWNvZ25pemVyID0gcmVjb2duaXplcnNbaV07XG5cbiAgICAgICAgICAgIC8vIGZpbmQgb3V0IGlmIHdlIGFyZSBhbGxvd2VkIHRyeSB0byByZWNvZ25pemUgdGhlIGlucHV0IGZvciB0aGlzIG9uZS5cbiAgICAgICAgICAgIC8vIDEuICAgYWxsb3cgaWYgdGhlIHNlc3Npb24gaXMgTk9UIGZvcmNlZCBzdG9wcGVkIChzZWUgdGhlIC5zdG9wKCkgbWV0aG9kKVxuICAgICAgICAgICAgLy8gMi4gICBhbGxvdyBpZiB3ZSBzdGlsbCBoYXZlbid0IHJlY29nbml6ZWQgYSBnZXN0dXJlIGluIHRoaXMgc2Vzc2lvbiwgb3IgdGhlIHRoaXMgcmVjb2duaXplciBpcyB0aGUgb25lXG4gICAgICAgICAgICAvLyAgICAgIHRoYXQgaXMgYmVpbmcgcmVjb2duaXplZC5cbiAgICAgICAgICAgIC8vIDMuICAgYWxsb3cgaWYgdGhlIHJlY29nbml6ZXIgaXMgYWxsb3dlZCB0byBydW4gc2ltdWx0YW5lb3VzIHdpdGggdGhlIGN1cnJlbnQgcmVjb2duaXplZCByZWNvZ25pemVyLlxuICAgICAgICAgICAgLy8gICAgICB0aGlzIGNhbiBiZSBzZXR1cCB3aXRoIHRoZSBgcmVjb2duaXplV2l0aCgpYCBtZXRob2Qgb24gdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkICE9PSBGT1JDRURfU1RPUCAmJiAoIC8vIDFcbiAgICAgICAgICAgICAgICAgICAgIWN1clJlY29nbml6ZXIgfHwgcmVjb2duaXplciA9PSBjdXJSZWNvZ25pemVyIHx8IC8vIDJcbiAgICAgICAgICAgICAgICAgICAgcmVjb2duaXplci5jYW5SZWNvZ25pemVXaXRoKGN1clJlY29nbml6ZXIpKSkgeyAvLyAzXG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZWNvZ25pemUoaW5wdXREYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZXNldCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGUgcmVjb2duaXplciBoYXMgYmVlbiByZWNvZ25pemluZyB0aGUgaW5wdXQgYXMgYSB2YWxpZCBnZXN0dXJlLCB3ZSB3YW50IHRvIHN0b3JlIHRoaXMgb25lIGFzIHRoZVxuICAgICAgICAgICAgLy8gY3VycmVudCBhY3RpdmUgcmVjb2duaXplci4gYnV0IG9ubHkgaWYgd2UgZG9uJ3QgYWxyZWFkeSBoYXZlIGFuIGFjdGl2ZSByZWNvZ25pemVyXG4gICAgICAgICAgICBpZiAoIWN1clJlY29nbml6ZXIgJiYgcmVjb2duaXplci5zdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQgfCBTVEFURV9FTkRFRCkpIHtcbiAgICAgICAgICAgICAgICBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyID0gcmVjb2duaXplcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgYSByZWNvZ25pemVyIGJ5IGl0cyBldmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxOdWxsfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAocmVjb2duaXplciBpbnN0YW5jZW9mIFJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNvZ25pemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHJlY29nbml6ZXJzW2ldLm9wdGlvbnMuZXZlbnQgPT0gcmVjb2duaXplcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYWRkIGEgcmVjb2duaXplciB0byB0aGUgbWFuYWdlclxuICAgICAqIGV4aXN0aW5nIHJlY29nbml6ZXJzIHdpdGggdGhlIHNhbWUgZXZlbnQgbmFtZSB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxNYW5hZ2VyfVxuICAgICAqL1xuICAgIGFkZDogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ2FkZCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBleGlzdGluZ1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldChyZWNvZ25pemVyLm9wdGlvbnMuZXZlbnQpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGV4aXN0aW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVjb2duaXplcnMucHVzaChyZWNvZ25pemVyKTtcbiAgICAgICAgcmVjb2duaXplci5tYW5hZ2VyID0gdGhpcztcblxuICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gcmVjb2duaXplcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGEgcmVjb2duaXplciBieSBuYW1lIG9yIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxuICAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ3JlbW92ZScsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlY29nbml6ZXIgPSB0aGlzLmdldChyZWNvZ25pemVyKTtcblxuICAgICAgICAvLyBsZXQncyBtYWtlIHN1cmUgdGhpcyByZWNvZ25pemVyIGV4aXN0c1xuICAgICAgICBpZiAocmVjb2duaXplcikge1xuICAgICAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGluQXJyYXkocmVjb2duaXplcnMsIHJlY29nbml6ZXIpO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmVjb2duaXplcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGJpbmQgZXZlbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgICAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBvbjogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXJzW2V2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuYmluZCBldmVudCwgbGVhdmUgZW1pdCBibGFuayB0byByZW1vdmUgYWxsIGhhbmRsZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtoYW5kbGVyXVxuICAgICAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoYW5kbGVyc1tldmVudF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XSAmJiBoYW5kbGVyc1tldmVudF0uc3BsaWNlKGluQXJyYXkoaGFuZGxlcnNbZXZlbnRdLCBoYW5kbGVyKSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZW1pdCBldmVudCB0byB0aGUgbGlzdGVuZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBlbWl0OiBmdW5jdGlvbihldmVudCwgZGF0YSkge1xuICAgICAgICAvLyB3ZSBhbHNvIHdhbnQgdG8gdHJpZ2dlciBkb20gZXZlbnRzXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZG9tRXZlbnRzKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRG9tRXZlbnQoZXZlbnQsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm8gaGFuZGxlcnMsIHNvIHNraXAgaXQgYWxsXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNbZXZlbnRdICYmIHRoaXMuaGFuZGxlcnNbZXZlbnRdLnNsaWNlKCk7XG4gICAgICAgIGlmICghaGFuZGxlcnMgfHwgIWhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YS50eXBlID0gZXZlbnQ7XG4gICAgICAgIGRhdGEucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRhdGEuc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBoYW5kbGVyc1tpXShkYXRhKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkZXN0cm95IHRoZSBtYW5hZ2VyIGFuZCB1bmJpbmRzIGFsbCBldmVudHNcbiAgICAgKiBpdCBkb2Vzbid0IHVuYmluZCBkb20gZXZlbnRzLCB0aGF0IGlzIHRoZSB1c2VyIG93biByZXNwb25zaWJpbGl0eVxuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgJiYgdG9nZ2xlQ3NzUHJvcHModGhpcywgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICogYWRkL3JlbW92ZSB0aGUgY3NzIHByb3BlcnRpZXMgYXMgZGVmaW5lZCBpbiBtYW5hZ2VyLm9wdGlvbnMuY3NzUHJvcHNcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtCb29sZWFufSBhZGRcbiAqL1xuZnVuY3Rpb24gdG9nZ2xlQ3NzUHJvcHMobWFuYWdlciwgYWRkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgaWYgKCFlbGVtZW50LnN0eWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHByb3A7XG4gICAgZWFjaChtYW5hZ2VyLm9wdGlvbnMuY3NzUHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHByb3AgPSBwcmVmaXhlZChlbGVtZW50LnN0eWxlLCBuYW1lKTtcbiAgICAgICAgaWYgKGFkZCkge1xuICAgICAgICAgICAgbWFuYWdlci5vbGRDc3NQcm9wc1twcm9wXSA9IGVsZW1lbnQuc3R5bGVbcHJvcF07XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gbWFuYWdlci5vbGRDc3NQcm9wc1twcm9wXSB8fCAnJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghYWRkKSB7XG4gICAgICAgIG1hbmFnZXIub2xkQ3NzUHJvcHMgPSB7fTtcbiAgICB9XG59XG5cbi8qKlxuICogdHJpZ2dlciBkb20gZXZlbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlckRvbUV2ZW50KGV2ZW50LCBkYXRhKSB7XG4gICAgdmFyIGdlc3R1cmVFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGdlc3R1cmVFdmVudC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgIGdlc3R1cmVFdmVudC5nZXN0dXJlID0gZGF0YTtcbiAgICBkYXRhLnRhcmdldC5kaXNwYXRjaEV2ZW50KGdlc3R1cmVFdmVudCk7XG59XG5cbmFzc2lnbihIYW1tZXIsIHtcbiAgICBJTlBVVF9TVEFSVDogSU5QVVRfU1RBUlQsXG4gICAgSU5QVVRfTU9WRTogSU5QVVRfTU9WRSxcbiAgICBJTlBVVF9FTkQ6IElOUFVUX0VORCxcbiAgICBJTlBVVF9DQU5DRUw6IElOUFVUX0NBTkNFTCxcblxuICAgIFNUQVRFX1BPU1NJQkxFOiBTVEFURV9QT1NTSUJMRSxcbiAgICBTVEFURV9CRUdBTjogU1RBVEVfQkVHQU4sXG4gICAgU1RBVEVfQ0hBTkdFRDogU1RBVEVfQ0hBTkdFRCxcbiAgICBTVEFURV9FTkRFRDogU1RBVEVfRU5ERUQsXG4gICAgU1RBVEVfUkVDT0dOSVpFRDogU1RBVEVfUkVDT0dOSVpFRCxcbiAgICBTVEFURV9DQU5DRUxMRUQ6IFNUQVRFX0NBTkNFTExFRCxcbiAgICBTVEFURV9GQUlMRUQ6IFNUQVRFX0ZBSUxFRCxcblxuICAgIERJUkVDVElPTl9OT05FOiBESVJFQ1RJT05fTk9ORSxcbiAgICBESVJFQ1RJT05fTEVGVDogRElSRUNUSU9OX0xFRlQsXG4gICAgRElSRUNUSU9OX1JJR0hUOiBESVJFQ1RJT05fUklHSFQsXG4gICAgRElSRUNUSU9OX1VQOiBESVJFQ1RJT05fVVAsXG4gICAgRElSRUNUSU9OX0RPV046IERJUkVDVElPTl9ET1dOLFxuICAgIERJUkVDVElPTl9IT1JJWk9OVEFMOiBESVJFQ1RJT05fSE9SSVpPTlRBTCxcbiAgICBESVJFQ1RJT05fVkVSVElDQUw6IERJUkVDVElPTl9WRVJUSUNBTCxcbiAgICBESVJFQ1RJT05fQUxMOiBESVJFQ1RJT05fQUxMLFxuXG4gICAgTWFuYWdlcjogTWFuYWdlcixcbiAgICBJbnB1dDogSW5wdXQsXG4gICAgVG91Y2hBY3Rpb246IFRvdWNoQWN0aW9uLFxuXG4gICAgVG91Y2hJbnB1dDogVG91Y2hJbnB1dCxcbiAgICBNb3VzZUlucHV0OiBNb3VzZUlucHV0LFxuICAgIFBvaW50ZXJFdmVudElucHV0OiBQb2ludGVyRXZlbnRJbnB1dCxcbiAgICBUb3VjaE1vdXNlSW5wdXQ6IFRvdWNoTW91c2VJbnB1dCxcbiAgICBTaW5nbGVUb3VjaElucHV0OiBTaW5nbGVUb3VjaElucHV0LFxuXG4gICAgUmVjb2duaXplcjogUmVjb2duaXplcixcbiAgICBBdHRyUmVjb2duaXplcjogQXR0clJlY29nbml6ZXIsXG4gICAgVGFwOiBUYXBSZWNvZ25pemVyLFxuICAgIFBhbjogUGFuUmVjb2duaXplcixcbiAgICBTd2lwZTogU3dpcGVSZWNvZ25pemVyLFxuICAgIFBpbmNoOiBQaW5jaFJlY29nbml6ZXIsXG4gICAgUm90YXRlOiBSb3RhdGVSZWNvZ25pemVyLFxuICAgIFByZXNzOiBQcmVzc1JlY29nbml6ZXIsXG5cbiAgICBvbjogYWRkRXZlbnRMaXN0ZW5lcnMsXG4gICAgb2ZmOiByZW1vdmVFdmVudExpc3RlbmVycyxcbiAgICBlYWNoOiBlYWNoLFxuICAgIG1lcmdlOiBtZXJnZSxcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBpbmhlcml0OiBpbmhlcml0LFxuICAgIGJpbmRGbjogYmluZEZuLFxuICAgIHByZWZpeGVkOiBwcmVmaXhlZFxufSk7XG5cbi8vIHRoaXMgcHJldmVudHMgZXJyb3JzIHdoZW4gSGFtbWVyIGlzIGxvYWRlZCBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EXG4vLyAgc3R5bGUgbG9hZGVyIGJ1dCBieSBzY3JpcHQgdGFnLCBub3QgYnkgdGhlIGxvYWRlci5cbnZhciBmcmVlR2xvYmFsID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fSkpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbmZyZWVHbG9iYWwuSGFtbWVyID0gSGFtbWVyO1xuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gSGFtbWVyO1xuICAgIH0pO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBIYW1tZXI7XG59IGVsc2Uge1xuICAgIHdpbmRvd1tleHBvcnROYW1lXSA9IEhhbW1lcjtcbn1cblxufSkod2luZG93LCBkb2N1bWVudCwgJ0hhbW1lcicpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwidmFyIENlbGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2VsbChncmlkRWxlbWVudCwgeCwgeSkge1xuICAgICAgICB0aGlzLmxpbmtlZFRpbGUgPSBudWxsO1xuICAgICAgICB0aGlzLmxpbmtlZFRpbGVGb3JNZXJnZSA9IG51bGw7XG4gICAgICAgIHZhciBjZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnY2VsbCcpO1xuICAgICAgICBncmlkRWxlbWVudC5hcHBlbmQoY2VsbCk7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxuICAgIENlbGwucHJvdG90eXBlLmxpbmtUaWxlID0gZnVuY3Rpb24gKHRpbGUpIHtcbiAgICAgICAgdGlsZS5zZXRYWSh0aGlzLngsIHRoaXMueSk7XG4gICAgICAgIHRoaXMubGlua2VkVGlsZSA9IHRpbGU7XG4gICAgfTtcbiAgICBDZWxsLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMubGlua2VkVGlsZTtcbiAgICB9O1xuICAgIENlbGwucHJvdG90eXBlLnVubGlua1RpbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGlua2VkVGlsZSA9IG51bGw7XG4gICAgfTtcbiAgICBDZWxsLnByb3RvdHlwZS51bmxpbmtUaWxlRm9yTWVyZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGlua2VkVGlsZUZvck1lcmdlID0gbnVsbDtcbiAgICB9O1xuICAgIENlbGwucHJvdG90eXBlLmxpbmtUaWxlRm9yTWVyZ2UgPSBmdW5jdGlvbiAodGlsZSkge1xuICAgICAgICB0aWxlLnNldFhZKHRoaXMueCwgdGhpcy55KTtcbiAgICAgICAgdGhpcy5saW5rZWRUaWxlRm9yTWVyZ2UgPSB0aWxlO1xuICAgIH07XG4gICAgQ2VsbC5wcm90b3R5cGUuaGFzVGlsZUZvck1lcmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLmxpbmtlZFRpbGVGb3JNZXJnZTtcbiAgICB9O1xuICAgIENlbGwucHJvdG90eXBlLmNhbkFjY2VwdCA9IGZ1bmN0aW9uIChuZXdUaWxlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuICh0aGlzLmlzRW1wdHkoKSB8fCAoIXRoaXMuaGFzVGlsZUZvck1lcmdlKCkgJiYgKChfYSA9IHRoaXMubGlua2VkVGlsZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnZhbHVlKSA9PT0gbmV3VGlsZS52YWx1ZSkpO1xuICAgIH07XG4gICAgQ2VsbC5wcm90b3R5cGUubWVyZ2VUaWxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIChfYSA9IHRoaXMubGlua2VkVGlsZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldFZhbHVlKHRoaXMubGlua2VkVGlsZS52YWx1ZSArIE51bWJlcigoX2IgPSB0aGlzLmxpbmtlZFRpbGVGb3JNZXJnZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnZhbHVlKSk7XG4gICAgICAgIChfYyA9IHRoaXMubGlua2VkVGlsZUZvck1lcmdlKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MucmVtb3ZlRnJvbURvbSgpO1xuICAgICAgICB0aGlzLnVubGlua1RpbGVGb3JNZXJnZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIENlbGw7XG59KCkpO1xuZXhwb3J0IHsgQ2VsbCB9O1xuIiwidmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuaW1wb3J0IHsgQ2VsbCB9IGZyb20gJy4vY2VsbCc7XG52YXIgR3JpZCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHcmlkKGdyaWRFbGVtZW50LCBjb3VudENlbGxzKSB7XG4gICAgICAgIGdyaWRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLWNlbGwtY291bnQnLCBjb3VudENlbGxzLnRvU3RyaW5nKCkpO1xuICAgICAgICB0aGlzLmNlbGxzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5wb3coY291bnRDZWxscywgMik7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jZWxscy5wdXNoKG5ldyBDZWxsKGdyaWRFbGVtZW50LCBpICUgY291bnRDZWxscywgTWF0aC5mbG9vcihpIC8gY291bnRDZWxscykpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNlbGxzR3JvdXBlZEJ5Q29sdW1uID0gdGhpcy5jZWxsc0dyb3VwZUJ5Q29sdW1uKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzLmNlbGxzR3JvdXBlZEJ5Q29sdW1uOicsIHRoaXMuY2VsbHNHcm91cGVkQnlDb2x1bW4pO1xuICAgICAgICB0aGlzLmNlbGxzR3JvdXBlZEJ5UmV2ZXJzZWRDb2x1bW4gPSB0aGlzLmNlbGxzR3JvdXBlZEJ5Q29sdW1uLm1hcChmdW5jdGlvbiAoY29sdW1uKSB7XG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRBcnJheShbXSwgY29sdW1uLCB0cnVlKS5yZXZlcnNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNlbGxzR3JvdXBlZEJ5Um93ID0gdGhpcy5jZWxsc0dyb3VwZUJ5Um93KCk7XG4gICAgICAgIHRoaXMuY2VsbHNHcm91cGVkQnlSZXZlcnNlZFJvdyA9IHRoaXMuY2VsbHNHcm91cGVkQnlSb3cubWFwKGZ1bmN0aW9uIChyb3cpIHsgcmV0dXJuIF9fc3ByZWFkQXJyYXkoW10sIHJvdywgdHJ1ZSkucmV2ZXJzZSgpOyB9KTtcbiAgICB9XG4gICAgR3JpZC5wcm90b3R5cGUuZ2V0UmFuZG9tRW1wdHlDZWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHlDZWxscyA9IHRoaXMuY2VsbHMuZmlsdGVyKGZ1bmN0aW9uIChjZWxsKSB7IHJldHVybiBjZWxsLmlzRW1wdHkoKTsgfSk7XG4gICAgICAgIHZhciByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGVtcHR5Q2VsbHMubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGVtcHR5Q2VsbHNbcmFuZG9tSW5kZXhdO1xuICAgIH07XG4gICAgR3JpZC5wcm90b3R5cGUuY2VsbHNHcm91cGVCeUNvbHVtbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2VsbHMucmVkdWNlKGZ1bmN0aW9uIChncm91cGVkQ2VsbHMsIGNlbGwpIHtcbiAgICAgICAgICAgIGdyb3VwZWRDZWxsc1tjZWxsLnhdID0gZ3JvdXBlZENlbGxzW2NlbGwueF0gfHwgW107XG4gICAgICAgICAgICBncm91cGVkQ2VsbHNbY2VsbC54XVtjZWxsLnldID0gY2VsbDtcbiAgICAgICAgICAgIHJldHVybiBncm91cGVkQ2VsbHM7XG4gICAgICAgIH0sIFtdKTtcbiAgICB9O1xuICAgIEdyaWQucHJvdG90eXBlLmNlbGxzR3JvdXBlQnlSb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNlbGxzLnJlZHVjZShmdW5jdGlvbiAoZ3JvdXBlZENlbGxzLCBjZWxsKSB7XG4gICAgICAgICAgICBncm91cGVkQ2VsbHNbY2VsbC55XSA9IGdyb3VwZWRDZWxsc1tjZWxsLnldIHx8IFtdO1xuICAgICAgICAgICAgZ3JvdXBlZENlbGxzW2NlbGwueV1bY2VsbC54XSA9IGNlbGw7XG4gICAgICAgICAgICByZXR1cm4gZ3JvdXBlZENlbGxzO1xuICAgICAgICB9LCBbXSk7XG4gICAgfTtcbiAgICByZXR1cm4gR3JpZDtcbn0oKSk7XG5leHBvcnQgeyBHcmlkIH07XG4iLCJ2YXIgVGlsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaWxlKGdyaWRFbGVtZW50KSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSAwO1xuICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICB0aGlzLnkgPSAwO1xuICAgICAgICB0aGlzLnRpbGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMudGlsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGlsZScpO1xuICAgICAgICB0aGlzLnNldFZhbHVlKE1hdGgucmFuZG9tKCkgPiAwLjUgPyAyIDogNCk7XG4gICAgICAgIGdyaWRFbGVtZW50LmFwcGVuZCh0aGlzLnRpbGVFbGVtZW50KTtcbiAgICB9XG4gICAgVGlsZS5wcm90b3R5cGUuc2V0WFkgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLnRpbGVFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXgnLCB4LnRvU3RyaW5nKCkpO1xuICAgICAgICB0aGlzLnRpbGVFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KCctLXknLCB5LnRvU3RyaW5nKCkpO1xuICAgIH07XG4gICAgVGlsZS5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnRpbGVFbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgdmFyIGJnTGlnaHRuZXNzID0gMTAwIC0gTWF0aC5sb2cyKHZhbHVlKSAqIDk7XG4gICAgICAgIHRoaXMudGlsZUVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tYmctbGlnaHRuZXNzJywgXCJcIi5jb25jYXQoYmdMaWdodG5lc3MsIFwiJVwiKSk7XG4gICAgICAgIHRoaXMudGlsZUVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tdGV4dC1saWdodG5lc3MnLCBcIlwiLmNvbmNhdChiZ0xpZ2h0bmVzcyA8IDUwID8gOTAgOiAxMCwgXCIlXCIpKTtcbiAgICB9O1xuICAgIFRpbGUucHJvdG90eXBlLnJlbW92ZUZyb21Eb20gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudGlsZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBUaWxlLnByb3RvdHlwZS53YWl0Rm9yVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBfdGhpcy50aWxlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgcmVzb2x2ZSwge1xuICAgICAgICAgICAgICAgIG9uY2U6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBUaWxlLnByb3RvdHlwZS53YWl0Rm9yQW5pbWF0aW9uRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIF90aGlzLnRpbGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIHJlc29sdmUsIHtcbiAgICAgICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFRpbGU7XG59KCkpO1xuZXhwb3J0IHsgVGlsZSB9O1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0ICcuL3N0eWxlcy9zdHlsZS5zY3NzJztcbmltcG9ydCB7IEdyaWQgfSBmcm9tICcuL2dyaWQnO1xuaW1wb3J0IHsgVGlsZSB9IGZyb20gJy4vdGlsZSc7XG5pbXBvcnQgSGFtbWVyIGZyb20gJ2hhbW1lcmpzJztcbnZhciBnYW1lQm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1ib2FyZCcpO1xudmFyIGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG52YXIgaGFtbWVyID0gbmV3IEhhbW1lcihib2R5KTtcbmhhbW1lci5nZXQoJ3N3aXBlJykuc2V0KHsgZGlyZWN0aW9uOiBIYW1tZXIuRElSRUNUSU9OX0FMTCwgdGhyZXNob2xkOiA1IH0pO1xuaGFtbWVyLm9uKCdzd2lwZScsIGhhbmRsZUlucHV0KTtcbmZ1bmN0aW9uIHNldHVwSW5wdXRPbmNlKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlSW5wdXQsIHsgb25jZTogdHJ1ZSB9KTtcbn1cbnNldHVwSW5wdXRPbmNlKCk7XG52YXIgc3dpcGVIYW5kbGVkID0gZmFsc2U7XG52YXIgZ3JpZCA9IG5ldyBHcmlkKGdhbWVCb2FyZCwgNCk7XG5ncmlkLmdldFJhbmRvbUVtcHR5Q2VsbCgpLmxpbmtUaWxlKG5ldyBUaWxlKGdhbWVCb2FyZCkpO1xuZ3JpZC5nZXRSYW5kb21FbXB0eUNlbGwoKS5saW5rVGlsZShuZXcgVGlsZShnYW1lQm9hcmQpKTtcbmZ1bmN0aW9uIGhhbmRsZUlucHV0KGUpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgbmV3VGlsZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN3aXBlSGFuZGxlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVIYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBlIGluc3RhbmNlb2YgS2V5Ym9hcmRFdmVudCA/IGUua2V5IDogZS5kaXJlY3Rpb247XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Fycm93VXAnOiByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdBcnJvd0Rvd24nOiByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTY6IHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dMZWZ0JzogcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQXJyb3dSaWdodCc6IHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMgLypicmVhayovLCA3XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FuTW92ZVVwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwSW5wdXRPbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2lwZUhhbmRsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBtb3ZlVXAoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FuTW92ZURvd24oKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBJbnB1dE9uY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlSGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG1vdmVEb3duKCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbk1vdmVMZWZ0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwSW5wdXRPbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2lwZUhhbmRsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBtb3ZlTGVmdCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5Nb3ZlUmlnaHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBJbnB1dE9uY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlSGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIG1vdmVSaWdodCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgc2V0dXBJbnB1dE9uY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVIYW5kbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBuZXdUaWxlID0gbmV3IFRpbGUoZ2FtZUJvYXJkKTtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZC5nZXRSYW5kb21FbXB0eUNlbGwoKS5saW5rVGlsZShuZXdUaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbmV3VGlsZS53YWl0Rm9yQW5pbWF0aW9uRW5kKCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoIWNhbk1vdmVVcCgpICYmICFjYW5Nb3ZlRG93bigpICYmICFjYW5Nb3ZlTGVmdCgpICYmICFjYW5Nb3ZlUmlnaHQoKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDEzXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbmV3VGlsZS53YWl0Rm9yQW5pbWF0aW9uRW5kKCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1RyeSBhZ2FpbiEnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIHNldHVwSW5wdXRPbmNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlSGFuZGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbW92ZVVwKCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgc2xpZGVUaWxlcyhncmlkLmNlbGxzR3JvdXBlZEJ5Q29sdW1uKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBtb3ZlRG93bigpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHNsaWRlVGlsZXMoZ3JpZC5jZWxsc0dyb3VwZWRCeVJldmVyc2VkQ29sdW1uKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBtb3ZlTGVmdCgpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHNsaWRlVGlsZXMoZ3JpZC5jZWxsc0dyb3VwZWRCeVJvdyldO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbW92ZVJpZ2h0KCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgc2xpZGVUaWxlcyhncmlkLmNlbGxzR3JvdXBlZEJ5UmV2ZXJzZWRSb3cpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNsaWRlVGlsZXMoZ3JvdXBlZENlbGxzKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJvbWlzZXM7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2VzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwZWRDZWxscy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkgeyByZXR1cm4gc2xpZGVUaWxlc0luR3JvdXAoZ3JvdXAsIHByb21pc2VzKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKHByb21pc2VzKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGdyaWQuY2VsbHMuZm9yRWFjaChmdW5jdGlvbiAoY2VsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5oYXNUaWxlRm9yTWVyZ2UoKSAmJiBjZWxsLm1lcmdlVGlsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzbGlkZVRpbGVzSW5Hcm91cChncm91cCwgcHJvbWlzZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGdyb3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5pc0VtcHR5KCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgdmFyIGNlbGxXaXRoVGlsZSA9IGdyb3VwW2ldO1xuICAgICAgICB2YXIgdGFyZ2V0Q2VsbCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGogPSBpIC0gMTtcbiAgICAgICAgaWYgKGNlbGxXaXRoVGlsZS5saW5rZWRUaWxlKVxuICAgICAgICAgICAgd2hpbGUgKGogPj0gMCAmJiBncm91cFtqXS5jYW5BY2NlcHQoY2VsbFdpdGhUaWxlLmxpbmtlZFRpbGUpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q2VsbCA9IGdyb3VwW2pdO1xuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgaWYgKCF0YXJnZXRDZWxsKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmIChjZWxsV2l0aFRpbGUubGlua2VkVGlsZSlcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goY2VsbFdpdGhUaWxlLmxpbmtlZFRpbGUud2FpdEZvclRyYW5zaXRpb25FbmQoKSk7XG4gICAgICAgIGlmIChjZWxsV2l0aFRpbGUubGlua2VkVGlsZSlcbiAgICAgICAgICAgIGlmICh0YXJnZXRDZWxsLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgIHRhcmdldENlbGwubGlua1RpbGUoY2VsbFdpdGhUaWxlLmxpbmtlZFRpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q2VsbC5saW5rVGlsZUZvck1lcmdlKGNlbGxXaXRoVGlsZS5saW5rZWRUaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2VsbFdpdGhUaWxlLnVubGlua1RpbGUoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjYW5Nb3ZlVXAoKSB7XG4gICAgcmV0dXJuIGNhbk1vdmUoZ3JpZC5jZWxsc0dyb3VwZWRCeUNvbHVtbik7XG59XG5mdW5jdGlvbiBjYW5Nb3ZlRG93bigpIHtcbiAgICByZXR1cm4gY2FuTW92ZShncmlkLmNlbGxzR3JvdXBlZEJ5UmV2ZXJzZWRDb2x1bW4pO1xufVxuZnVuY3Rpb24gY2FuTW92ZUxlZnQoKSB7XG4gICAgcmV0dXJuIGNhbk1vdmUoZ3JpZC5jZWxsc0dyb3VwZWRCeVJvdyk7XG59XG5mdW5jdGlvbiBjYW5Nb3ZlUmlnaHQoKSB7XG4gICAgcmV0dXJuIGNhbk1vdmUoZ3JpZC5jZWxsc0dyb3VwZWRCeVJldmVyc2VkUm93KTtcbn1cbmZ1bmN0aW9uIGNhbk1vdmUoZ3JvdXBlZENlbGxzKSB7XG4gICAgcmV0dXJuIGdyb3VwZWRDZWxscy5zb21lKGZ1bmN0aW9uIChncm91cCkgeyByZXR1cm4gY2FuTW92ZUluR3JvdXAoZ3JvdXApOyB9KTtcbn1cbmZ1bmN0aW9uIGNhbk1vdmVJbkdyb3VwKGdyb3VwKSB7XG4gICAgcmV0dXJuIGdyb3VwLnNvbWUoZnVuY3Rpb24gKGNlbGwsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjZWxsLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YXJnZXRDZWxsID0gZ3JvdXBbaW5kZXggLSAxXTtcbiAgICAgICAgaWYgKGNlbGwubGlua2VkVGlsZSlcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRDZWxsLmNhbkFjY2VwdChjZWxsLmxpbmtlZFRpbGUpO1xuICAgIH0pO1xufVxuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsIndpbmRvdyIsImRvY3VtZW50IiwiZXhwb3J0TmFtZSIsImFzc2lnbiIsIlZFTkRPUl9QUkVGSVhFUyIsIlRFU1RfRUxFTUVOVCIsImNyZWF0ZUVsZW1lbnQiLCJUWVBFX0ZVTkNUSU9OIiwicm91bmQiLCJNYXRoIiwiYWJzIiwibm93IiwiRGF0ZSIsInNldFRpbWVvdXRDb250ZXh0IiwiZm4iLCJ0aW1lb3V0IiwiY29udGV4dCIsInNldFRpbWVvdXQiLCJiaW5kRm4iLCJpbnZva2VBcnJheUFyZyIsImFyZyIsIkFycmF5IiwiaXNBcnJheSIsImVhY2giLCJvYmoiLCJpdGVyYXRvciIsImZvckVhY2giLCJjYWxsIiwiaGFzT3duUHJvcGVydHkiLCJkZXByZWNhdGUiLCJtZXRob2QiLCJuYW1lIiwibWVzc2FnZSIsImRlcHJlY2F0aW9uTWVzc2FnZSIsImUiLCJFcnJvciIsInN0YWNrIiwicmVwbGFjZSIsImxvZyIsImNvbnNvbGUiLCJ3YXJuIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJPYmplY3QiLCJ0YXJnZXQiLCJUeXBlRXJyb3IiLCJvdXRwdXQiLCJpbmRleCIsInNvdXJjZSIsIm5leHRLZXkiLCJleHRlbmQiLCJkZXN0Iiwic3JjIiwibWVyZ2UiLCJrZXlzIiwiaW5oZXJpdCIsImNoaWxkIiwiYmFzZSIsInByb3BlcnRpZXMiLCJjaGlsZFAiLCJiYXNlUCIsInByb3RvdHlwZSIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiX3N1cGVyIiwiYm9vbE9yRm4iLCJ2YWwiLCJhcmdzIiwiaWZVbmRlZmluZWQiLCJ2YWwxIiwidmFsMiIsImFkZEV2ZW50TGlzdGVuZXJzIiwidHlwZXMiLCJoYW5kbGVyIiwic3BsaXRTdHIiLCJ0eXBlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhc1BhcmVudCIsIm5vZGUiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiaW5TdHIiLCJzdHIiLCJmaW5kIiwiaW5kZXhPZiIsInRyaW0iLCJzcGxpdCIsImluQXJyYXkiLCJmaW5kQnlLZXkiLCJ0b0FycmF5Iiwic2xpY2UiLCJ1bmlxdWVBcnJheSIsImtleSIsInNvcnQiLCJyZXN1bHRzIiwidmFsdWVzIiwiYSIsImIiLCJwcmVmaXhlZCIsInByb3BlcnR5IiwicHJlZml4IiwicHJvcCIsImNhbWVsUHJvcCIsInRvVXBwZXJDYXNlIiwiX3VuaXF1ZUlkIiwiZ2V0V2luZG93Rm9yRWxlbWVudCIsImVsZW1lbnQiLCJkb2MiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJTVVBQT1JUX1RPVUNIIiwiU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyIsIlNVUFBPUlRfT05MWV9UT1VDSCIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJJTlBVVF9UWVBFX1RPVUNIIiwiSU5QVVRfVFlQRV9NT1VTRSIsIkNPTVBVVEVfSU5URVJWQUwiLCJJTlBVVF9TVEFSVCIsIklOUFVUX0VORCIsIklOUFVUX0NBTkNFTCIsIkRJUkVDVElPTl9OT05FIiwiRElSRUNUSU9OX0xFRlQiLCJESVJFQ1RJT05fUklHSFQiLCJESVJFQ1RJT05fVVAiLCJESVJFQ1RJT05fRE9XTiIsIkRJUkVDVElPTl9IT1JJWk9OVEFMIiwiRElSRUNUSU9OX1ZFUlRJQ0FMIiwiRElSRUNUSU9OX0FMTCIsIlBST1BTX1hZIiwiUFJPUFNfQ0xJRU5UX1hZIiwiSW5wdXQiLCJtYW5hZ2VyIiwiY2FsbGJhY2siLCJzZWxmIiwib3B0aW9ucyIsImlucHV0VGFyZ2V0IiwiZG9tSGFuZGxlciIsImV2IiwiZW5hYmxlIiwiaW5pdCIsImlucHV0SGFuZGxlciIsImV2ZW50VHlwZSIsImlucHV0IiwicG9pbnRlcnNMZW4iLCJwb2ludGVycyIsImNoYW5nZWRQb2ludGVyc0xlbiIsImNoYW5nZWRQb2ludGVycyIsImlzRmlyc3QiLCJpc0ZpbmFsIiwic2Vzc2lvbiIsInBvaW50ZXJzTGVuZ3RoIiwiZmlyc3RJbnB1dCIsInNpbXBsZUNsb25lSW5wdXREYXRhIiwiZmlyc3RNdWx0aXBsZSIsIm9mZnNldENlbnRlciIsImNlbnRlciIsImdldENlbnRlciIsInRpbWVTdGFtcCIsImRlbHRhVGltZSIsImFuZ2xlIiwiZ2V0QW5nbGUiLCJkaXN0YW5jZSIsImdldERpc3RhbmNlIiwib2Zmc2V0Iiwib2Zmc2V0RGVsdGEiLCJwcmV2RGVsdGEiLCJwcmV2SW5wdXQiLCJ4IiwiZGVsdGFYIiwieSIsImRlbHRhWSIsImNvbXB1dGVEZWx0YVhZIiwib2Zmc2V0RGlyZWN0aW9uIiwiZ2V0RGlyZWN0aW9uIiwic3RhcnQiLCJlbmQiLCJvdmVyYWxsVmVsb2NpdHkiLCJnZXRWZWxvY2l0eSIsIm92ZXJhbGxWZWxvY2l0eVgiLCJvdmVyYWxsVmVsb2NpdHlZIiwic2NhbGUiLCJyb3RhdGlvbiIsImdldFJvdGF0aW9uIiwibWF4UG9pbnRlcnMiLCJ2ZWxvY2l0eSIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsImRpcmVjdGlvbiIsImxhc3QiLCJsYXN0SW50ZXJ2YWwiLCJ2IiwiY29tcHV0ZUludGVydmFsSW5wdXREYXRhIiwic3JjRXZlbnQiLCJjb21wdXRlSW5wdXREYXRhIiwiZW1pdCIsInJlY29nbml6ZSIsImNsaWVudFgiLCJjbGllbnRZIiwicDEiLCJwMiIsInByb3BzIiwic3FydCIsImF0YW4yIiwiUEkiLCJldkVsIiwiZXZUYXJnZXQiLCJldldpbiIsImRlc3Ryb3kiLCJNT1VTRV9JTlBVVF9NQVAiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwiTU9VU0VfRUxFTUVOVF9FVkVOVFMiLCJNT1VTRV9XSU5ET1dfRVZFTlRTIiwiTW91c2VJbnB1dCIsInByZXNzZWQiLCJidXR0b24iLCJ3aGljaCIsInBvaW50ZXJUeXBlIiwiUE9JTlRFUl9JTlBVVF9NQVAiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmNhbmNlbCIsInBvaW50ZXJvdXQiLCJJRTEwX1BPSU5URVJfVFlQRV9FTlVNIiwiUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyIsIlBPSU5URVJfV0lORE9XX0VWRU5UUyIsIlBvaW50ZXJFdmVudElucHV0Iiwic3RvcmUiLCJwb2ludGVyRXZlbnRzIiwiTVNQb2ludGVyRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJyZW1vdmVQb2ludGVyIiwiZXZlbnRUeXBlTm9ybWFsaXplZCIsInRvTG93ZXJDYXNlIiwiaXNUb3VjaCIsInN0b3JlSW5kZXgiLCJwb2ludGVySWQiLCJzcGxpY2UiLCJTSU5HTEVfVE9VQ0hfSU5QVVRfTUFQIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwidG91Y2hjYW5jZWwiLCJTaW5nbGVUb3VjaElucHV0Iiwic3RhcnRlZCIsIm5vcm1hbGl6ZVNpbmdsZVRvdWNoZXMiLCJhbGwiLCJ0b3VjaGVzIiwiY2hhbmdlZCIsImNoYW5nZWRUb3VjaGVzIiwiVE9VQ0hfSU5QVVRfTUFQIiwiVE9VQ0hfVEFSR0VUX0VWRU5UUyIsIlRvdWNoSW5wdXQiLCJ0YXJnZXRJZHMiLCJnZXRUb3VjaGVzIiwiYWxsVG91Y2hlcyIsImlkZW50aWZpZXIiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRhcmdldFRvdWNoZXMiLCJmaWx0ZXIiLCJ0b3VjaCIsIkRFRFVQX1RJTUVPVVQiLCJUb3VjaE1vdXNlSW5wdXQiLCJtb3VzZSIsInByaW1hcnlUb3VjaCIsImxhc3RUb3VjaGVzIiwicmVjb3JkVG91Y2hlcyIsImV2ZW50RGF0YSIsInNldExhc3RUb3VjaCIsImxhc3RUb3VjaCIsImx0cyIsImlzU3ludGhldGljRXZlbnQiLCJ0IiwiZHgiLCJkeSIsImlucHV0RXZlbnQiLCJpbnB1dERhdGEiLCJpc01vdXNlIiwic291cmNlQ2FwYWJpbGl0aWVzIiwiZmlyZXNUb3VjaEV2ZW50cyIsIlBSRUZJWEVEX1RPVUNIX0FDVElPTiIsInN0eWxlIiwiTkFUSVZFX1RPVUNIX0FDVElPTiIsIlRPVUNIX0FDVElPTl9DT01QVVRFIiwiVE9VQ0hfQUNUSU9OX0FVVE8iLCJUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OIiwiVE9VQ0hfQUNUSU9OX05PTkUiLCJUT1VDSF9BQ1RJT05fUEFOX1giLCJUT1VDSF9BQ1RJT05fUEFOX1kiLCJUT1VDSF9BQ1RJT05fTUFQIiwidG91Y2hNYXAiLCJjc3NTdXBwb3J0cyIsIkNTUyIsImdldFRvdWNoQWN0aW9uUHJvcHMiLCJUb3VjaEFjdGlvbiIsInZhbHVlIiwic2V0IiwiY29tcHV0ZSIsImFjdGlvbnMiLCJ1cGRhdGUiLCJ0b3VjaEFjdGlvbiIsInJlY29nbml6ZXJzIiwicmVjb2duaXplciIsImdldFRvdWNoQWN0aW9uIiwiaGFzUGFuWCIsImhhc1BhblkiLCJjbGVhblRvdWNoQWN0aW9ucyIsInByZXZlbnREZWZhdWx0cyIsInByZXZlbnRlZCIsInByZXZlbnREZWZhdWx0IiwiaGFzTm9uZSIsImlzVGFwUG9pbnRlciIsImlzVGFwTW92ZW1lbnQiLCJpc1RhcFRvdWNoVGltZSIsInByZXZlbnRTcmMiLCJTVEFURV9QT1NTSUJMRSIsIlNUQVRFX0ZBSUxFRCIsIlJlY29nbml6ZXIiLCJkZWZhdWx0cyIsInN0YXRlIiwic2ltdWx0YW5lb3VzIiwicmVxdWlyZUZhaWwiLCJzdGF0ZVN0ciIsImRpcmVjdGlvblN0ciIsImdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIiLCJvdGhlclJlY29nbml6ZXIiLCJnZXQiLCJBdHRyUmVjb2duaXplciIsIlBhblJlY29nbml6ZXIiLCJwWCIsInBZIiwiUGluY2hSZWNvZ25pemVyIiwiUHJlc3NSZWNvZ25pemVyIiwiX3RpbWVyIiwiX2lucHV0IiwiUm90YXRlUmVjb2duaXplciIsIlN3aXBlUmVjb2duaXplciIsIlRhcFJlY29nbml6ZXIiLCJwVGltZSIsInBDZW50ZXIiLCJjb3VudCIsIkhhbW1lciIsInByZXNldCIsIk1hbmFnZXIiLCJoYW5kbGVycyIsIm9sZENzc1Byb3BzIiwiaW5wdXRDbGFzcyIsInRvZ2dsZUNzc1Byb3BzIiwiYWRkIiwicmVjb2duaXplV2l0aCIsInJlcXVpcmVGYWlsdXJlIiwiY3NzUHJvcHMiLCJkcm9wUmVjb2duaXplV2l0aCIsImRyb3BSZXF1aXJlRmFpbHVyZSIsImhhc1JlcXVpcmVGYWlsdXJlcyIsImNhblJlY29nbml6ZVdpdGgiLCJldmVudCIsImFkZGl0aW9uYWxFdmVudCIsInRyeUVtaXQiLCJjYW5FbWl0IiwiaW5wdXREYXRhQ2xvbmUiLCJyZXNldCIsInByb2Nlc3MiLCJhdHRyVGVzdCIsIm9wdGlvblBvaW50ZXJzIiwiaXNSZWNvZ25pemVkIiwiaXNWYWxpZCIsInRocmVzaG9sZCIsImRpcmVjdGlvblRlc3QiLCJoYXNNb3ZlZCIsImluT3V0IiwidGltZSIsInZhbGlkUG9pbnRlcnMiLCJ2YWxpZE1vdmVtZW50IiwidmFsaWRUaW1lIiwiY2xlYXJUaW1lb3V0IiwidGFwcyIsImludGVydmFsIiwicG9zVGhyZXNob2xkIiwidmFsaWRUb3VjaFRpbWUiLCJmYWlsVGltZW91dCIsInZhbGlkSW50ZXJ2YWwiLCJ2YWxpZE11bHRpVGFwIiwidGFwQ291bnQiLCJWRVJTSU9OIiwiZG9tRXZlbnRzIiwidXNlclNlbGVjdCIsInRvdWNoU2VsZWN0IiwidG91Y2hDYWxsb3V0IiwiY29udGVudFpvb21pbmciLCJ1c2VyRHJhZyIsInRhcEhpZ2hsaWdodENvbG9yIiwic3RvcCIsImZvcmNlIiwic3RvcHBlZCIsImN1clJlY29nbml6ZXIiLCJleGlzdGluZyIsInJlbW92ZSIsIm9uIiwiZXZlbnRzIiwib2ZmIiwiZ2VzdHVyZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJnZXN0dXJlIiwiZGlzcGF0Y2hFdmVudCIsInRyaWdnZXJEb21FdmVudCIsIklOUFVUX01PVkUiLCJTVEFURV9CRUdBTiIsIlNUQVRFX0NIQU5HRUQiLCJTVEFURV9FTkRFRCIsIlNUQVRFX1JFQ09HTklaRUQiLCJTVEFURV9DQU5DRUxMRUQiLCJUYXAiLCJQYW4iLCJTd2lwZSIsIlBpbmNoIiwiUm90YXRlIiwiUHJlc3MiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiYXBwZW5kQ2hpbGQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwibmMiLCJsb2NhbHMiLCJDZWxsIiwiZ3JpZEVsZW1lbnQiLCJsaW5rZWRUaWxlIiwibGlua2VkVGlsZUZvck1lcmdlIiwiY2VsbCIsImNsYXNzTGlzdCIsImFwcGVuZCIsImxpbmtUaWxlIiwidGlsZSIsInNldFhZIiwiaXNFbXB0eSIsInVubGlua1RpbGUiLCJ1bmxpbmtUaWxlRm9yTWVyZ2UiLCJsaW5rVGlsZUZvck1lcmdlIiwiaGFzVGlsZUZvck1lcmdlIiwiY2FuQWNjZXB0IiwibmV3VGlsZSIsIl9hIiwibWVyZ2VUaWxlcyIsIl9iIiwiX2MiLCJzZXRWYWx1ZSIsIk51bWJlciIsInJlbW92ZUZyb21Eb20iLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyIiwibCIsIkdyaWQiLCJjb3VudENlbGxzIiwic2V0UHJvcGVydHkiLCJjZWxscyIsInBvdyIsImZsb29yIiwiY2VsbHNHcm91cGVkQnlDb2x1bW4iLCJjZWxsc0dyb3VwZUJ5Q29sdW1uIiwiY2VsbHNHcm91cGVkQnlSZXZlcnNlZENvbHVtbiIsImNvbHVtbiIsInJldmVyc2UiLCJjZWxsc0dyb3VwZWRCeVJvdyIsImNlbGxzR3JvdXBlQnlSb3ciLCJjZWxsc0dyb3VwZWRCeVJldmVyc2VkUm93Iiwicm93IiwiZ2V0UmFuZG9tRW1wdHlDZWxsIiwiZW1wdHlDZWxscyIsInJhbmRvbSIsInJlZHVjZSIsImdyb3VwZWRDZWxscyIsIlRpbGUiLCJ0aWxlRWxlbWVudCIsInRleHRDb250ZW50IiwiYmdMaWdodG5lc3MiLCJsb2cyIiwid2FpdEZvclRyYW5zaXRpb25FbmQiLCJfdGhpcyIsIlByb21pc2UiLCJyZXNvbHZlIiwib25jZSIsIndhaXRGb3JBbmltYXRpb25FbmQiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwiZG9uZSIsInRoZW4iLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIlN5bWJvbCIsIm9wIiwicG9wIiwiZ2FtZUJvYXJkIiwiZ2V0RWxlbWVudEJ5SWQiLCJzZXR1cElucHV0T25jZSIsImhhbmRsZUlucHV0Iiwic3dpcGVIYW5kbGVkIiwiZ3JpZCIsIktleWJvYXJkRXZlbnQiLCJjYW5Nb3ZlVXAiLCJtb3ZlVXAiLCJjYW5Nb3ZlRG93biIsIm1vdmVEb3duIiwiY2FuTW92ZUxlZnQiLCJtb3ZlTGVmdCIsImNhbk1vdmVSaWdodCIsIm1vdmVSaWdodCIsImFsZXJ0Iiwic2xpZGVUaWxlcyIsInByb21pc2VzIiwiZ3JvdXAiLCJjZWxsV2l0aFRpbGUiLCJ0YXJnZXRDZWxsIiwiaiIsInNsaWRlVGlsZXNJbkdyb3VwIiwiY2FuTW92ZSIsInNvbWUiLCJjYW5Nb3ZlSW5Hcm91cCJdLCJzb3VyY2VSb290IjoiIn0=